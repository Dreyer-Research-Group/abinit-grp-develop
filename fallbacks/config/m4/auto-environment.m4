# -*- Autoconf -*-
#
# Copyright (C) 2005-2014 ABINIT Group (Yann Pouillon)
#
# This file is part of the ABINIT software package. For license information,
# please see the COPYING file in the top-level directory of the ABINIT source
# distribution.
#

# Generated by make-macros-environment on 2019/03/04 18:31:28 +0000

#
# Environment variables relevant to ABINIT
#

#
# IMPORTANT NOTE
#
# This file has been automatically generated by the make-macros-environment
# script. Any change will systematically be overwritten.
#



# AFB_ENV_AC_UPDATE(LANG)
# ---------------------------------
#
# Updates Autoconf build environment.
#
AC_DEFUN([AFB_ENV_AC_UPDATE],[
  dnl Please note that the existing environment will always be overwritten.
  dnl Thus you should save sensistive data before calling this macro.

  dnl Check arguments
  m4_if([$1], [tmp_lang="$1"], [tmp_lang="Fortran"])dnl

  dnl Update linker flags
  case "$1" in
    C)
      LDFLAGS="${CC_LDFLAGS}"
      ;;
    C++)
      LDFLAGS="${CXX_LDFLAGS}"
      ;;
    Fortran)
      LDFLAGS="${FC_LDFLAGS}"
      ;;
  esac

  dnl Update linker additional libs
  LIBS="${CC_LIBS}"
  CXXLIBS="${CXX_LIBS}"
  FCLIBS="${FC_LIBS}"

  unset tmp_lang
]) # AFB_ENV_AC_UPDATE



# AFB_ENV_INIT()
# --------------
#
# Declares ABINIT environment variables and initializes the internal
# variables.
#
AC_DEFUN([AFB_ENV_INIT],[

  dnl Library archiver

  dnl Library archiver flags
  AC_SUBST(ARFLAGS)

  dnl Library archiver commands
  ARFLAGS_CMD='rc'
  AC_SUBST(ARFLAGS_CMD)

  dnl Additional library archiver flags
  AC_ARG_VAR([ARFLAGS_EXTRA],
    [Additional library archiver flags])
  AC_SUBST(ARFLAGS_EXTRA)

  dnl C compiler

  dnl C linker flags
  AC_ARG_VAR([CC_LDFLAGS],
    [C linker flags])
  AC_SUBST(CC_LDFLAGS)

  dnl Additional C linker flags
  AC_SUBST(CC_LDFLAGS_EXTRA)

  dnl C linker libraries
  AC_ARG_VAR([CC_LIBS],
    [C linker libraries])
  AC_SUBST(CC_LIBS)

  dnl C compiler for NetCDF4
  AC_SUBST(CC_NETCDF4)

  dnl Configure flags
  AC_ARG_VAR([CFGFLAGS],
    [Configure flags])
  AC_SUBST(CFGFLAGS)

  dnl Additional configure flags
  AC_ARG_VAR([CFGFLAGS_EXTRA],
    [Additional configure flags])
  AC_SUBST(CFGFLAGS_EXTRA)

  dnl Configure script
  AC_ARG_VAR([CFGSCRIPT],
    [Configure script])
  CFGSCRIPT=''
  AC_SUBST(CFGSCRIPT)

  dnl C compiler flags

  dnl Additional C compiler flags
  AC_ARG_VAR([CFLAGS_EXTRA],
    [Additional C compiler flags])
  AC_SUBST(CFLAGS_EXTRA)

  dnl C preprocessor

  dnl C preprocessor flags

  dnl Additional C preprocessor flags
  AC_ARG_VAR([CPPFLAGS_EXTRA],
    [Additional C preprocessor flags])
  AC_SUBST(CPPFLAGS_EXTRA)

  dnl C++ compiler

  dnl C++ compiler flags

  dnl Additional C++ compiler flags
  AC_ARG_VAR([CXXFLAGS_EXTRA],
    [Additional C++ compiler flags])
  AC_SUBST(CXXFLAGS_EXTRA)

  dnl C++ linker flags
  AC_ARG_VAR([CXX_LDFLAGS],
    [C++ linker flags])

  dnl Additional C++ linker flags
  AC_ARG_VAR([CXX_LDFLAGS_EXTRA],
    [Additional C++ linker flags])
  AC_SUBST(CXX_LDFLAGS_EXTRA)

  dnl C++ linker additional libraries
  AC_ARG_VAR([CXX_LIBS],
    [C++ linker additional libraries])
  AC_SUBST(CXX_LIBS)

  dnl C preprocessor definitions

  dnl Fortran compiler

  dnl Fortran compiler flags
  AC_SUBST(FCFLAGS)

  dnl Additional Fortran compiler flags
  AC_ARG_VAR([FCFLAGS_EXTRA],
    [Additional Fortran compiler flags])
  AC_SUBST(FCFLAGS_EXTRA)

  dnl Fortran flags for fixed-form source files
  FCFLAGS_FIXEDFORM=''
  AC_SUBST(FCFLAGS_FIXEDFORM)

  dnl Fortran flags for free-form source files
  FCFLAGS_FREEFORM=''
  AC_SUBST(FCFLAGS_FREEFORM)

  dnl Fortran compiler flags to use a module directory
  FCFLAGS_MODDIR=''
  AC_SUBST(FCFLAGS_MODDIR)

  dnl Fortran linker flags
  AC_ARG_VAR([FC_LDFLAGS],
    [Fortran linker flags])

  dnl Additional Fortran linker flags
  AC_ARG_VAR([FC_LDFLAGS_EXTRA],
    [Additional Fortran linker flags])
  AC_SUBST(FC_LDFLAGS_EXTRA)

  dnl Fortran linker additional libraries
  AC_ARG_VAR([FC_LIBS],
    [Fortran linker additional libraries])
  AC_SUBST(FC_LIBS)

  dnl Fortran preprocessor
  AC_ARG_VAR([FPP],
    [Fortran preprocessor])
  AC_SUBST(FPP)

  dnl Fortran preprocessor flags
  AC_ARG_VAR([FPPFLAGS],
    [Fortran preprocessor flags])
  AC_SUBST(FPPFLAGS)

  dnl Additional Fortran preprocessor flags
  AC_ARG_VAR([FPPFLAGS_EXTRA],
    [Additional Fortran preprocessor flags])
  AC_SUBST(FPPFLAGS_EXTRA)

  dnl Linker
  AC_SUBST(LD)

  dnl Archive indexer

  dnl C++ preprocessor
  AC_ARG_VAR([XPP],
    [C++ preprocessor])
  AC_SUBST(XPP)

  dnl C++ preprocessor flags
  AC_ARG_VAR([XPPFLAGS],
    [C++ preprocessor flags])
  AC_SUBST(XPPFLAGS)

  dnl Additional C++ preprocessor flags
  AC_ARG_VAR([XPPFLAGS_EXTRA],
    [Additional C++ preprocessor flags])
  AC_SUBST(XPPFLAGS_EXTRA)

]) # AFB_ENV_INIT



# AFB_ENV_BACKUP()
# ----------------
#
# Saves all ABINIT environment variables.
#
AC_DEFUN([AFB_ENV_BACKUP],[
  dnl All variables will be saved, yet please note that they may be
  dnl conditionally restored (see AFB_ENV_RECALL for details).

  dnl Save Library archiver
  abi_env_AR="${AR}"

  dnl Save Library archiver flags
  abi_env_ARFLAGS="${ARFLAGS}"

  dnl Save Library archiver commands
  abi_env_ARFLAGS_CMD="${ARFLAGS_CMD}"

  dnl Save Additional library archiver flags
  abi_env_ARFLAGS_EXTRA="${ARFLAGS_EXTRA}"

  dnl Save C compiler
  abi_env_CC="${CC}"

  dnl Save C linker flags
  abi_env_CC_LDFLAGS="${CC_LDFLAGS}"

  dnl Save Additional C linker flags
  abi_env_CC_LDFLAGS_EXTRA="${CC_LDFLAGS_EXTRA}"

  dnl Save C linker libraries
  abi_env_CC_LIBS="${CC_LIBS}"

  dnl Save C compiler for NetCDF4
  abi_env_CC_NETCDF4="${CC_NETCDF4}"

  dnl Save Configure flags
  abi_env_CFGFLAGS="${CFGFLAGS}"

  dnl Save Additional configure flags
  abi_env_CFGFLAGS_EXTRA="${CFGFLAGS_EXTRA}"

  dnl Save Configure script
  abi_env_CFGSCRIPT="${CFGSCRIPT}"

  dnl Save C compiler flags
  abi_env_CFLAGS="${CFLAGS}"

  dnl Save Additional C compiler flags
  abi_env_CFLAGS_EXTRA="${CFLAGS_EXTRA}"

  dnl Save C preprocessor
  abi_env_CPP="${CPP}"

  dnl Save C preprocessor flags
  abi_env_CPPFLAGS="${CPPFLAGS}"

  dnl Save Additional C preprocessor flags
  abi_env_CPPFLAGS_EXTRA="${CPPFLAGS_EXTRA}"

  dnl Save C++ compiler
  abi_env_CXX="${CXX}"

  dnl Save C++ compiler flags
  abi_env_CXXFLAGS="${CXXFLAGS}"

  dnl Save Additional C++ compiler flags
  abi_env_CXXFLAGS_EXTRA="${CXXFLAGS_EXTRA}"

  dnl Save C++ linker flags
  abi_env_CXX_LDFLAGS="${CXX_LDFLAGS}"

  dnl Save Additional C++ linker flags
  abi_env_CXX_LDFLAGS_EXTRA="${CXX_LDFLAGS_EXTRA}"

  dnl Save C++ linker additional libraries
  abi_env_CXX_LIBS="${CXX_LIBS}"

  dnl Save C preprocessor definitions
  abi_env_DEFS="${DEFS}"

  dnl Save Fortran compiler
  abi_env_FC="${FC}"

  dnl Save Fortran compiler flags
  abi_env_FCFLAGS="${FCFLAGS}"

  dnl Save Additional Fortran compiler flags
  abi_env_FCFLAGS_EXTRA="${FCFLAGS_EXTRA}"

  dnl Save Fortran flags for fixed-form source files
  abi_env_FCFLAGS_FIXEDFORM="${FCFLAGS_FIXEDFORM}"

  dnl Save Fortran flags for free-form source files
  abi_env_FCFLAGS_FREEFORM="${FCFLAGS_FREEFORM}"

  dnl Save Fortran compiler flags to use a module directory
  abi_env_FCFLAGS_MODDIR="${FCFLAGS_MODDIR}"

  dnl Save Fortran linker flags
  abi_env_FC_LDFLAGS="${FC_LDFLAGS}"

  dnl Save Additional Fortran linker flags
  abi_env_FC_LDFLAGS_EXTRA="${FC_LDFLAGS_EXTRA}"

  dnl Save Fortran linker additional libraries
  abi_env_FC_LIBS="${FC_LIBS}"

  dnl Save Fortran preprocessor
  abi_env_FPP="${FPP}"

  dnl Save Fortran preprocessor flags
  abi_env_FPPFLAGS="${FPPFLAGS}"

  dnl Save Additional Fortran preprocessor flags
  abi_env_FPPFLAGS_EXTRA="${FPPFLAGS_EXTRA}"

  dnl Save Linker
  abi_env_LD="${LD}"

  dnl Save Archive indexer
  abi_env_RANLIB="${RANLIB}"

  dnl Save C++ preprocessor
  abi_env_XPP="${XPP}"

  dnl Save C++ preprocessor flags
  abi_env_XPPFLAGS="${XPPFLAGS}"

  dnl Save Additional C++ preprocessor flags
  abi_env_XPPFLAGS_EXTRA="${XPPFLAGS_EXTRA}"

]) # AFB_ENV_BACKUP



# AFB_ENV_RECALL()
# ----------------
#
# Restores all previously-saved non-empty ABINIT environment variables.
#
AC_DEFUN([AFB_ENV_RECALL],[
  dnl The following ensures that non-empty environment variables always override
  dnl what is read from the config files.

  dnl Recall Library archiver
  if test "${abi_env_AR}" != ""; then
    test "${AR}" != "${abi_env_AR}" && \
      AC_MSG_NOTICE([overriding configuration of AR from environment])
    AR="${abi_env_AR}"
  fi

  dnl Recall Library archiver flags
  if test "${abi_env_ARFLAGS}" != ""; then
    test "${ARFLAGS}" != "${abi_env_ARFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of ARFLAGS from environment])
    ARFLAGS="${abi_env_ARFLAGS}"
  fi

  dnl Recall Library archiver commands
  if test "${abi_env_ARFLAGS_CMD}" != ""; then
    test "${ARFLAGS_CMD}" != "${abi_env_ARFLAGS_CMD}" && \
      AC_MSG_NOTICE([overriding configuration of ARFLAGS_CMD from environment])
    ARFLAGS_CMD="${abi_env_ARFLAGS_CMD}"
  fi

  dnl Recall Additional library archiver flags
  if test "${abi_env_ARFLAGS_EXTRA}" != ""; then
    test "${ARFLAGS_EXTRA}" != "${abi_env_ARFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of ARFLAGS_EXTRA from environment])
    ARFLAGS_EXTRA="${abi_env_ARFLAGS_EXTRA}"
  fi

  dnl Recall C compiler
  if test "${abi_env_CC}" != ""; then
    test "${CC}" != "${abi_env_CC}" && \
      AC_MSG_NOTICE([overriding configuration of CC from environment])
    CC="${abi_env_CC}"
  fi

  dnl Recall C linker flags
  if test "${abi_env_CC_LDFLAGS}" != ""; then
    test "${CC_LDFLAGS}" != "${abi_env_CC_LDFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LDFLAGS from environment])
    CC_LDFLAGS="${abi_env_CC_LDFLAGS}"
  fi

  dnl Recall Additional C linker flags
  if test "${abi_env_CC_LDFLAGS_EXTRA}" != ""; then
    test "${CC_LDFLAGS_EXTRA}" != "${abi_env_CC_LDFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LDFLAGS_EXTRA from environment])
    CC_LDFLAGS_EXTRA="${abi_env_CC_LDFLAGS_EXTRA}"
  fi

  dnl Recall C linker libraries
  if test "${abi_env_CC_LIBS}" != ""; then
    test "${CC_LIBS}" != "${abi_env_CC_LIBS}" && \
      AC_MSG_NOTICE([overriding configuration of CC_LIBS from environment])
    CC_LIBS="${abi_env_CC_LIBS}"
  fi

  dnl Recall C compiler for NetCDF4
  if test "${abi_env_CC_NETCDF4}" != ""; then
    test "${CC_NETCDF4}" != "${abi_env_CC_NETCDF4}" && \
      AC_MSG_NOTICE([overriding configuration of CC_NETCDF4 from environment])
    CC_NETCDF4="${abi_env_CC_NETCDF4}"
  fi

  dnl Recall Configure flags
  if test "${abi_env_CFGFLAGS}" != ""; then
    test "${CFGFLAGS}" != "${abi_env_CFGFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of CFGFLAGS from environment])
    CFGFLAGS="${abi_env_CFGFLAGS}"
  fi

  dnl Recall Additional configure flags
  if test "${abi_env_CFGFLAGS_EXTRA}" != ""; then
    test "${CFGFLAGS_EXTRA}" != "${abi_env_CFGFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of CFGFLAGS_EXTRA from environment])
    CFGFLAGS_EXTRA="${abi_env_CFGFLAGS_EXTRA}"
  fi

  dnl Recall Configure script
  if test "${abi_env_CFGSCRIPT}" != ""; then
    test "${CFGSCRIPT}" != "${abi_env_CFGSCRIPT}" && \
      AC_MSG_NOTICE([overriding configuration of CFGSCRIPT from environment])
    CFGSCRIPT="${abi_env_CFGSCRIPT}"
  fi

  dnl Recall C compiler flags
  if test "${abi_env_CFLAGS}" != ""; then
    test "${CFLAGS}" != "${abi_env_CFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of CFLAGS from environment])
    CFLAGS="${abi_env_CFLAGS}"
  fi

  dnl Recall Additional C compiler flags
  if test "${abi_env_CFLAGS_EXTRA}" != ""; then
    test "${CFLAGS_EXTRA}" != "${abi_env_CFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of CFLAGS_EXTRA from environment])
    CFLAGS_EXTRA="${abi_env_CFLAGS_EXTRA}"
  fi

  dnl Recall C preprocessor
  if test "${abi_env_CPP}" != ""; then
    test "${CPP}" != "${abi_env_CPP}" && \
      AC_MSG_NOTICE([overriding configuration of CPP from environment])
    CPP="${abi_env_CPP}"
  fi

  dnl Recall C preprocessor flags
  if test "${abi_env_CPPFLAGS}" != ""; then
    test "${CPPFLAGS}" != "${abi_env_CPPFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of CPPFLAGS from environment])
    CPPFLAGS="${abi_env_CPPFLAGS}"
  fi

  dnl Recall Additional C preprocessor flags
  if test "${abi_env_CPPFLAGS_EXTRA}" != ""; then
    test "${CPPFLAGS_EXTRA}" != "${abi_env_CPPFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of CPPFLAGS_EXTRA from environment])
    CPPFLAGS_EXTRA="${abi_env_CPPFLAGS_EXTRA}"
  fi

  dnl Recall C++ compiler
  if test "${abi_env_CXX}" != ""; then
    test "${CXX}" != "${abi_env_CXX}" && \
      AC_MSG_NOTICE([overriding configuration of CXX from environment])
    CXX="${abi_env_CXX}"
  fi

  dnl Recall C++ compiler flags
  if test "${abi_env_CXXFLAGS}" != ""; then
    test "${CXXFLAGS}" != "${abi_env_CXXFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of CXXFLAGS from environment])
    CXXFLAGS="${abi_env_CXXFLAGS}"
  fi

  dnl Recall Additional C++ compiler flags
  if test "${abi_env_CXXFLAGS_EXTRA}" != ""; then
    test "${CXXFLAGS_EXTRA}" != "${abi_env_CXXFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of CXXFLAGS_EXTRA from environment])
    CXXFLAGS_EXTRA="${abi_env_CXXFLAGS_EXTRA}"
  fi

  dnl Recall C++ linker flags
  if test "${abi_env_CXX_LDFLAGS}" != ""; then
    test "${CXX_LDFLAGS}" != "${abi_env_CXX_LDFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LDFLAGS from environment])
    CXX_LDFLAGS="${abi_env_CXX_LDFLAGS}"
  fi

  dnl Recall Additional C++ linker flags
  if test "${abi_env_CXX_LDFLAGS_EXTRA}" != ""; then
    test "${CXX_LDFLAGS_EXTRA}" != "${abi_env_CXX_LDFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LDFLAGS_EXTRA from environment])
    CXX_LDFLAGS_EXTRA="${abi_env_CXX_LDFLAGS_EXTRA}"
  fi

  dnl Recall C++ linker additional libraries
  if test "${abi_env_CXX_LIBS}" != ""; then
    test "${CXX_LIBS}" != "${abi_env_CXX_LIBS}" && \
      AC_MSG_NOTICE([overriding configuration of CXX_LIBS from environment])
    CXX_LIBS="${abi_env_CXX_LIBS}"
  fi

  dnl Recall C preprocessor definitions
  if test "${abi_env_DEFS}" != ""; then
    test "${DEFS}" != "${abi_env_DEFS}" && \
      AC_MSG_NOTICE([overriding configuration of DEFS from environment])
    DEFS="${abi_env_DEFS}"
  fi

  dnl Recall Fortran compiler
  if test "${abi_env_FC}" != ""; then
    test "${FC}" != "${abi_env_FC}" && \
      AC_MSG_NOTICE([overriding configuration of FC from environment])
    FC="${abi_env_FC}"
  fi

  dnl Recall Fortran compiler flags
  if test "${abi_env_FCFLAGS}" != ""; then
    test "${FCFLAGS}" != "${abi_env_FCFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of FCFLAGS from environment])
    FCFLAGS="${abi_env_FCFLAGS}"
  fi

  dnl Recall Additional Fortran compiler flags
  if test "${abi_env_FCFLAGS_EXTRA}" != ""; then
    test "${FCFLAGS_EXTRA}" != "${abi_env_FCFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of FCFLAGS_EXTRA from environment])
    FCFLAGS_EXTRA="${abi_env_FCFLAGS_EXTRA}"
  fi

  dnl Recall Fortran flags for fixed-form source files
  if test "${abi_env_FCFLAGS_FIXEDFORM}" != ""; then
    test "${FCFLAGS_FIXEDFORM}" != "${abi_env_FCFLAGS_FIXEDFORM}" && \
      AC_MSG_NOTICE([overriding configuration of FCFLAGS_FIXEDFORM from environment])
    FCFLAGS_FIXEDFORM="${abi_env_FCFLAGS_FIXEDFORM}"
  fi

  dnl Recall Fortran flags for free-form source files
  if test "${abi_env_FCFLAGS_FREEFORM}" != ""; then
    test "${FCFLAGS_FREEFORM}" != "${abi_env_FCFLAGS_FREEFORM}" && \
      AC_MSG_NOTICE([overriding configuration of FCFLAGS_FREEFORM from environment])
    FCFLAGS_FREEFORM="${abi_env_FCFLAGS_FREEFORM}"
  fi

  dnl Recall Fortran compiler flags to use a module directory
  if test "${abi_env_FCFLAGS_MODDIR}" != ""; then
    test "${FCFLAGS_MODDIR}" != "${abi_env_FCFLAGS_MODDIR}" && \
      AC_MSG_NOTICE([overriding configuration of FCFLAGS_MODDIR from environment])
    FCFLAGS_MODDIR="${abi_env_FCFLAGS_MODDIR}"
  fi

  dnl Recall Fortran linker flags
  if test "${abi_env_FC_LDFLAGS}" != ""; then
    test "${FC_LDFLAGS}" != "${abi_env_FC_LDFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of FC_LDFLAGS from environment])
    FC_LDFLAGS="${abi_env_FC_LDFLAGS}"
  fi

  dnl Recall Additional Fortran linker flags
  if test "${abi_env_FC_LDFLAGS_EXTRA}" != ""; then
    test "${FC_LDFLAGS_EXTRA}" != "${abi_env_FC_LDFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of FC_LDFLAGS_EXTRA from environment])
    FC_LDFLAGS_EXTRA="${abi_env_FC_LDFLAGS_EXTRA}"
  fi

  dnl Recall Fortran linker additional libraries
  if test "${abi_env_FC_LIBS}" != ""; then
    test "${FC_LIBS}" != "${abi_env_FC_LIBS}" && \
      AC_MSG_NOTICE([overriding configuration of FC_LIBS from environment])
    FC_LIBS="${abi_env_FC_LIBS}"
  fi

  dnl Recall Fortran preprocessor
  if test "${abi_env_FPP}" != ""; then
    test "${FPP}" != "${abi_env_FPP}" && \
      AC_MSG_NOTICE([overriding configuration of FPP from environment])
    FPP="${abi_env_FPP}"
  fi

  dnl Recall Fortran preprocessor flags
  if test "${abi_env_FPPFLAGS}" != ""; then
    test "${FPPFLAGS}" != "${abi_env_FPPFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of FPPFLAGS from environment])
    FPPFLAGS="${abi_env_FPPFLAGS}"
  fi

  dnl Recall Additional Fortran preprocessor flags
  if test "${abi_env_FPPFLAGS_EXTRA}" != ""; then
    test "${FPPFLAGS_EXTRA}" != "${abi_env_FPPFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of FPPFLAGS_EXTRA from environment])
    FPPFLAGS_EXTRA="${abi_env_FPPFLAGS_EXTRA}"
  fi

  dnl Recall Linker
  if test "${abi_env_LD}" != ""; then
    test "${LD}" != "${abi_env_LD}" && \
      AC_MSG_NOTICE([overriding configuration of LD from environment])
    LD="${abi_env_LD}"
  fi

  dnl Recall Archive indexer
  if test "${abi_env_RANLIB}" != ""; then
    test "${RANLIB}" != "${abi_env_RANLIB}" && \
      AC_MSG_NOTICE([overriding configuration of RANLIB from environment])
    RANLIB="${abi_env_RANLIB}"
  fi

  dnl Recall C++ preprocessor
  if test "${abi_env_XPP}" != ""; then
    test "${XPP}" != "${abi_env_XPP}" && \
      AC_MSG_NOTICE([overriding configuration of XPP from environment])
    XPP="${abi_env_XPP}"
  fi

  dnl Recall C++ preprocessor flags
  if test "${abi_env_XPPFLAGS}" != ""; then
    test "${XPPFLAGS}" != "${abi_env_XPPFLAGS}" && \
      AC_MSG_NOTICE([overriding configuration of XPPFLAGS from environment])
    XPPFLAGS="${abi_env_XPPFLAGS}"
  fi

  dnl Recall Additional C++ preprocessor flags
  if test "${abi_env_XPPFLAGS_EXTRA}" != ""; then
    test "${XPPFLAGS_EXTRA}" != "${abi_env_XPPFLAGS_EXTRA}" && \
      AC_MSG_NOTICE([overriding configuration of XPPFLAGS_EXTRA from environment])
    XPPFLAGS_EXTRA="${abi_env_XPPFLAGS_EXTRA}"
  fi

]) # AFB_ENV_RECALL



# AFB_ENV_RESTORE()
# -----------------
#
# Restores all previously-saved ABINIT environment variables.
#
AC_DEFUN([AFB_ENV_RESTORE],[

  dnl Restore Library archiver
  AR="${abi_env_AR}"

  dnl Restore Library archiver flags
  ARFLAGS="${abi_env_ARFLAGS}"

  dnl Restore Library archiver commands
  ARFLAGS_CMD="${abi_env_ARFLAGS_CMD}"

  dnl Restore Additional library archiver flags
  ARFLAGS_EXTRA="${abi_env_ARFLAGS_EXTRA}"

  dnl Restore C compiler
  CC="${abi_env_CC}"

  dnl Restore C linker flags
  CC_LDFLAGS="${abi_env_CC_LDFLAGS}"

  dnl Restore Additional C linker flags
  CC_LDFLAGS_EXTRA="${abi_env_CC_LDFLAGS_EXTRA}"

  dnl Restore C linker libraries
  CC_LIBS="${abi_env_CC_LIBS}"

  dnl Restore C compiler for NetCDF4
  CC_NETCDF4="${abi_env_CC_NETCDF4}"

  dnl Restore Configure flags
  CFGFLAGS="${abi_env_CFGFLAGS}"

  dnl Restore Additional configure flags
  CFGFLAGS_EXTRA="${abi_env_CFGFLAGS_EXTRA}"

  dnl Restore Configure script
  CFGSCRIPT="${abi_env_CFGSCRIPT}"

  dnl Restore C compiler flags
  CFLAGS="${abi_env_CFLAGS}"

  dnl Restore Additional C compiler flags
  CFLAGS_EXTRA="${abi_env_CFLAGS_EXTRA}"

  dnl Restore C preprocessor
  CPP="${abi_env_CPP}"

  dnl Restore C preprocessor flags
  CPPFLAGS="${abi_env_CPPFLAGS}"

  dnl Restore Additional C preprocessor flags
  CPPFLAGS_EXTRA="${abi_env_CPPFLAGS_EXTRA}"

  dnl Restore C++ compiler
  CXX="${abi_env_CXX}"

  dnl Restore C++ compiler flags
  CXXFLAGS="${abi_env_CXXFLAGS}"

  dnl Restore Additional C++ compiler flags
  CXXFLAGS_EXTRA="${abi_env_CXXFLAGS_EXTRA}"

  dnl Restore C++ linker flags
  CXX_LDFLAGS="${abi_env_CXX_LDFLAGS}"

  dnl Restore Additional C++ linker flags
  CXX_LDFLAGS_EXTRA="${abi_env_CXX_LDFLAGS_EXTRA}"

  dnl Restore C++ linker additional libraries
  CXX_LIBS="${abi_env_CXX_LIBS}"

  dnl Restore C preprocessor definitions
  DEFS="${abi_env_DEFS}"

  dnl Restore Fortran compiler
  FC="${abi_env_FC}"

  dnl Restore Fortran compiler flags
  FCFLAGS="${abi_env_FCFLAGS}"

  dnl Restore Additional Fortran compiler flags
  FCFLAGS_EXTRA="${abi_env_FCFLAGS_EXTRA}"

  dnl Restore Fortran flags for fixed-form source files
  FCFLAGS_FIXEDFORM="${abi_env_FCFLAGS_FIXEDFORM}"

  dnl Restore Fortran flags for free-form source files
  FCFLAGS_FREEFORM="${abi_env_FCFLAGS_FREEFORM}"

  dnl Restore Fortran compiler flags to use a module directory
  FCFLAGS_MODDIR="${abi_env_FCFLAGS_MODDIR}"

  dnl Restore Fortran linker flags
  FC_LDFLAGS="${abi_env_FC_LDFLAGS}"

  dnl Restore Additional Fortran linker flags
  FC_LDFLAGS_EXTRA="${abi_env_FC_LDFLAGS_EXTRA}"

  dnl Restore Fortran linker additional libraries
  FC_LIBS="${abi_env_FC_LIBS}"

  dnl Restore Fortran preprocessor
  FPP="${abi_env_FPP}"

  dnl Restore Fortran preprocessor flags
  FPPFLAGS="${abi_env_FPPFLAGS}"

  dnl Restore Additional Fortran preprocessor flags
  FPPFLAGS_EXTRA="${abi_env_FPPFLAGS_EXTRA}"

  dnl Restore Linker
  LD="${abi_env_LD}"

  dnl Restore Archive indexer
  RANLIB="${abi_env_RANLIB}"

  dnl Restore C++ preprocessor
  XPP="${abi_env_XPP}"

  dnl Restore C++ preprocessor flags
  XPPFLAGS="${abi_env_XPPFLAGS}"

  dnl Restore Additional C++ preprocessor flags
  XPPFLAGS_EXTRA="${abi_env_XPPFLAGS_EXTRA}"

]) # AFB_ENV_RESTORE
