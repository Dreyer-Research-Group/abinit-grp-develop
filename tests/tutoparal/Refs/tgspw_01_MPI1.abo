
.Version 9.3.3 of ABINIT 
.(MPI version, prepared for a x86_64_linux_gnu10.2 computer) 

.Copyright (C) 1998-2021 ABINIT group . 
 ABINIT comes with ABSOLUTELY NO WARRANTY.
 It is free software, and you are welcome to redistribute it
 under certain conditions (GNU General Public License,
 see ~abinit/COPYING or http://www.gnu.org/copyleft/gpl.txt).

 ABINIT is a project of the Universite Catholique de Louvain,
 Corning Inc. and other collaborators, see ~abinit/doc/developers/contributors.txt .
 Please read https://docs.abinit.org/theory/acknowledgments for suggested
 acknowledgments of the ABINIT effort.
 For more information, see https://www.abinit.org .

.Starting date : Tue 12 Jan 2021.
- ( at 11h44 )
  
- input  file    -> /home/buildbot/ABINIT/scope_gnu_10.2_paral/biederj_beauty/tests/Test_suite/tutoparal_tgspw_01/tgspw_01.abi
- output file    -> tgspw_01.abo
- root for input  files -> tgspw_01i
- root for output files -> tgspw_01o

- inpspheads : Reading pseudopotential header in XML form from 
-   /home/buildbot/ABINIT/scope_gnu_10.2_paral/biederj_beauty/tests/Psps_for_tests/Pseudodojo_paw_pw_standard/Au.xml

--- !Autoparal
#Autoparal section for GS calculations with paral_kgb
info:
    autoparal: 1
    paral_kgb: 1
    max_ncpus: 64
    nspinor: 1
    nsppol: 1
    nkpt: 1
    mband: 640
configurations:
    - tot_ncpus: 64
      mpi_ncpus: 64
      omp_ncpus: 1
      efficiency:  0.661381768
      vars: {
            npimage: 1,
            npkpt: 1,
            npspinor: 1,
            npfft: 4,
            npband: 16,
            bandpp: 10,
            }
    - tot_ncpus: 64
      mpi_ncpus: 64
      omp_ncpus: 1
      efficiency:  0.653809390
      vars: {
            npimage: 1,
            npkpt: 1,
            npspinor: 1,
            npfft: 8,
            npband: 8,
            bandpp: 20,
            }
    - tot_ncpus: 64
      mpi_ncpus: 64
      omp_ncpus: 1
      efficiency:  0.652034578
      vars: {
            npimage: 1,
            npkpt: 1,
            npspinor: 1,
            npfft: 16,
            npband: 4,
            bandpp: 40,
            }
    - tot_ncpus: 60
      mpi_ncpus: 60
      omp_ncpus: 1
      efficiency:  0.668215873
      vars: {
            npimage: 1,
            npkpt: 1,
            npspinor: 1,
            npfft: 6,
            npband: 10,
            bandpp: 16,
            }
    - tot_ncpus: 60
      mpi_ncpus: 60
      omp_ncpus: 1
      efficiency:  0.650905287
      vars: {
            npimage: 1,
            npkpt: 1,
            npspinor: 1,
            npfft: 15,
            npband: 4,
            bandpp: 40,
            }
...

 ====================================================================================================
 Searching for all possible proc distributions for this input with #CPUs<=64:

 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 |       npkpt|       npfft|      npband|      bandpp|  #MPI(proc)|    WEIGHT|
 |    1<<    1|    1<<   22|    1<<   64|    1<<  640|    1<<   64|  <=    64|
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 |           1|           4|          16|          10|          64|    42.328|
 |           1|           8|           8|          20|          64|    41.844|
 |           1|          16|           4|          40|          64|    41.730|
 |           1|           6|          10|          16|          60|    40.093|
 |           1|          15|           4|          40|          60|    39.054|
 |           1|           4|          16|           8|          64|    39.043|
 |           1|          12|           5|          32|          60|    39.026|
 |           1|           8|           8|          16|          64|    38.598|
 |           1|          16|           4|          32|          64|    38.493|
 |           1|           3|          20|           8|          60|    38.319|
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Only the best possible choices for nproc are printed...

 >>> Possible (best) choices for the number of bands (nband) are:
     with: npfft=4
     nband=   624 using     64 CPUs =    64 MPI x  1 threads (npband=   16)
     nband=   656 using     64 CPUs =    64 MPI x  1 threads (npband=   16)
     nband=   640 using     64 CPUs =    64 MPI x  1 threads (npband=   16)
     nband=   645 using     60 CPUs =    60 MPI x  1 threads (npband=   15)
     nband=   630 using     60 CPUs =    60 MPI x  1 threads (npband=   15)
     nband=   644 using     56 CPUs =    56 MPI x  1 threads (npband=   14)
     nband=   650 using     52 CPUs =    52 MPI x  1 threads (npband=   13)
     nband=   637 using     52 CPUs =    52 MPI x  1 threads (npband=   13)
     nband=   648 using     48 CPUs =    48 MPI x  1 threads (npband=   12)
     nband=   636 using     48 CPUs =    48 MPI x  1 threads (npband=   12)
     nband=   627 using     44 CPUs =    44 MPI x  1 threads (npband=   11)
     nband=   649 using     44 CPUs =    44 MPI x  1 threads (npband=   11)
 >>> The present nband value (   640) seems to be the best choice!

 Launch a parallel version of ABINIT with a distribution of processors among the above list,
 and the associated input variables (npkpt, npband, npfft, bandpp, etc.).
 The higher weight should be better.
 ====================================================================================================


