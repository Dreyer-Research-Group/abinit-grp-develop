!{\src2tex{textfont=tt}}
!!****f* ABINIT/xmpi_isend
!! NAME
!!  xmpi_isend
!!
!! FUNCTION
!!  This module contains functions that calls MPI routine MPI_ISEND,
!!  to send data from one processor to another,
!!  if we compile the code using the MPI CPP flags.
!!  xmpi_isend is the generic function.
!!
!! COPYRIGHT
!!  Copyright (C) 2001-2018 ABINIT group
!!  This file is distributed under the terms of the
!!  GNU General Public License, see ~ABINIT/COPYING
!!  or http://www.gnu.org/copyleft/gpl.txt .
!!
!! TODO
!!
!! SOURCE
!!***

!!****f* ABINIT/xmpi_isend_int1d
!! NAME
!!  xmpi_isend_int1d
!!
!! FUNCTION
!!  Sends data from one processor to another.
!!  Target: integer one-dimensional arrays.
!!
!! INPUTS
!!  dest :: rank of destination process
!!  tag :: integer message tag
!!  spaceComm :: MPI communicator
!!
!! OUTPUT
!!  ierr= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! SOURCE

subroutine xmpi_isend_int1d(xval,dest,tag,spaceComm,request,ierr)


!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_isend_int1d'
!End of the abilint section

 implicit none

!Arguments-------------------------
 integer ABI_ASYNC, intent(inout) :: xval(:)
 integer, intent(in) :: dest,tag,spaceComm
 integer, intent(out)   :: ierr
 integer, intent(out) :: request

!Local variables-------------------
#if defined HAVE_MPI
 integer :: ier,my_tag,n1
#endif

! *************************************************************************

 ierr=0
#if defined HAVE_MPI
 if (spaceComm /= MPI_COMM_SELF .and. spaceComm /= MPI_COMM_NULL) then
   n1=size(xval,dim=1)
   my_tag = MOD(tag,xmpi_tag_ub)
   call MPI_ISEND(xval,n1,MPI_INTEGER,dest,my_tag,spaceComm,request,ier)
   ierr=ier
 end if
#endif

 end subroutine xmpi_isend_int1d
!!***

!!****f* ABINIT/xmpi_isend_dp1d
!! NAME
!!  xmpi_isend_dp1d
!!
!! FUNCTION
!!  Sends data from one proc to another.
!!  Target: double precision two-dimensional arrays.
!!
!! INPUTS
!!  dest :: rank of destination process
!!  tag :: integer message tag
!!  spaceComm :: MPI communicator
!!
!! OUTPUT
!!  ierr= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! SOURCE
subroutine xmpi_isend_dp1d(xval,dest,tag,spaceComm,request,ierr)



!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_isend_dp1d'
!End of the abilint section

 implicit none

!Arguments-------------------------
 real(dp) ABI_ASYNC, intent(inout) :: xval(:)
 integer, intent(in) :: dest,tag,spaceComm
 integer, intent(out)   :: ierr
 integer, intent(out) :: request

!Local variables-------------------
#if defined HAVE_MPI
 integer :: ier,my_tag,n1
#endif

! *************************************************************************

 ierr=0
#if defined HAVE_MPI
 if (spaceComm /= MPI_COMM_SELF .and. spaceComm /= MPI_COMM_NULL) then
   n1=size(xval)
   my_tag = MOD(tag,xmpi_tag_ub)
   call MPI_ISEND(xval,n1,MPI_DOUBLE_PRECISION,dest,my_tag,spaceComm,request,ier)
   ierr=ier
 end if
#endif

end subroutine xmpi_isend_dp1d
!!***

!!****f* ABINIT/xmpi_isend_dp2d
!! NAME
!!  xmpi_isend_dp2d
!!
!! FUNCTION
!!  Sends data from one proc to another.
!!  Target: double precision two-dimensional arrays.
!!
!! INPUTS
!!  dest :: rank of destination process
!!  tag :: integer message tag
!!  spaceComm :: MPI communicator
!!
!! OUTPUT
!!  ierr= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! SOURCE
subroutine xmpi_isend_dp2d(xval,dest,tag,spaceComm,request,ierr)



!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_isend_dp2d'
!End of the abilint section

 implicit none

!Arguments-------------------------
 real(dp) ABI_ASYNC, intent(inout) :: xval(:,:)
 integer, intent(in) :: dest,tag,spaceComm
 integer, intent(out)   :: ierr
 integer, intent(out) :: request

!Local variables-------------------
#if defined HAVE_MPI
 integer :: ier,my_tag,n1,n2
#endif

! *************************************************************************

 ierr=0
#if defined HAVE_MPI
 if (spaceComm /= MPI_COMM_SELF .and. spaceComm /= MPI_COMM_NULL) then
   n1=size(xval,dim=1)
   n2=size(xval,dim=2)
   my_tag = MOD(tag,xmpi_tag_ub)
   call MPI_ISEND(xval,n1*n2,MPI_DOUBLE_PRECISION,dest,my_tag,spaceComm,request,ier)
   ierr=ier
 end if
#endif

end subroutine xmpi_isend_dp2d
!!***
