!{\src2tex{textfont=tt}}
!!****f* ABINIT/xmpi_max_int0d_i4b
!! NAME
!!  xmpi_max_int0d_i4b
!!
!! FUNCTION
!!  This module contains functions that calls MPI routine,
!!  if we compile the code using the MPI  CPP flags.
!!  xmpi_max is the generic function.
!!
!! COPYRIGHT
!!  Copyright (C) 2001-2018 ABINIT group (AR,XG,MB)
!!  This file is distributed under the terms of the
!!  GNU General Public License, see ~ABINIT/COPYING
!!  or http://www.gnu.org/copyleft/gpl.txt .
!!
!! CHILDREN
!!      mpi_allreduce
!!
!! SOURCE

subroutine xmpi_max_int0d_i4b(xval,xmax,comm,ier)


!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_max_int0d_i4b'
!End of the abilint section

 implicit none

!Arguments-------------------------
 integer ,intent(in) :: xval
 integer, intent(out) :: xmax
 integer ,intent(in) :: comm
 integer ,intent(out) :: ier

!Local variables-------------------
 integer :: arr_xval(1),arr_xmax(1)

! *************************************************************************
 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   arr_xval(1) = xval
   call MPI_ALLREDUCE(arr_xval,arr_xmax,1,MPI_INTEGER,MPI_MAX,comm,ier)
   xmax = arr_xmax(1)
 else
#endif
   xmax=xval
#if defined HAVE_MPI
 end if
#endif

end subroutine xmpi_max_int0d_i4b
!!***


!!****f* ABINIT/xmpi_max_int0d_i8b
!! NAME
!!  xmpi_max_int0d_i8b
!!
!! FUNCTION
!!
!! CHILDREN
!!      mpi_allreduce
!!
!! SOURCE

subroutine xmpi_max_int0d_i8b(xval,xmax,comm,ier)


!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_max_int0d_i8b'
!End of the abilint section

 implicit none

!Arguments-------------------------
 integer(i8b) ,intent(in) :: xval
 integer(i8b), intent(out) :: xmax
 integer ,intent(in) :: comm
 integer ,intent(out) :: ier

!Local variables-------------------
 integer(i8b) :: arr_xval(1),arr_xmax(1)

! *************************************************************************
 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   arr_xval(1) = xval
   call MPI_ALLREDUCE(arr_xval,arr_xmax,1,MPI_INTEGER8,MPI_MAX,comm,ier)
   xmax = arr_xmax(1)
 else
#endif
   xmax=xval
#if defined HAVE_MPI
 end if
#endif

end subroutine xmpi_max_int0d_i8b
!!***

!!****f* ABINIT/xmpi_max_int
!! NAME
!!  xmpi_max_int
!!
!! SOURCE

subroutine xmpi_max_int(xval,xmax,comm,ier)


!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_max_int'
!End of the abilint section

 implicit none

!Arguments-------------------------
 integer, DEV_CONTARRD intent(in) :: xval(:)
 integer, DEV_CONTARRD intent(out):: xmax(:)
 integer ,intent(in) :: comm
 integer ,intent(out) :: ier

!Local variables-------------------
 integer :: s1

! *************************************************************************
 ier=0
 s1 =SIZE(xval)
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_ALLREDUCE(xval,xmax,s1,MPI_INTEGER,MPI_MAX,comm,ier)
 else
#endif
   xmax=xval
#if defined HAVE_MPI
 end if
#endif

end subroutine xmpi_max_int
!!***


!!****f* ABINIT/xmpi_max_dpv
!! NAME
!!  xmpi_max_dpv
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: scalar double precisions.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!  xmax= number of elements in send buffer
!!
!! SOURCE

subroutine xmpi_max_dpv(xval,xmax,comm,ier)

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_max_dpv'
!End of the abilint section

 implicit none

!Arguments-------------------------
 real(dp),intent(in) :: xval
 real(dp),intent(out) :: xmax
 integer ,intent(in) :: comm
 integer ,intent(out)   :: ier

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_ALLREDUCE(xval,xmax,1,MPI_DOUBLE_PRECISION,MPI_MAX,comm,ier)
 else
#endif
   xmax=xval
#if defined HAVE_MPI
 end if
#endif

end subroutine xmpi_max_dpv
!!***

!!****f* ABINIT/xmpi_max_dp0d_ip
!! NAME
!!  xmpi_max_dp0d_ip
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: scalar double precisions. In place operation
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= 
!!    in input: the value on the local processor 
!!    in output: the maximum inside the given communicator.
!!
!! SOURCE

subroutine xmpi_max_dp0d_ip(ioval,comm,ier)

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_max_dpv'
!End of the abilint section

 implicit none

!Arguments-------------------------
 real(dp),intent(inout) :: ioval
 integer ,intent(in) :: comm
 integer ,intent(out)   :: ier

!Local variables-------------------
 real(dp) :: xmax

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_ALLREDUCE(ioval,xmax,1,MPI_DOUBLE_PRECISION,MPI_MAX,comm,ier)
   ioval = xmax
 end if
#endif

end subroutine xmpi_max_dp0d_ip
!!***
