
.Version 8.11.7 of MULTIBINIT 
.(MPI version, prepared for a x86_64_linux_gnu7.4 computer) 

.Copyright (C) 1998-2019 ABINIT group . 
 MULTIBINIT comes with ABSOLUTELY NO WARRANTY.
 It is free software, and you are welcome to redistribute it
 under certain conditions (GNU General Public License,
 see ~abinit/COPYING or http://www.gnu.org/copyleft/gpl.txt).

 ABINIT is a project of the Universite Catholique de Louvain,
 Corning Inc. and other collaborators, see ~abinit/doc/developers/contributors.txt .
 Please read https://docs.abinit.org/theory/acknowledgments for suggested
 acknowledgments of the ABINIT effort.
 For more information, see https://www.abinit.org .

.Starting date : Tue  4 Jun 2019.
- ( at 12h02 )
  
-  nproc =    4

================================================================================

 Read the information in the reference structure in 
-test_model2.xml
 to initialize the multibinit input

================================================================================

 -outvars_multibinit: echo values of input variables ----------------------

 Flags : 
     ifcflag         1
     strcpli        -1
 Bound the coefficients :
 bound_anhaStrain  0
 bound_SPCoupling  1
     bound_cutoff  0.00000000E+00
       bound_cell   6  6  6
   bound_maxCoeff   4
       bound_temp  3.25000000E+02
       bound_step   1000
 bound_rangePower  4 10
 Miscellaneous information :
         asr         2
 Interatomic Force Constants Inputs :
      dipdip         1
dipdip_range         2         2         2
      ifcana         0
      ifcout   2000000
      natifc         5
       atifc         1   2   3   4   5
 Description of grid 1 :
        brav         1
       ngqpt         2         2         2
      nqshft         1
      q1shft
                     0.00000000E+00  0.00000000E+00  0.00000000E+00
 First list of wavevector (reduced coord.) :
       nph1l         1
       qph1l
                     0.00000000E+00  0.00000000E+00  0.00000000E+00    0.000E+00

================================================================================

-Opening the file test_model2.xml
-Reading the file test_model2.xml with LibXML library

 Bound for ifc SR:

 x=[ -1  1], y=[ -1  1] and z=[ -1  1]

================================================================================
 Generation of new ifc

 dipdip is set to one, the dipole-dipole interation is recompute.

 Bound for ifc (LR):

 x=[  0  1], y=[  0  1] and z=[  0  1]

 Computation of new dipole-dipole interaction.

 Impose acoustic sum rule on total ifc

================================================================================

 Read the coefficients of the polynomial fit from XML and perform some checks

-Opening the file test_model2.xml
-Reading the file test_model2.xml with LibXML library

================================================================================

 There is no file for the coefficients from polynomial fitting

================================================================================

-Reading the training-set file :
-test.nc


================================================================================

Bound Process 3: Generate equivalent high order terms


================================================================================

-Start Bound optimization of Anharmonic Potential 


 Mean Standard Deviation values of the effective-potential
 with respect to the training-set before attempted bounding (meV/atm):
   Energy          :   1.0107569247449144E+00
 Goal function values of the effective.potential
 with respect to the test-set (eV^2/A^2):
   Forces+Stresses :   1.3115575625609522E-02
   Forces          :   2.6521374308483012E-03
   Stresses        :   1.0463438194761220E-02


________________________________________________________________________________


 Check term (  1/  2): (Ti_y-O1_y)^2(Ti_y-O1_y[1 1 0])^1(eta_1)^1


- Term has strain compenent
 -> Filter Displacement


 ==> high order term: (Ti_y-O1_y)^2(Ti_y-O1_y[1 1 0])^2 created


   ==> Optimizing coefficient


 ==> high order term: (Ti_y-O1_y)^4(Ti_y-O1_y[1 1 0])^2 created


   ==> Optimizing coefficient


 ==> high order term: (Ti_y-O1_y)^2(Ti_y-O1_y[1 1 0])^4 created


   ==> Optimizing coefficient


 ==> high order term: (Ti_y-O1_y)^6(Ti_y-O1_y[1 1 0])^2 created


   ==> Optimizing coefficient


 ==> high order term: (Ti_y-O1_y)^2(Ti_y-O1_y[1 1 0])^6 created


   ==> Optimizing coefficient


 ==> high order term: (Ti_y-O1_y)^4(Ti_y-O1_y[1 1 0])^4 created


   ==> Optimizing coefficient


 ==> high order term: (Ti_y-O1_y)^6(Ti_y-O1_y[1 1 0])^4 created


   ==> Optimizing coefficient


 ==> high order term: (Ti_y-O1_y)^4(Ti_y-O1_y[1 1 0])^6 created


   ==> Optimizing coefficient


 ==> high order term: (Ti_y-O1_y)^8(Ti_y-O1_y[1 1 0])^2 created


   ==> Optimizing coefficient


 ==> high order term: (Ti_y-O1_y)^2(Ti_y-O1_y[1 1 0])^8 created


   ==> Optimizing coefficient


________________________________________________________________________________


 Check term (  2/  2): (Ti_y-O1_y[1 1 0])^2(eta_2)^1


- Term has strain compenent
 -> Filter Displacement


 ==> high order term: (Ti_y-O1_y[1 1 0])^4 created


   ==> Optimizing coefficient


 ==> high order term: (Ti_y-O1_y[1 1 0])^6 created


   ==> Optimizing coefficient


 ==> high order term: (Ti_y-O1_y[1 1 0])^8 created


   ==> Optimizing coefficient


 ==> high order term: (Ti_y-O1_y[1 1 0])^10 created


   ==> Optimizing coefficient


________________________________________________________________________________


 Finished creating high-order terms


================================================================================

-
- Proc.   0 individual time (sec): cpu=          9.5  wall=         11.1

================================================================================

+Total cpu time     37.341  and wall time     44.273 sec

 multibinit : the run completed succesfully.
