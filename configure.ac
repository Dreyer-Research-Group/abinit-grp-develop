# -*- Autoconf -*-
#
# Copyright (C) 2005-2017 ABINIT Group (Yann Pouillon)
#
# This file is part of the ABINIT software package. For license information,
# please see the COPYING file in the top-level directory of the ABINIT source
# distribution.
#

# ---------------------------------------------------------------------------- #

#
# IMPORTANT NOTE
#
# Please DO NOT EDIT this file unless you REALLY know what you are doing.
# Everything is important, in particular the order of the various commands
# executed here. YOU HAVE BEEN WARNED !
#

# ---------------------------------------------------------------------------- #

#
# Autoconf & Automake startup
#

# Initialize Autoconf
AC_PREREQ(2.59)
AC_INIT([ABINIT],[8.7.1],[https://bugs.launchpad.net/abinit/],[abinit])
AC_REVISION([Autotools support for ABINIT 7])
AC_CONFIG_AUX_DIR([config/gnu])
AC_CONFIG_MACRO_DIR([config/m4])
AC_CONFIG_SRCDIR([src/98_main/abinit.F90])

# ---------------------------------------------------------------------------- #

#
# Startup
#

ABI_MSG_SECTION([Overall startup])

# Initial setup
AC_CANONICAL_TARGET
# Disable pax
alias pax='/bin/false'
AM_INIT_AUTOMAKE([1.10 tar-ustar])
unalias pax
AC_CONFIG_HEADERS([config.h])

# Early Abinit setup - the order is important!
ABI_INIT_DIRS
ABI_INIT_VERSION
ABI_INIT_CPU_INFO
ABI_INIT_OS_INFO
ABI_INIT_HEADER
ABI_INIT_ARCH

# Check for common programs
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_SED
AC_PROG_AWK
AC_PROG_GREP

# Workaround for the "grep -e" issue on Solaris systems
AC_PROG_EGREP

# Workaround for the wrong path to install-sh on Mac systems
ABI_PROG_MKDIR_P

# Look for a command that provide absolute paths
AC_CHECK_PROGS(REALPATH,[realpath,readlink],[true])
test "${REALPATH}" = "readlink" && REALPATH="${REALPATH} -f"

# Define command-line arguments
ABI_OPTIONS_DEFINE

# Read config file and ensure that priorities are respected
ABI_ENV_BACKUP
ABI_OPTIONS_BACKUP
test "${enable_config_file}" = "" && enable_config_file="yes"
ABI_LOAD_OPTIONS
ABI_OPTIONS_RECALL
ABI_ENV_RECALL

# Set still undefined options
ABI_OPTIONS_SETUP

# Initialize environment, taking options into account
ABI_ENV_INIT

AC_SUBST(CC_LDFLAGS)
AC_SUBST(CC_LIBS)
AC_SUBST(CXX_LDFLAGS)
AC_SUBST(CXX_LIBS)
AC_SUBST(FC_LDFLAGS)
AC_SUBST(FC_LIBS)

# Initialize install dirs (requires version and config options to be set)
ABI_INIT_INSTALL_DIRS

# Translate optimization level
abi_optflags_mode="${enable_optim}"

# Disable wrapping of Fortran compiler by default
abi_fc_wrap="no"

# Save user-defined CPP
abi_cpp_user="${CPP}"

# Set-up required information for core libraries
ABI_CORELIBS_INIT

# ---------------------------------------------------------------------------- #

#
# Build-system information
#

ABI_MSG_SECTION([Build-system information])

# Display ABINIT version
AC_MSG_NOTICE([ABINIT version ${ABINIT_VERSION}])

# Display Autotools version information
ABI_INFO_AUTOTOOLS

# Display UI changes
ABI_OPTIONS_CHANGED

# ---------------------------------------------------------------------------- #

#
# Check option consistency
#

# NOTE: please hack this section with EXTREME CARE

ABI_MSG_SECTION([Option consistency checking])

# --------- #
# Libraries #
# --------- #

abi_optchk_ok="yes"

AC_MSG_NOTICE([checking consistency of library-related options])

# Closing remarks
if test "${abi_optchk_ok}" = "yes"; then
  AC_MSG_NOTICE([ |---> all OK])
fi
AC_MSG_NOTICE([])

# -------------------- #
# Experimental options #
# -------------------- #

abi_optchk_ok="yes"

AC_MSG_NOTICE([checking consistency of experimental options])

# Bindings require exports
if test "${enable_bindings}" = "yes"; then
  if test "${enable_exports}" != "yes"; then
    enable_exports="yes"
    AC_MSG_NOTICE([|---> enabling exports (required for bindings])
    abi_optchk_ok="no"
  fi
fi

# Closing remarks
if test "${abi_optchk_ok}" = "yes"; then
  AC_MSG_NOTICE([ |---> all OK])
fi
AC_MSG_NOTICE([])

# ------------------ #
# Maintainer options #
# ------------------ #

abi_optchk_ok="yes"

AC_MSG_NOTICE([checking consistency of maintainer options])

# Fast check conflicts with package check
if test "${enable_fast_check}" = "yes"; then
  if test "${enable_pkg_check}" = "yes"; then
    AC_MSG_ERROR([--enable-fast-check conflicts with --enable-pkg-check])
    abi_optchk_ok="no"
  fi
fi

# Closing remarks
if test "${abi_optchk_ok}" = "yes"; then
  AC_MSG_NOTICE([ |---> all OK])
fi
AC_MSG_NOTICE([])

# ------------------- #
# Final step: parsing #
# ------------------- #

ABI_OPTIONS_PARSE

# ---------------------------------------------------------------------------- #

#
# Multicore architecture startup
#

ABI_MSG_SECTION([Multicore architecture startup])

# Prepare MPI support
ABI_MPI_INIT

# GPU support requires MPI
if test "${enable_gpu}" = "yes" -a "${enable_mpi}" != "yes"; then
  AC_MSG_ERROR([GPU support requires MPI])
fi

# Prepare GPU support
ABI_GPU_INIT

# ScaLAPACK support requires MPI
if test "${enable_scalapack}" = "yes" -a "${enable_mpi}" != "yes"; then
  AC_MSG_ERROR([ScaLAPACK support requires MPI])
fi

# ---------------------------------------------------------------------------- #

#
# Miscellaneous utilities
#

ABI_MSG_SECTION([Utilities])

# Check for various programs
AC_PATH_PROG(BOURNE_SHELL,sh,/bin/sh)
AC_PATH_PROG(MV,mv,/bin/false)
AC_PATH_PROG(PERL,perl,/bin/false)
AC_PATH_PROG(RM,rm,/bin/false)

AC_CHECK_PROGS(PATCH,[patch])
AC_CHECK_PROGS(TAR,[tar])

# ---------------------------------------------------------------------------- #

#
# C support
#

ABI_MSG_SECTION([C support])

# Preserve environment
ABI_ENV_BACKUP

# Look for the C compiler
if test "${CC}" != "" -a ! -x "${CC}"; then
  abi_cc_probe=`echo "${CC}" | sed -e 's/ .*//'`
  if test ! -x "${abi_cc_probe}"; then
    AC_PATH_PROG([abi_cc_path],[${abi_cc_probe}])
    if test "${abi_cc_path}" = ""; then
      AC_MSG_ERROR([could not run C compiler "${CC}"])
    fi
  fi
fi
AC_PROG_CC

# Fail if no C compiler is available
if test "${CC}" = ""; then
  AC_MSG_ERROR([no C compiler available])
fi

# Look for the C preprocessor
if test "${CPP}" != "" -a ! -x "${CPP}"; then
  AC_PATH_PROG([abi_cpp_path],[${CPP}])
  if test "${abi_cpp_path}" = ""; then
    AC_MSG_ERROR([could not run C preprocessor "${CPP}"])
  fi
fi
AC_PROG_CPP

# Fail if no C preprocessor is available
if test "${CPP}" = ""; then
  AC_MSG_ERROR([no C preprocessor available])
fi

# Set Abinit C parameters
ABI_PROG_CC

# Restore back CPPFLAGS and CFLAGS
CPPFLAGS="${abi_env_CPPFLAGS}"
CFLAGS="${abi_env_CFLAGS}"

# Check for system peculiarities
AC_C_BIGENDIAN
AC_HEADER_ASSERT

# Look for malloc.h
CPPFLAGS_MALLOC=""
AC_CHECK_HEADERS([malloc.h], [abi_hdr_malloc="yes"], [abi_hdr_malloc="no"])
if test "${abi_hdr_malloc}" = "no"; then
  AC_CHECK_HEADERS([malloc/malloc.h],
    [abi_hdr_malloc="yes"], [abi_hdr_malloc="no"])
fi

# ---------------------------------------------------------------------------- #

#
# C++ support
#

ABI_MSG_SECTION([C++ support])

# Preserve environment
ABI_ENV_BACKUP

# Look for the C++ compiler
if test "${CXX}" != "" -a ! -x "${CXX}"; then
  abi_cxx_probe=`echo "${CXX}" | sed -e 's/ .*//'`
  if test ! -x "${abi_cxx_probe}"; then
    AC_PATH_PROG([abi_cxx_path],[${abi_cxx_probe}])
    if test "${abi_cxx_path}" = ""; then
      AC_MSG_ERROR([could not run C++ compiler "${CXX}"])
    fi
  fi
fi
AC_PROG_CXX

# Warn if no C++ compiler is available
if test "${CXX}" = ""; then
  AC_MSG_WARN([no C++ compiler available])
fi

# Set Abinit C++ parameters
if test "${CXX}" != ""; then
  ABI_PROG_CXX
fi

# Restore back CXXFLAGS
CXXFLAGS="${abi_env_CXXFLAGS}"

# ---------------------------------------------------------------------------- #

#
# Fortran support
#

ABI_MSG_SECTION([Fortran support])

# Preserve environment
ABI_ENV_BACKUP

# Look for the Fortran compiler
if test "${FC}" != "" -a ! -x "${FC}"; then
  abi_fc_probe=`echo "${FC}" | sed -e 's/ .*//'`
  if test ! -x "${abi_fc_probe}"; then
    AC_PATH_PROG([abi_fc_path],[${abi_fc_probe}])
    if test "${abi_fc_path}" = ""; then
      AC_MSG_ERROR([could not run Fortran compiler "${FC}"])
    fi
  fi
fi
AC_PROG_FC

# Fail if no Fortran compiler is available
if test "${FC}" = ""; then
  AC_MSG_ERROR([no Fortran compiler available])
fi

# Look for the Fortran preprocessor
if test "${FPP}" != "" -a ! -x "${FPP}"; then
  AC_PATH_PROG([abi_fpp_path],[${FPP}])
  if test "${abi_fpp_path}" = ""; then
    AC_MSG_ERROR([could not run Fortran preprocessor "${FPP}"])
  fi
fi
#AC_PROG_FPP

# Set Abinit Fortran parameters
ABI_PROG_FC

# Set default file extensions
ABI_FC_EXTENSIONS

# Get module file case
ABI_FC_MOD_CASE

# Restore back FCFLAGS
FCFLAGS="${abi_env_FCFLAGS}"

# Wrap Fortran compiler calls if needed or requested
if test "${enable_fc_wrapper}" = "yes"; then
  abi_fc_wrap="yes"
fi

# Determine Fortran-C name mangling scheme
AC_FC_WRAPPERS

# The IBM Fortran compiler crashes if the mpi module is included
# more than once
if test "${abi_fc_vendor}" = "ibm" -a "${enable_mpi}" = "yes"; then
  AC_MSG_NOTICE([activating MPI workaround for the IBM Fortran compiler])
  AC_DEFINE([HAVE_MPI_INCLUDED_ONCE],1,[Define to 1 if you are using XLF.])
fi

# ---------------------------------------------------------------------------- #

#
# Python support
#

ABI_MSG_SECTION([Python support])

# Look for programs
AC_CHECK_PROGS(PYTHON,[python python2.6 python2.5 python2.4])

# Get Python preprocessing options
AC_MSG_CHECKING([for Python CPPFLAGS])
if test "${PYTHON}" != "" -a "${PYTHON_CPPFLAGS}" = ""; then
  PYTHON_CPPFLAGS=`${PYTHON} -c "\
try:
    import distutils.sysconfig
    print '-I' + distutils.sysconfig.get_python_inc(),
except:
    pass
try:
    import numpy
    print '-I' + numpy.get_include(),
except:
    pass"`
fi
AC_MSG_RESULT([${PYTHON_CPPFLAGS}])

# Check whether Bazaar is installed
if test "${PYTHON}" != ""; then
  AC_CHECK_PROGS(BAZAAR,[bzr])
fi

ABI_CHECK_PYTHON

# Set Bazaar variables
bzr_branch=""
bzr_revno=""
bzr_clean=""
if test "${BAZAAR}" != "" -a -d "${abinit_srcdir}/.bzr"; then
    AC_MSG_NOTICE([retrieving Bazaar branch information])
    eval `bzr version-info \
      --check-clean \
      --custom \
      --template='bzr_branch="{revision_id}"\nbzr_revno="{revno}"\nbzr_clean="{clean}"\n' \
      ${abinit_srcdir}`
    AC_DEFINE([HAVE_BZR_BRANCH],1,[Define to 1 if you are working in a Bazaar branch.])
fi

# Substitute Python-related variables
AC_SUBST(bzr_branch)
AC_SUBST(bzr_revno)
AC_SUBST(bzr_clean)

# ---------------------------------------------------------------------------- #

#
# Libraries and linking
#

ABI_MSG_SECTION([Libraries and linking])

# Preserve environment
ABI_ENV_BACKUP

# Disable shared objects (may change in a distant future)
# Note: Libtool-provided macro
#AC_DISABLE_SHARED

# Look for archiver
if test "${AR}" = ""; then
  AC_CHECK_PROGS(AR,[ar xiar])
fi

# Set archiver command flag
test "${ARFLAGS_CMD}" = "" && ARFLAGS_CMD="rc"
AC_SUBST(ARFLAGS_CMD)

# Look for ranlib
AC_PROG_RANLIB

# Look for linker (not used for now)
#AC_PROG_LD

# Restore back compile flags
CFLAGS="${abi_env_CFLAGS}"
CXXFLAGS="${abi_env_CXXFLAGS}"
FCFLAGS="${abi_env_FCFLAGS}"

# We want to be able access the archiver from anywhere
AC_SUBST(AR)
AC_SUBST(ARFLAGS)

# Report the use of libtool-related options
AC_SUBST(enable_shared)
AC_SUBST(enable_static)
AC_SUBST(with_gnu_ld)

# ---------------------------------------------------------------------------- #

#
# Hints
#

ABI_MSG_SECTION([Hints])

# Look for a true C preprocessor
if test "${TRUE_CPP}" = ""; then
  AC_CHECK_PROGS([TRUE_CPP],[cpp])
fi
if test "${TRUE_CPP}" = ""; then
  AC_PATH_PROG([TRUE_CPP],[cpp])
fi
if test "${TRUE_CPP}" = ""; then
  if test -x "/lib/cpp"; then
    TRUE_CPP="/lib/cpp"
  fi
fi
AC_MSG_CHECKING([for a true C preprocessor])
if test "${TRUE_CPP}" = ""; then
  AC_MSG_RESULT([none])
else
  AC_MSG_RESULT([${TRUE_CPP}])
fi

# Set Fortran preprocessor when needed
if test "${abi_fc_wrap}" = "yes"; then
  if test "${FPP}" = ""; then
    if test "${abi_cpp_user}" != ""; then
      FPP="${abi_cpp_user}"
    else
      if test "${TRUE_CPP}" != ""; then
        FPP="${TRUE_CPP}"
      else
        FPP="${CPP}"
      fi
    fi
  fi
fi

# FIXME: set CPP vendor
case "${target_os}" in
  aix*)
    abi_cpp_vendor="ibm"
    abi_xpp_vendor="ibm"
    abi_fpp_vendor="ibm"
    ;;
  *)
    abi_cpp_vendor="default"
    abi_xpp_vendor="default"
    abi_fpp_vendor="default"
    ;;
esac
case "${abi_fc_vendor}" in
  ibm)
    abi_fpp_vendor="ibm"
    ;;
esac

# Preset flags to have the source building properly
if test "${enable_hints}" = "yes"; then

  # C support
  ABI_CPP_HINTS
  ABI_CC_HINTS

  # C++ support
  ABI_XPP_HINTS
  ABI_CXX_HINTS

  # Fortran support
  ABI_FPP_HINTS
  ABI_FC_HINTS

  # Library archiver support
  ABI_AR_HINTS

fi

# Adjust OpenMP flags
if test "${enable_openmp}" != "yes"; then
  FCFLAGS_OPENMP=""
fi

# Set Fortran preprocessing flags
if test "${abi_fc_wrap}" = "yes"; then
  test "${FPPFLAGS}" = "" && FPPFLAGS="${FPPFLAGS_HINTS_EXT}"
fi

# Display Fortran preprocessing parameters
AC_MSG_CHECKING([which Fortran preprocessor to use])
AC_MSG_RESULT([${FPP}])
AC_MSG_CHECKING([which Fortran preprocessor flags to apply])
AC_MSG_RESULT([${FPPFLAGS}])

# Set flags for bindings
# FIXME: this is not generic enough (should use Libtool)
if test "${enable_exports}" = "yes"; then
  AC_MSG_NOTICE([setting PIC flags for C compiler])
  CFLAGS_HINTS="${CFLAGS_HINTS} ${CFLAGS_PIC}"
  AC_MSG_NOTICE([setting PIC flags for C++ compiler])
  CXXFLAGS_HINTS="${CXXFLAGS_HINTS} ${CXXFLAGS_PIC}"
  AC_MSG_NOTICE([setting PIC flags for Fortran compiler])
  FCFLAGS_HINTS="${FCFLAGS_HINTS} ${FCFLAGS_PIC}"
fi

# Display Fortran compiler wrapper status
AC_MSG_CHECKING([whether to wrap Fortran compiler calls])
AC_MSG_RESULT([${abi_fc_wrap}])

# Export true CPPFLAGS (required by LibXC)
AC_SUBST(CPPFLAGS_HINTS_EXT)

# ---------------------------------------------------------------------------- #

#
# Debugging
#
# NOTE:
#
#   * Please do not try to set-up the *FLAGS_DEBUG variables manually,
#     as they will systematically be overwritten. These flags should be
#     modified by the --with-*-dbgflags options only, and --enable-debug
#     set to "yes" in this case.
#

ABI_MSG_SECTION([Debugging])

# Init debug flags
ABI_DEBUG_INIT([${enable_debug}],[${enable_optim}])

# Get debug flags from database when in profile mode
if test "${enable_debug}" != "no" -a "${enable_debug}" != "yes"; then
  if test "${CFLAGS}" = ""; then
    ABI_CC_DBGFLAGS
  else
    AC_MSG_NOTICE([debugging profile overriden by user-defined CFLAGS])
  fi
  if test "${CXXFLAGS}" = ""; then
    ABI_CXX_DBGFLAGS
  else
    AC_MSG_NOTICE([debugging profile overriden by user-defined CXXFLAGS])
  fi
  if test "${FCFLAGS}" = ""; then
    ABI_FC_DBGFLAGS
  else
    AC_MSG_NOTICE([debugging profile overriden by user-defined FCFLAGS])
  fi
fi

# Disable optimizations if debug mode is activated in source files
if test "${src_debug_mode}" = "yes"; then
  if test "${enable_optim}" != "no"; then
    AC_MSG_WARN([disabling optimizations])
  fi
  enable_optim="no"
fi

# Activate "design-by-contract" debugging tests when paranoid
AC_MSG_CHECKING([whether to activate design-by-contract debugging])
if test "${enable_debug}" = "paranoid"; then
  AC_DEFINE([DEBUG_CONTRACT],1,[Define to 1 if you want to activate design-by-contract debugging tests.])
  AC_MSG_RESULT([yes])
else
  AC_MSG_RESULT([no])
fi
AM_CONDITIONAL(DO_BUILD_32_CONTRACT,[test "${enable_debug}" = "paranoid"])

# ---------------------------------------------------------------------------- #

#
# Optimizations
#
# NOTE: The optimizations will be taken from *FLAGS_OPTIM environment
# variables if enable_optim is set to yes, or set to predefined values
# for other optimization profiles.
#

ABI_MSG_SECTION([Optimizations])

# Init optimization flags
# Note: must be done only once debugging is configured
ABI_OPTIM_INIT([${enable_optim}])

# Get optimization flags from database when in profile mode
if test "${enable_optim}" != "no" -a "${enable_optim}" != "yes"; then
  if test "${CFLAGS}" = ""; then
    ABI_CC_OPTFLAGS
  else
    AC_MSG_NOTICE([optimization profile overriden by user-defined CFLAGS])
  fi
  if test "${CXXFLAGS}" = ""; then
    ABI_CXX_OPTFLAGS
  else
    AC_MSG_NOTICE([optimization profile overriden by user-defined CXXFLAGS])
  fi
  if test "${FCFLAGS}" = ""; then
    ABI_FC_OPTFLAGS
  else
    AC_MSG_NOTICE([optimization profile overriden by user-defined FCFLAGS])
  fi
fi

# FIXME: 20_datashare does not support optimizations
fcflags_opt_20_datashare="-O0"

# Set per-directory Fortran optimizations
# Note: must be done only once FCFLAGS_OPTIM is set
ABI_OPTFLAGS_DIRS([${FCFLAGS_OPTIM}])

# ---------------------------------------------------------------------------- #

#
# 64-bit support
#
# NOTES: 
#
#   * This step requires that the hints have been looked for.
#
#   * Please do not try to set-up the *_64BITS variables manually, as they
#     will systematically be overwritten.
#

ABI_MSG_SECTION([64-bit support])

# Display status
AC_MSG_CHECKING([for a 64-bit architecture])
AC_MSG_RESULT([${abi_cpu_64bits}])
AC_MSG_CHECKING([whether to use 64-bit flags])
AC_MSG_RESULT([${enable_64bit_flags}])
AC_MSG_CHECKING([for user-defined 64-bit flags])
AC_MSG_RESULT([${with_64bit_flags}])

# C preprocessing
if test "${enable_64bit_flags}" = "yes"; then
  AC_MSG_CHECKING([for 64-bit C preprocessor flags])
  if test "${CPPFLAGS_64BITS}" = ""; then
    AC_MSG_RESULT([none])
  else
    AC_MSG_RESULT([${CPPFLAGS_64BITS}])
    CPP="${CPP} ${CPPFLAGS_64BITS}"
  fi
else
  CPPFLAGS_64BITS=""
fi

# C compilation
if test "${enable_64bit_flags}" = "yes"; then
  AC_MSG_CHECKING([for 64-bit C flags])
  if test "${CFLAGS_64BITS}" = ""; then
    AC_MSG_RESULT([none])
  else
    AC_MSG_RESULT([${CFLAGS_64BITS}])
    CC="${CC} ${CFLAGS_64BITS}"
  fi
else
  CFLAGS_64BITS=""
fi

# C++ preprocessing
if test "${XPP}" != ""; then
  if test "${enable_64bit_flags}" = "yes"; then
    AC_MSG_CHECKING([for 64-bit C++ preprocessor flags])
    if test "${XPPFLAGS_64BITS}" = ""; then
      AC_MSG_RESULT([none])
    else
      AC_MSG_RESULT([${XPPFLAGS_64BITS}])
      XPP="${XPP} ${XPPFLAGS_64BITS}"
    fi
  else
    XPPFLAGS_64BITS=""
  fi
fi

# C++ compilation
if test "${CXX}" != ""; then
  if test "${enable_64bit_flags}" = "yes"; then
    AC_MSG_CHECKING([for 64-bit C++ flags])
    if test "${CXXFLAGS_64BITS}" = ""; then
      AC_MSG_RESULT([none])
    else
      AC_MSG_RESULT([${CXXFLAGS_64BITS}])
      CXX="${CXX} ${CXXFLAGS_64BITS}"
    fi
  else
    CXXFLAGS_64BITS=""
  fi
fi

# Fortran preprocessing
if test "${FPP}" != ""; then
  if test "${enable_64bit_flags}" = "yes"; then
    AC_MSG_CHECKING([for 64-bit Fortran preprocessor flags])
    if test "${FPPFLAGS_64BITS}" = ""; then
      AC_MSG_RESULT([none])
    else
      AC_MSG_RESULT([${FPPFLAGS_64BITS}])
      FPP="${FPP} ${FPPFLAGS_64BITS}"
    fi
  else
    FPPFLAGS_64BITS=""
  fi
fi

# Fortran compilation
if test "${enable_64bit_flags}" = "yes"; then
  AC_MSG_CHECKING([for 64-bit Fortran flags])
  if test "${FCFLAGS_64BITS}" = ""; then
    AC_MSG_RESULT([none])
  else
    AC_MSG_RESULT([${FCFLAGS_64BITS}])
    FC="${FC} ${FCFLAGS_64BITS}"
  fi
else
  FCFLAGS_64BITS=""
fi

# Archiver
if test "${enable_64bit_flags}" = "yes"; then
  AC_MSG_CHECKING([for 64-bit archiver flags])
  if test "${ARFLAGS_64BITS}" = ""; then
    AC_MSG_RESULT([none])
  else
    AC_MSG_RESULT([${ARFLAGS_64BITS}])
    AR="${AR} ${ARFLAGS_64BITS}"
  fi
else
  ARFLAGS_64BITS=""
fi

# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #

#
# Save configuration
#

ABI_MSG_SECTION([Build flags])

# Set-up target and binary package names
# Note: requires knowledge of Fortran compiler
ABI_INIT_TARGET
ABINIT_BINARY_PACKAGE="${PACKAGE}-${VERSION}_${ABINIT_TARGET}"
AC_SUBST(ABINIT_BINARY_PACKAGE)

# Final adjustments for library archiver
test "${ARFLAGS}" = "" && \
  ARFLAGS="${ARFLAGS_64BITS} ${ARFLAGS_DEBUG} ${ARFLAGS_OPTIM} ${ARFLAGS_HINTS} ${ARFLAGS_EXTRA} ${ARFLAGS_CMD}"

# Final adjustments for C
test "${CFLAGS}" = "" && \
  CFLAGS="${CFLAGS_64BITS} ${CFLAGS_DEBUG} ${CFLAGS_OPTIM} ${CFLAGS_HINTS} ${CFLAGS_EXTRA}"
test "${CC_LDFLAGS}" = "" && \
  CC_LDFLAGS="${CC_LDFLAGS_64BITS} ${CC_LDFLAGS_DEBUG} ${CC_LDFLAGS_OPTIM} ${CC_LDFLAGS_HINTS} ${CC_LDFLAGS_EXTRA}"
test "${CC_LIBS}" = "" && \
  CC_LIBS="${CC_LIBS_64BITS} ${CC_LIBS_DEBUG} ${CC_LIBS_OPTIM} ${CC_LIBS_HINTS} ${CC_LIBS_EXTRA}"

# Final adjustments for C++
test "${CXXFLAGS}" = "" && \
  CXXFLAGS="${CXXFLAGS_64BITS} ${CXXFLAGS_DEBUG} ${CXXFLAGS_OPTIM} ${CXXFLAGS_HINTS} ${CXXFLAGS_EXTRA}"
test "${CXX_LDFLAGS}" = "" && \
  CXX_LDFLAGS="${CXX_LDFLAGS_64BITS} ${CXX_LDFLAGS_DEBUG} ${CXX_LDFLAGS_OPTIM} ${CXX_LDFLAGS_HINTS} ${CXX_LDFLAGS_EXTRA}"
test "${CXX_LIBS}" = "" && \
  CXX_LIBS="${CXX_LIBS_64BITS} ${CXX_LIBS_DEBUG} ${CXX_LIBS_OPTIM} ${CXX_LIBS_HINTS} ${CXX_LIBS_EXTRA}"

# Final adjustments for Fortran
# Note: FCFLAGS_OPTIM must not be included (per-directory optimizations)
test "${FCFLAGS}" = "" && \
  FCFLAGS="${FCFLAGS_64BITS} ${FCFLAGS_DEBUG} ${FCFLAGS_HINTS} ${FCFLAGS_EXTRA} ${FCFLAGS_OPENMP}"
test "${FC_LDFLAGS}" = "" && \
  FC_LDFLAGS="${FC_LDFLAGS_64BITS} ${FC_LDFLAGS_DEBUG} ${FC_LDFLAGS_OPTIM} ${FC_LDFLAGS_HINTS} ${FC_LDFLAGS_EXTRA}"
test "${FC_LIBS}" = "" && \
  FC_LIBS="${FC_LIBS_64BITS} ${FC_LIBS_DEBUG} ${FC_LIBS_OPTIM} ${FC_LIBS_HINTS} ${FC_LIBS_EXTRA}"

# FIXME: temporary workaround for Macs
if test "${abi_cpu_platform}" = "apple"; then
  AC_MSG_WARN([${abi_cpu_platform} is not able to handle full link information])
  AC_MSG_WARN([static builds will fail])
else
  AC_MSG_NOTICE([static builds may be performed])
  FC_LIBS="${FC_LIBS} ${FCLIBS}"
fi

# Final adjustments for preprocessors
test "${CPPFLAGS}" = "" && \
  CPPFLAGS="${CPPFLAGS_64BITS} ${CPPFLAGS_DEBUG} ${CPPFLAGS_OPTIM} ${CPPFLAGS_HINTS} ${CPPFLAGS_EXTRA}"
test "${XPPFLAGS}" = "" && \
  XPPFLAGS="${XPPFLAGS_64BITS} ${XPPFLAGS_DEBUG} ${XPPFLAGS_OPTIM} ${XPPFLAGS_HINTS} ${XPPFLAGS_EXTRA}"
test "${FPPFLAGS}" = "" -a "${abi_fc_wrap}" = "no" && \
  FPPFLAGS="${FPPFLAGS_64BITS} ${FPPFLAGS_DEBUG} ${FPPFLAGS_OPTIM} ${FPPFLAGS_HINTS} ${FPPFLAGS_EXTRA}"

# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #

#
# Advanced compiler features
#

# Note: these tests have to be performed after the flags have been
#       saved.

ABI_MSG_SECTION([Advanced compiler features])

ABI_CC_FEATURES
ABI_FC_FEATURES

# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #

#
# Multicore architecture support

# Note: the following settings will be used by the connectors.

ABI_MSG_SECTION([Multicore architecture support])

# OpenMP support
AC_MSG_CHECKING([whether to enable OpenMP support])
AC_MSG_RESULT([${enable_openmp}])
if test "${enable_openmp}" = "yes"; then
  AC_MSG_CHECKING([Fortran flags for OpenMP])
  AC_MSG_RESULT([${FCFLAGS_OPENMP}])
  ABI_OMP_CHECK_COLLAPSE
  AC_MSG_NOTICE([OpenMP support is enabled in Fortran source code only])
fi

# MPI support
ABI_MPI_DETECT
if test "${enable_maintainer_checks}" = "yes"; then
  ABI_MPI_DUMP
fi

# GPU support
ABI_GPU_DETECT

# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #

#
# Feature triggers
#

ABI_MSG_SECTION([Feature triggers])

# Init
abi_fallbacks=""

# Make sure ~/.abinit/tarballs exists
if test "${with_tardir}" = ""; then
  abinit_tardir="${HOME}/.abinit/tarballs"
else
  abinit_tardir="${with_tardir}"
fi
if test ! -e "${abinit_tardir}"; then
  AC_MSG_NOTICE([creating ${abinit_tardir}])
  ${INSTALL} -d -m 755 "${abinit_tardir}"
fi
AC_MSG_NOTICE([using tarball repository ${abinit_tardir}])
AC_SUBST(abinit_tardir)

# Make fallbacks usable by Abinit
fallbacks_instdir="${abinit_builddir}/fallbacks/exports"
fallbacks_incs='-I$(fallbacks_instdir)/include'
AC_SUBST(fallbacks_instdir)
AC_SUBST(fallbacks_incs)

# Linear algebra support
ABI_LINALG_DETECT

# FIXME: copying linear algebra tarball for now
tmp_linalg_tarball="lapack-abinit_6.10.tar.gz"
if test ! -s "${abinit_tardir}/${tmp_linalg_tarball}"; then
  AC_MSG_NOTICE([copying linear algebra tarball to tarball repository])
  cp "${abinit_srcdir}/fallbacks/transient/${tmp_linalg_tarball}" \
    "${abinit_tardir}"
fi

# External FFT support
ABI_CONNECT_FFT

# Parallel I/O support
# TODO

# LibXC support
# TODO

# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #

#
# Connectors to external packages
#

# Note: the order is critical!
#       level 1 ---> LINALG, IO, TIMER (require MPI and GPU)
#       level 2 ---> FFT, MATH (require MPI, GPU, and LINALG)
#       level 3 ---> DFT (may require MPI, GPU, LINALG, IO, FFT and MATH)
#
# Further note: MATH libraries may even depend on LINALG and FFT
#               (wait and see...)

ABI_MSG_SECTION([Connectors / Fallbacks])

# Transferable file I/O support
if test "${enable_connectors}" = "yes" -a \
        "${enable_fallbacks}" != "force"; then
  ABI_CONNECT_TRIO
else
  abi_fallbacks="${abi_fallbacks} `echo ${with_trio_flavor} | sed -e 's/+/ /g;s/none//g'`"
  if test "${with_trio_flavor}" = "none"; then
    lib_trio_flavor="none"
  else
    lib_trio_flavor=`echo "${with_trio_flavor}" | sed -e 's/+/-fallback+/g;s/$/-fallback/'`
  fi
  lib_trio_flavor="${lib_trio_flavor} (libs: ignored)"
fi
abi_psml_wanted=`echo "${with_trio_flavor}" | grep "psml"`
AM_CONDITIONAL([DO_BUILD_PSML], [test "${abi_psml_wanted}" != "" ])

# External timing library support
if test "${enable_connectors}" = "yes"; then
  ABI_CONNECT_TIMER
fi

# External algorithmic library support
if test "${enable_connectors}" = "yes"; then
  ABI_CONNECT_ALGO
fi

# External math library support
if test "${enable_connectors}" = "yes"; then
  ABI_CONNECT_MATH
fi

# External DFT support
if test "${enable_connectors}" = "yes" -a \
        "${enable_fallbacks}" != "force"; then
  ABI_CONNECT_DFT
else
  abi_fallbacks="${abi_fallbacks} `echo ${with_dft_flavor} | sed -e 's/+/ /g;s/none//g'`"
  if test "${with_dft_flavor}" = "none"; then
    lib_dft_flavor="none"
  else
    lib_dft_flavor=`echo "${with_dft_flavor}" | sed -e 's/+/-fallback+/g;s/$/-fallback/'`
  fi
  lib_dft_flavor="${lib_dft_flavor} (libs: ignored)"
fi

# Check consistency of current status
abi_fallbacks=`echo "${abi_fallbacks}" | tr ' ' '\n' | sort -u | \
  awk '{printf " %s",[$]1}' | sed -e 's/^[ ]*//'`
if test "${enable_fallbacks}" = "no" -a "${abi_fallbacks}" != ""; then
  AC_MSG_NOTICE([fallbacks are disabled but the following ones have to be built:])
  AC_MSG_NOTICE([])
  for pkg in ${abi_fallbacks}; do
    AC_MSG_NOTICE([  * ${pkg}])
  done
  AC_MSG_NOTICE([])
  AC_MSG_ERROR([cannot build Abinit])
fi

# Init options for the fallbacks subsystem
enable_atompaw="no"
enable_bigdft="no"
enable_etsf_io="no"
enable_libxc="no"
enable_linalg="no"
enable_netcdf="no"
enable_wannier90="no"

# display status of fallbacks
AC_MSG_NOTICE([fallbacks to enable => ${abi_fallbacks}])
for pkg in ${abi_fallbacks}; do
  eval enable_${pkg}="yes"
done
for pkg in atompaw bigdft etsf_io libxc linalg netcdf wannier90; do
  tmp_pkg_enabled=`eval echo \$\{enable_${pkg}\}`
  AC_MSG_CHECKING([whether to build ${pkg}])
  AC_MSG_RESULT([${tmp_pkg_enabled}])
done

# Inform Automake
AM_CONDITIONAL([DO_BUILD_01_GSL_EXT],[test "${lib_math_flavor}" = "gsl"])
##############################################
if test "${enable_connectors}" = "yes"; then
  ABI_CONNECT_TRIQS
fi
##############################################
# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #

#
# Buggy Fortran compilers
#

# NOTE: must be done at the end because the wrapper is built by configure

# Correct include flags to allow for the build of incompatible Fortran modules
ABI_INCFLAGS_CORRECT

# Wrap buggy Fortran compilers
FC_NOWRAP="${FC}"
if test "${abi_fc_wrap}" = "yes"; then
  FC="${abinit_builddir}/config/wrappers/wrap-fc"
fi
AC_SUBST(FC_NOWRAP)

# Force F77 and F90 environment variables (keep always last)
F77="${FC}"
FFLAGS="${FCFLAGS}"
F90="${FC}"
F90FLAGS="${FCFLAGS}"

# The following is required for oldish fixed-form Fortran libraries
AC_SUBST(F77)
AC_SUBST(FFLAGS)

# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #

#
# Experimental developments
#

ABI_MSG_SECTION([Experimental developments and option triggers])

# Determine Fortran module name mangling for bindings
if test "${enable_bindings}" = "yes"; then
  ABI_FC_MODULE_MANGLING
fi

# Fast checking
AC_MSG_CHECKING([whether to accelerate 'make check'])
AC_MSG_RESULT([${enable_fast_check}])

# Reduced checking for packages
AC_MSG_CHECKING([whether to reduce 'make check' for packaging])
AC_MSG_RESULT([${enable_pkg_check}])

# Maintainer checks
AC_MSG_CHECKING([whether to activate maintainer checks])
AC_MSG_RESULT([${enable_maintainer_checks}])
# Triggers (see config/specs/options.conf for details)
ABI_OPTIONS_TRIGGERS

# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #

#
# Configure subsystems
#

# Note: options must have been processed, in order to take proper
# decisions

ABI_MSG_SECTION([Subsystems])

# Init all subsystems
ABI_SUBSYSTEMS_INIT

# Grab fallbacks parameters
ABI_FALLBACKS_PARAMS

# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #

# Void CPPFLAGS to allow for C/Fortran mixing
ABI_CPPFLAGS="${CPPFLAGS}"
CPPFLAGS=""

# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #

#
# Output configuration
#

ABI_MSG_SECTION([Output])

ac_configure_args="${ac_configure_args} --enable-atompaw=${enable_atompaw} --enable-bigdft=${enable_bigdft} --enable-etsf-io=${enable_etsf_io} --enable-libxc=${enable_libxc} --enable-linalg=${enable_linalg} --enable-netcdf=${enable_netcdf} --enable-wannier90=${enable_wannier90} --with-fc-vendor=${abi_fc_vendor} --with-fc-version=${abi_fc_version} --with-tardir='${abinit_tardir}'"

# Output files
# Note: later, add tests/atconfig and tests/atlocal for test suite
ABI_OUTPUT

# FIXME: transient symlink until plugins are fully replaced by fallbacks
#        in the test farm
if test ! -e "./config.mk"; then
  ${LN_S} ./fallbacks/config.mk ./config.mk
fi

# ---------------------------------------------------------------------------- #
# ---------------------------------------------------------------------------- #

ABI_MSG_SECTION([Final remarks])

# The end
if test "${lib_linalg_flavor}" = "netlib-fallback"; then
  ABI_MSG_NOTICE([linalg-abinit],[Suboptimal linear algebra configuration])
fi
if test "${enable_gpu}" = "yes" -a "${abi_linalg_chk_gpu}" != "magma"; then
  ABI_MSG_NOTICE([gpu-without-magma],[Suboptimal GPU configuration])
fi
ABI_MSG_FC_BUGGY(${abi_fc_vendor})
tmp_etsf_io_in_use=`echo "${lib_trio_flavor}" | grep 'etsf_io'`
if test "${tmp_etsf_io_in_use}" != ""; then
  ABI_MSG_NOTICE([etsf_io-deprecated],[Upcoming end of ETSF_IO library support])
fi
ABI_MSG_END
