# -*- Autoconf -*-
#
# Copyright (C) 2011-2018 ABINIT Group (Yann Pouillon)
#
# This file is part of the ABINIT software package. For license information,
# please see the COPYING file in the top-level directory of the ABINIT source
# distribution.
#

# ---------------------------------------------------------------------------- #

#
# IMPORTANT NOTE
#
# Please DO NOT EDIT this file unless you REALLY know what you are doing.
# Everything is important, in particular the order of the various commands
# executed here. YOU HAVE BEEN WARNED !
#

# ---------------------------------------------------------------------------- #

#
# Autoconf & Automake startup
#

# Initialize Autoconf
AC_PREREQ(2.62)
AC_INIT([ABINIT-Fallbacks],[1.0],
  [https://bugs.launchpad.net/abinit/],[abinit-fallbacks])
AC_REVISION([Autotools support for the ABINIT Fallbacks])
AC_CONFIG_AUX_DIR([config/gnu])
AC_CONFIG_SRCDIR([.])
_AC_SRCDIRS(["."])

# ---------------------------------------------------------------------------- #

#
# Startup
#

# Initial setup
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE(1.10)

# Check for common programs
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_SED
AC_PROG_AWK
AC_PROG_GREP

# Workaround for the "grep -e" issue on Solaris systems
AC_PROG_EGREP

# Workaround for the wrong path to install-sh on Mac systems
AX_PROG_MKDIR_P

# Make sure the source tree is complete
${MKDIR_P} exports/include sources stamps

# ---------------------------------------------------------------------------- #

#
# Define global options
#

# FIXME: properly manage compiler vendors
AC_ARG_WITH([fc-vendor],
  AC_HELP_STRING([--with-fc-vendor],[Fortran compiler vendor]))
if test "${with_fc_vendor}" = ""; then
  fc_vendor="gnu"
else
  AC_MSG_NOTICE([setting Fortran compiler vendor to ${with_fc_vendor}])
  fc_vendor="${with_fc_vendor}"
fi
AC_SUBST(fc_vendor)

AC_ARG_WITH([fc-version],
  AC_HELP_STRING([--with-fc-version],[Fortran compiler version]))
if test "${with_fc_version}" = ""; then
  fc_version="4.4"
else
  AC_MSG_NOTICE([setting Fortran compiler version to ${with_fc_version}])
  fc_version="${with_fc_version}"
fi
AC_SUBST(fc_version)

AC_ARG_WITH([tardir],
  AC_HELP_STRING([--with-tardir],[Repository containing source tarballs]))
if test "${with_tardir}" = ""; then
  abinit_tardir="${HOME}/.abinit/tarballs"
else
  AC_MSG_NOTICE([setting tarball repository to ${with_tardir}])
  abinit_tardir="${with_tardir}"
fi
AC_SUBST(abinit_tardir)

AC_ARG_VAR([RANLIB],[Archive indexer])
AC_SUBST(RANLIB)

# ---------------------------------------------------------------------------- #

#
# Check option consistency
#

AC_MSG_NOTICE([checking consistency of fallback options])

# The ETSF I/O library requires NetCDF support
if test "${enable_etsf_io}" = "yes" -a "${enable_netcdf}" != "yes"; then
  AC_MSG_WARN([ETSF I/O requires NetCDF])
fi

# ---------------------------------------------------------------------------- #

#
# Downloading support
#

# Look for wget and curl
if test "${WGET}" = ""; then
  AC_CHECK_PROGS([WGET],[wget])
fi
if test "${CURL}" = ""; then
  AC_CHECK_PROGS([CURL],[curl])
fi

# Warn if neither wget nor curl have been found
# Note: cannot stop, since tarballs may be downloaded by other means
if test "${WGET}" = "" -a "${CURL}" = ""; then
  AC_MSG_WARN([no downloader found
    Please set the WGET or CURL environment variable manually if
    you want to be able to download tarballs])
fi

# Select downloader and corresponding options
if test "${WGET}" != ""; then
  afb_downloader="${WGET}"
  afb_dlopts="--timeout=15 --tries=1 -q -O"
elif test "${CURL}" != ""; then
  afb_downloader="${CURL}"
  afb_dlopts="--connect-time 15 --retry 1 -s -S -o"
fi

# Make sure ~/.abinit/tarballs exists
if test "${with_tardir}" != ""; then
  abinit_tardir="${with_tardir}"
fi
if test "${abinit_tardir}" = ""; then
  abinit_tardir="${HOME}/.abinit/tarballs"
  if test ! -e "${abinit_tardir}"; then
    AC_MSG_NOTICE([creating ${abinit_tardir}])
    ${INSTALL} -d -m 755 "${abinit_tardir}"
  fi
fi
AC_MSG_NOTICE([using tarball repository ${abinit_tardir}])
AC_SUBST(abinit_tardir)

# ---------------------------------------------------------------------------- #

#
# Source code management
#

# Init installation directory
fallbacks_instdir="${ac_abs_top_builddir}/exports"
AC_SUBST(fallbacks_instdir)

# Check for patch
AC_CHECK_PROGS([PATCH],[patch])

# Stop if patch is not available
if test "${PATCH}" = ""; then
  AC_MSG_WARN([no 'patch' command available])
  if test "${enable_bigdft}" = "yes"; then
    AC_MSG_ERROR([BigDFT requires patch - disable BigDFT or install patch])
  fi
  if test "${enable_wannier90}" = "yes"; then
    AC_MSG_ERROR([Wannier90 requires patch - disable Wannier90 or install patch])
  fi
fi

# ---------------------------------------------------------------------------- #

#
# C support
#

AC_PROG_CC

# LibXC sometimes requires C99
if test "${with_fc_vendor}" = "ibm"; then
  AC_PROG_CC_C99
else
  ac_cv_prog_cc_c99="no"
fi

# ---------------------------------------------------------------------------- #

#
# Fortran support
#

AC_PROG_FC

# ---------------------------------------------------------------------------- #

#
# Linear algebra support
#

ABI_FALLBACK_LINALG

# ---------------------------------------------------------------------------- #

#
# NetCDF support
#

ABI_FALLBACK_NETCDF

# ---------------------------------------------------------------------------- #

#
# ETSF I/O library support
#

ABI_FALLBACK_ETSF_IO

# ---------------------------------------------------------------------------- #

#
# TDDFT.org exchange-correlation library support
#

ABI_FALLBACK_LIBXC

# ---------------------------------------------------------------------------- #

#
# AtomPAW support
#

ABI_FALLBACK_ATOMPAW

# ---------------------------------------------------------------------------- #

#
# Wavelets support - BigDFT project
#

ABI_FALLBACK_BIGDFT

# ---------------------------------------------------------------------------- #

#
# Wannier90 support
#

ABI_FALLBACK_WANNIER90

# ---------------------------------------------------------------------------- #

#
# Output configuration
#

AC_OUTPUT([Makefile])

