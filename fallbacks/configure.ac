# -*- Autoconf -*-
#
# Copyright (C) 2011-2014 ABINIT Group (Yann Pouillon)
#
# This file is part of the ABINIT software package. For license information,
# please see the COPYING file in the top-level directory of the ABINIT source
# distribution.
#

# ---------------------------------------------------------------------------- #

#
# IMPORTANT NOTE
#
# Please DO NOT EDIT this file unless you REALLY know what you are doing.
# Everything is important, in particular the order of the various commands
# executed here. YOU HAVE BEEN WARNED !
#

# ---------------------------------------------------------------------------- #

#
# Autoconf & Automake startup
#

# Initialize Autoconf
AC_PREREQ(2.68)
AC_INIT([ABINIT-Fallbacks],[8.8.2],
  [https://bugs.launchpad.net/abinit-fallbacks/],[abinit-fallbacks])
AC_REVISION([Autotools support for the ABINIT Fallbacks])
AC_CONFIG_AUX_DIR([config/gnu])
AC_CONFIG_SRCDIR([.])
_AC_SRCDIRS(["."])

# ---------------------------------------------------------------------------- #

#
# Startup
#

# Initial setup
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE(1.12)

# Check for common programs
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_SED
AC_PROG_AWK
AC_PROG_GREP

# Workaround for the "grep -e" issue on Solaris systems
AC_PROG_EGREP

# Workaround for the wrong path to install-sh on Mac systems
AX_PROG_MKDIR_P

# Make sure the source tree is complete
${MKDIR_P} sources stamps

# ---------------------------------------------------------------------------- #

#
# Define global options
#

# Manage environment variables and command-line options
AFB_ENV_BACKUP
AFB_OPTIONS_DEFINE
AFB_OPTIONS_BACKUP
AFB_OPTIONS_SETUP
AFB_OPTIONS_CHANGED
AFB_OPTIONS_PARSE
AFB_ENV_INIT

# set-up tarball directory
if test "${with_tardir}" = ""; then
  abinit_tardir="${HOME}/.abinit/tarballs"
else
  abinit_tardir="${with_tardir}"
fi
AC_MSG_NOTICE([setting tarball repository to ${abinit_tardir}])

# Make sure the tarball directory exists
if test ! -e "${abinit_tardir}"; then
  AC_MSG_NOTICE([creating tarball repository ${abinit_tardir}])
  ${INSTALL} -d -m 755 "${abinit_tardir}"
fi
AC_MSG_NOTICE([using tarball repository ${abinit_tardir}])

# Set-up installation directory
if test "${enable_local_build}" = "yes"; then
  AC_MSG_NOTICE([tuning install parameters for local build])
  prefix="${ac_abs_top_builddir}/exports"
fi

# Substitutions
AC_SUBST(abinit_tardir)

# ---------------------------------------------------------------------------- #

#
# Downloading support
#

# Look for wget and curl
if test "${WGET}" = ""; then
  AC_CHECK_PROGS([WGET],[wget])
fi
if test "${CURL}" = ""; then
  AC_CHECK_PROGS([CURL],[curl])
fi

# Warn if neither wget nor curl have been found
# Note: cannot stop, since tarballs may be downloaded by other means
if test "${WGET}" = "" -a "${CURL}" = ""; then
  AC_MSG_WARN([no downloader found
    Please set the WGET or CURL environment variable manually if
    you want to be able to download tarballs])
fi

# Select downloader and corresponding options
if test "${WGET}" != ""; then
  afb_downloader="${WGET}"
  afb_dlopts="--timeout=15 --tries=1 -q -O"
elif test "${CURL}" != ""; then
  afb_downloader="${CURL}"
  afb_dlopts="--connect-time 15 --retry 1 -s -S -o"
fi

# ---------------------------------------------------------------------------- #

#
# Source code management
#

# Make sure required patches can be applied
AFB_PATCHES_SETUP

# ---------------------------------------------------------------------------- #

#
# C support
#

AC_PROG_CC
AC_PROG_CPP

# LibXC sometimes requires C99
# Note: if problem, set ac_cv_prog_cc_c99="no"
AC_PROG_CC_C99

# Store information on C compiler
AFB_PROG_CC(${CC})
ref_cc_vendor="${afb_cc_vendor}"
ref_cc_version="${afb_cc_version}"

# ---------------------------------------------------------------------------- #

#
# C++ support
#

AC_PROG_CXX

# ---------------------------------------------------------------------------- #

#
# Fortran support
#

AC_PROG_FC
AFB_PROG_FC

# ---------------------------------------------------------------------------- #

#
# Archiver support
#

AC_CHECK_PROGS([AR],[ar xiar])
AC_PROG_RANLIB

# ---------------------------------------------------------------------------- #

#
# Final build parameters configuration
#

# Make use of *_EXTRA flags
ARFLAGS="${ARFLAGS} ${ARFLAGS_EXTRA}"
CC_LDFLAGS="${CC_LDFLAGS} ${CC_LDFLAGS_EXTRA}"
CFLAGS="${CFLAGS} ${CFLAGS_EXTRA}"
CFGFLAGS="${CFGFLAGS} ${CFGFLAGS_EXTRA}"
CPPFLAGS="${CPPFLAGS} ${CPPFLAGS_EXTRA}"
CXX_LDFLAGS="${CXX_LDFLAGS} ${CXX_LDFLAGS_EXTRA}"
CXXFLAGS="${CXXFLAGS} ${CXXFLAGS_EXTRA}"
FC_LDFLAGS="${FC_LDFLAGS} ${FC_LDFLAGS_EXTRA}"
FCFLAGS="${FCFLAGS} ${FCFLAGS_EXTRA}"
FPPFLAGS="${FPPFLAGS} ${FPPFLAGS_EXTRA}"
XPPFLAGS="${XPPFLAGS} ${XPPFLAGS_EXTRA}"

# Merge-in *LIBS flags
CC_LIBS="${CC_LIBS} ${LIBS}"
CXX_LIBS="${CXX_LIBS} ${LIBS}"
FC_LIBS="${FC_LIBS} ${LIBS}"

# ---------------------------------------------------------------------------- #

#
# Configure fallbacks and their dependencies in the correct order
#

# HDF5 significantly enhances NetCDF4
AFB_CHECK_HDF5
if test "${afb_hdf5_ok}" = "yes" -a "${enable_hdf5}" = "yes"; then
  AC_MSG_NOTICE([enabling advanced NetCDF4 I/O features])
  AC_MSG_NOTICE([please note that HDF5 must be compiled with
           the same compiler as now for this to work])
  CC_NETCDF4="${HDF5_CC}"
  test -z "${CPPFLAGS_NETCDF4}" && \
    CPPFLAGS_NETCDF4="${CPPFLAGS} ${HDF5_CPPFLAGS}"
  test -z "${CFLAGS_NETCDF4}" && \
    CFLAGS_NETCDF4="${CFLAGS} ${HDF5_CFLAGS}"
  test -z "${LDFLAGS_NETCDF4}" && \
    LDFLAGS_NETCDF4="${LDFLAGS} ${HDF5_LDFLAGS}"
  test -z "${LIBS_NETCDF4}" && \
    LIBS_NETCDF4="${LIBS} ${HDF5_LIBS}"
else
  AC_MSG_NOTICE([enabling minimal NetCDF4 features only])
fi

# Check that the NetCDF4 compiler wrapper is the same as our current compiler
if test "${CC_NETCDF4}" = ""; then
  CC_NETCDF4="${CC}"
fi
AFB_PROG_CC(${CC_NETCDF4})
if test "${afb_cc_vendor}" != "${ref_cc_vendor}"; then
  AC_MSG_WARN([NetCDF4 will be built with a different C compiler
                    The build of Abinit might fail])
else
  if test "${afb_cc_version}" != "${ref_cc_version}"; then
    AC_MSG_WARN([NetCDF4 will be built with a different compiler version])
  fi
fi

# Configure all fallbacks
AFB_SETUP_PACKAGES

# ---------------------------------------------------------------------------- #

#
# Output configuration and report
#

AC_CONFIG_COMMANDS([script-perms],
  [chmod u+x src/abinit-fallbacks-config src/install-symlinks.sh])

AC_CONFIG_FILES([
  Makefile
  fallbacks.dump
  src/abinit-fallbacks-config
  src/install-symlinks.sh
  src/Makefile])
AC_OUTPUT

AFB_INFO_DISPLAY
