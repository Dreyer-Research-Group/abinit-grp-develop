#!/usr/bin/env python
#
# Copyright (C) 2014 ABINIT Group (Yann Pouillon)
#
# This file is part of the ABINIT software package. For license information,
# please see the COPYING file in the top-level directory of the ABINIT source
# distribution.
#

from ConfigParser import ConfigParser,NoOptionError
from time import gmtime,strftime

import commands
import os
import re
import sys

class MyConfigParser(ConfigParser):

  def optionxform(self,option):
    return str(option)

# ---------------------------------------------------------------------------- #

#
# Subroutines
#

# Macro header
def dep_macros(name,stamp):

  return """# Generated by %s on %s

#
# ABINIT external dependencies support for the "configure" script
#

#
# IMPORTANT NOTE
#
# This file has been automatically generated by the %s
# script. If you try to edit it, your changes will systematically be
# overwritten.
#



# ABI_EXTDEPS_INIT()
# ------------------
#
# Sets all variables needed to handle the external dependencies.
#
AC_DEFUN([ABI_EXTDEPS_INIT],[
  dnl Initial setup
    fallbacks_prefix=""
    fallbacks_bins=""
    fallbacks_cppflags=""
@DEP_ZERO@
  if test "${with_fallbacks_prefix}" = ""; then
    fallbacks_prefix="${with_fallbacks_prefix}"
    fallbacks_bins="${fallbacks_prefix}/bin"
    fallbacks_cppflags="-I${fallbacks_prefix}/include"
@FBK_SETUP@  fi

@DEP_SUBST@]) # ABI_EXTDEPS_INIT



# ABI_FALLBACKS_SELECT()
# ----------------------
#
# Selects fallbacks depending on the current build environment.
#
AC_DEFUN([ABI_FALLBACKS_INIT],[
  dnl Initial setup

  dnl Switch to fallbacks when detection failed
  if test "${fallbacks_prefix}" != ""; then
@FBK_SELECT@  fi

  dnl Substitute variables needed for the use of the fallbacks
  AC_SUBST(fallbacks_prefix)
  AC_SUBST(fallbacks_bins)
  AC_SUBST(fallbacks_cppflags)
@FBK_SUBST@]) # ABI_FALLBACKS_INIT
""" % (name,stamp,name)



def fbk_select(pkg,detector,deps):

  if ( detector == "arch" ):
    pkg_test = "\"${abi_%s_ok}\" = \"no\"" % pkg
  else:
    pkg_test = "\"${enable_%s}\" = \"yes\" -a \"${abi_%s_ok}\" = \"no\"" % \
      (pkg,pkg)

  return """\
    if test %s; then
      abi_%s_bins="${fallbacks_bins}"
      abi_%s_cppflags="${fallbacks_cppflags}"
      abi_%s_libs="${abi_fbk_%s_libs}"
    fi
""" % (pkg_test,pkg,pkg,pkg,pkg)



# ---------------------------------------------------------------------------- #

#
# Main program
#

# Initial setup
my_name    = "make-macros-dependencies"
my_configs = ["config/specs/dependencies.conf"]
my_output  = "config/m4/auto-dependencies.m4"

# Check if we are in the top of the ABINIT source tree
if ( not os.path.exists("configure.ac") or
     not os.path.exists("src/98_main/abinit.F90") ):
  print("%s: You must be in the top of an ABINIT source tree." % my_name)
  print("%s: Aborting now." % my_name)
  sys.exit(1)

# Read config file(s)
for cnf_file in my_configs:
  if ( os.path.exists(cnf_file) ):
    if ( re.search("\.cf$",cnf_file) ):
      execfile(cnf_file)
  else:
    print("%s: Could not find config file (%s)." % (my_name,cnf_file))
    print("%s: Aborting now." % my_name)
    sys.exit(2)

# What time is it?
now = strftime("%Y/%m/%d %H:%M:%S +0000",gmtime())

# Init
cnf = MyConfigParser()
cnf.read(my_configs[0])
abinit_fallbacks = cnf.sections()
abinit_fallbacks.sort()
dep_zero_cmds = ""
fbk_setup_cmds = ""
fbk_select_cmds = ""
dep_subst_cmds = ""

# Process fallbacks
for pkg in abinit_fallbacks:

  # Extract package information
  pkg_detector = cnf.get(pkg,"detector")
  pkg_fallback = cnf.get(pkg,"fallback")
  try:
    pkg_deps = cnf.get(pkg,"depends").split()
  except NoOptionError:
    pkg_deps = []
  try:
    pkg_bins = cnf.get(pkg,"binaries").split()
  except NoOptionError:
    pkg_bins = []
  try:
    pkg_hdrs = cnf.get(pkg,"headers").split()
  except NoOptionError:
    pkg_hdrs = []
  try:
    pkg_libs = cnf.get(pkg,"libraries").split()
  except NoOptionError:
    pkg_libs = []
  try:
    pkg_mods = cnf.get(pkg,"modules").split()
  except NoOptionError:
    pkg_mods = []

  # Propagate package variables
  dep_zero_cmds += "    abi_dep_%s_bins=\"${with_%s_bins}\"\n" % (pkg,pkg)
  dep_zero_cmds += "    dep_%s_bins=\"\"\n" % pkg
  dep_subst_cmds += "  AC_SUBST(dep_%s_bins)\n" % pkg
  dep_zero_cmds += "    abi_dep_%s_incs=\"\"\n" % pkg
  dep_zero_cmds += "    dep_%s_incs=\"\"\n" % pkg
  dep_subst_cmds += "  AC_SUBST(dep_%s_incs)\n" % pkg
  dep_zero_cmds += "    abi_dep_%s_libs=\"\"\n" % pkg
  dep_zero_cmds += "    dep_%s_libs=\"\"\n" % pkg
  dep_zero_cmds += "    abi_dep_%s_ok=\"unknown\"\n" % pkg
  dep_subst_cmds += "  AC_SUBST(dep_%s_libs)\n" % pkg

  if ( pkg_fallback == "yes" ):
    dep_zero_cmds += "    abi_fbk_%s_libs=\"\"\n" % pkg
    fbk_setup_cmds += "    abi_fbk_%s_libs=\"-L${fallbacks_prefix}/lib -l" % \
      pkg + " -l".join(pkg_libs) + "\"\n"
    fbk_select_cmds += fbk_select(pkg,pkg_detector,pkg_deps)
    #dep_subst_cmds += "  AC_SUBST(abi_fbk_%s_libs)\n" % pkg

# Write macro
m4_data = dep_macros(my_name,now)
m4_data = re.sub("@DEP_ZERO@",dep_zero_cmds,m4_data)
m4_data = re.sub("@FBK_SETUP@",fbk_setup_cmds,m4_data)
m4_data = re.sub("@FBK_SELECT@",fbk_select_cmds,m4_data)
m4_data = re.sub("@DEP_SUBST@",dep_subst_cmds,m4_data)
file(my_output,"w").write(m4_data)
