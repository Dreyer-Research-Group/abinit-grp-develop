# Generated by make-macros-fallbacks on 2019/03/04 15:24:55 +0000

#
# ABINIT fallback support for the "configure" script
#

#
# IMPORTANT NOTE
#
# This file has been automatically generated by the make-macros-fallbacks
# script. If you try to edit it, your changes will systematically be
# overwritten.
#



# _AFB_SETUP_ATOMPAW()
# --------------------
#
# Sets all variables needed to handle the ATOMPAW fallback.
#
AC_DEFUN([_AFB_SETUP_ATOMPAW],[
  dnl Initial setup
  afb_atompaw_bins=""
  afb_atompaw_incs=""
  afb_atompaw_libs=""
  afb_atompaw_custom="no"
  afb_atompaw_tricks="unknown"
  afb_atompaw_ok="unknown"
  afb_atompaw_tarball="${abinit_tardir}/atompaw-4.1.0.5.tar.gz"
  tmp_tarball_ok="no"
  unset with_atompaw_incs

  dnl Define variables needed to build the package
  atompaw_pkg_name="atompaw-4.1.0.5"
  AC_SUBST(atompaw_pkg_name)
  atompaw_pkg_inst="atompaw/4.1.0.5"
  AC_SUBST(atompaw_pkg_inst)
  atompaw_pkg_string="AtomPAW version 4.1.0.5 (upstream release)"
  AC_SUBST(atompaw_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([atompaw],
    AC_HELP_STRING([--disable-atompaw],
      [Disable AtomPAW version 4.1.0.5 (upstream release) support]))
  AC_SUBST(enable_atompaw)

  dnl Make sure all required options are set
  if test "${enable_atompaw}" = ""; then
    enable_atompaw="yes"
  fi

  dnl Define and set environment variables for the package
  AC_ARG_VAR([CFGFLAGS_ATOMPAW],
    [Options to the configure script of atompaw])
  AC_SUBST(CFGFLAGS_ATOMPAW)
  if test -z "${CFGFLAGS_ATOMPAW}"; then
    CFGFLAGS_ATOMPAW="${CFGFLAGS}"
    afb_atompaw_cfgflags_custom="no"
  else
    afb_atompaw_custom="yes"
    afb_atompaw_cfgflags_custom="yes"
  fi
  unset CPPFLAGS_ATOMPAW
  unset CFLAGS_ATOMPAW
  unset XPPFLAGS_ATOMPAW
  unset CXXFLAGS_ATOMPAW
  AC_ARG_VAR([FPPFLAGS_ATOMPAW],
    [Fortran preprocessor flags of atompaw])
  AC_SUBST(FPPFLAGS_ATOMPAW)
  if test -z "${FPPFLAGS_ATOMPAW}"; then
    FPPFLAGS_ATOMPAW="${FPPFLAGS}"
    afb_atompaw_fppflags_custom="no"
  else
    afb_atompaw_custom="yes"
    afb_atompaw_fppflags_custom="yes"
  fi
  AC_ARG_VAR([FCFLAGS_ATOMPAW],
    [Fortran flags of atompaw])
  AC_SUBST(FCFLAGS_ATOMPAW)
  if test -z "${FCFLAGS_ATOMPAW}"; then
    FCFLAGS_ATOMPAW="${FCFLAGS}"
    afb_atompaw_fcflags_custom="no"
  else
    afb_atompaw_custom="yes"
    afb_atompaw_fcflags_custom="yes"
  fi
  AC_ARG_VAR([LDFLAGS_ATOMPAW],
    [Link flags of atompaw])
  AC_SUBST(LDFLAGS_ATOMPAW)
  if test -z "${LDFLAGS_ATOMPAW}"; then
    LDFLAGS_ATOMPAW="${LDFLAGS}"
    afb_atompaw_ldflags_custom="no"
  else
    afb_atompaw_custom="yes"
    afb_atompaw_ldflags_custom="yes"
  fi
  AC_ARG_VAR([LIBS_ATOMPAW],
    [Additional linker libraries of atompaw])
  AC_SUBST(LIBS_ATOMPAW)
  if test -z "${LIBS_ATOMPAW}"; then
    LIBS_ATOMPAW="${LIBS}"
    afb_atompaw_libs_custom="no"
  else
    afb_atompaw_custom="yes"
    afb_atompaw_libs_custom="yes"
  fi
  AC_ARG_VAR([ARFLAGS_ATOMPAW],
    [Library archiver flags of atompaw])
  AC_SUBST(ARFLAGS_ATOMPAW)
  if test -z "${ARFLAGS_ATOMPAW}"; then
    ARFLAGS_ATOMPAW="${ARFLAGS}"
    afb_atompaw_arflags_custom="no"
  else
    afb_atompaw_custom="yes"
    afb_atompaw_arflags_custom="yes"
  fi

  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the ATOMPAW fallback])
  AC_MSG_RESULT([${enable_atompaw}])
  if test "${enable_atompaw}" = "yes"; then

    dnl Check for dependencies
    if test "${afb_linalg_ok}" = "no"; then
      AC_MSG_ERROR([ATOMPAW depends on broken LINALG
        Solution: disable ATOMPAW or fix LINALG])
    fi
    if test "${afb_libxc_ok}" = "no"; then
      AC_MSG_ERROR([ATOMPAW depends on broken LIBXC
        Solution: disable ATOMPAW or fix LIBXC])
    fi

    dnl Adjust build flags to the actual situation
    LIBS_ATOMPAW="${afb_linalg_libs} ${LIBS_ATOMPAW}"
    LIBS_ATOMPAW="${afb_libxc_libs} ${LIBS_ATOMPAW}"

    dnl Get the package
    for dl_url in LOCAL "http://www.wfu.edu/~natalie/papers/pwpaw/atompaw-4.1.0.5.tar.gz" "http://forge.abinit.org/fallbacks/atompaw-4.1.0.5.tar.gz"; do
      if test "${tmp_tarball_ok}" = "no"; then
        if test "${dl_url}" != "LOCAL"; then
          rm -f "${afb_atompaw_tarball}"
          AC_MSG_NOTICE([downloading ATOMPAW - this may take a while])
          ${afb_downloader} ${afb_dlopts} \
            "${afb_atompaw_tarball}" \
            "${dl_url}"
        fi
        if test -s "${afb_atompaw_tarball}"; then
          AFB_CHECK_MD5SUM([${afb_atompaw_tarball}],[17f56afdbdd00c8dda4a4945e50f65f5])
          case "${afb_md5_ok}" in
            yes)
              tmp_tarball_ok="yes"
            ;;
            unknown)
              tmp_tarball_ok="yes"
              AC_MSG_WARN([could not check integrity of atompaw-4.1.0.5 tarball])
              ;;
            no)
              AC_MSG_WARN([atompaw-4.1.0.5 tarball MD5 check failed])
              ;;
          esac
        fi
      fi
    done

    dnl Enable fallback support only if the download was successful
    if test "${tmp_tarball_ok}" = "yes"; then
      afb_atompaw_ok="yes"
      AFB_TRICKS_ATOMPAW([${afb_fc_vendor}],[${afb_fc_version}])
    else
      afb_atompaw_ok="no"
      AC_MSG_ERROR([could not download ATOMPAW fallback tarball
    Solution: disable support for ATOMPAW or download the tarball
    manually to ${abinit_tardir}])
    fi

    dnl Warn user about broken packages
    if test "${afb_atompaw_ok}" != "yes"; then
      AC_MSG_WARN([ATOMPAW is broken, which will prevent the build of all
                      its possible dependencies])
    fi

  fi

  dnl Inform Automake
  AM_CONDITIONAL([DO_BUILD_ATOMPAW],[test "${enable_atompaw}" = "yes" -a "${afb_atompaw_ok}" = "yes"])
  AM_CONDITIONAL([DO_TEST_ATOMPAW],[test "${enable_atompaw}" = "yes" -a "${afb_atompaw_ok}" = "yes"])

  dnl Substitutions
  AC_SUBST(afb_atompaw_ok)
  AC_SUBST(afb_atompaw_tarball)
]) # _AFB_SETUP_ATOMPAW



# _AFB_SETUP_BIGDFT()
# -------------------
#
# Sets all variables needed to handle the BIGDFT fallback.
#
AC_DEFUN([_AFB_SETUP_BIGDFT],[
  dnl Initial setup
  afb_bigdft_bins=""
  afb_bigdft_incs=""
  afb_bigdft_libs=""
  afb_bigdft_custom="no"
  afb_bigdft_tricks="unknown"
  afb_bigdft_ok="unknown"
  afb_bigdft_tarball="${abinit_tardir}/bigdft-abinit-1.7.1.28.tar.gz"
  tmp_tarball_ok="no"
  unset with_bigdft_bins

  dnl Define variables needed to build the package
  bigdft_pkg_name="bigdft-abinit-1.7.1.28"
  AC_SUBST(bigdft_pkg_name)
  bigdft_pkg_inst="bigdft/abinit-1.7.1.28"
  AC_SUBST(bigdft_pkg_inst)
  bigdft_pkg_string="BigDFT abinit-designed library 1.7.1.28"
  AC_SUBST(bigdft_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([bigdft],
    AC_HELP_STRING([--disable-bigdft],
      [Disable BigDFT abinit-designed library 1.7.1.28 support]))
  AC_SUBST(enable_bigdft)

  dnl Make sure all required options are set
  if test "${enable_bigdft}" = ""; then
    enable_bigdft="yes"
  fi

  dnl Define and set environment variables for the package
  AC_ARG_VAR([CFGFLAGS_BIGDFT],
    [Options to the configure script of bigdft])
  AC_SUBST(CFGFLAGS_BIGDFT)
  if test -z "${CFGFLAGS_BIGDFT}"; then
    CFGFLAGS_BIGDFT="${CFGFLAGS}"
    afb_bigdft_cfgflags_custom="no"
  else
    afb_bigdft_custom="yes"
    afb_bigdft_cfgflags_custom="yes"
  fi
  AC_ARG_VAR([CPPFLAGS_BIGDFT],
    [C preprocessor flags of bigdft])
  AC_SUBST(CPPFLAGS_BIGDFT)
  if test -z "${CPPFLAGS_BIGDFT}"; then
    CPPFLAGS_BIGDFT="${CPPFLAGS}"
    afb_bigdft_cppflags_custom="no"
  else
    afb_bigdft_custom="yes"
    afb_bigdft_cppflags_custom="yes"
  fi
  AC_ARG_VAR([CFLAGS_BIGDFT],
    [C flags of bigdft])
  AC_SUBST(CFLAGS_BIGDFT)
  if test -z "${CFLAGS_BIGDFT}"; then
    CFLAGS_BIGDFT="${CFLAGS}"
    afb_bigdft_cflags_custom="no"
  else
    afb_bigdft_custom="yes"
    afb_bigdft_cflags_custom="yes"
  fi
  unset XPPFLAGS_BIGDFT
  unset CXXFLAGS_BIGDFT
  AC_ARG_VAR([FPPFLAGS_BIGDFT],
    [Fortran preprocessor flags of bigdft])
  AC_SUBST(FPPFLAGS_BIGDFT)
  if test -z "${FPPFLAGS_BIGDFT}"; then
    FPPFLAGS_BIGDFT="${FPPFLAGS}"
    afb_bigdft_fppflags_custom="no"
  else
    afb_bigdft_custom="yes"
    afb_bigdft_fppflags_custom="yes"
  fi
  AC_ARG_VAR([FCFLAGS_BIGDFT],
    [Fortran flags of bigdft])
  AC_SUBST(FCFLAGS_BIGDFT)
  if test -z "${FCFLAGS_BIGDFT}"; then
    FCFLAGS_BIGDFT="${FCFLAGS}"
    afb_bigdft_fcflags_custom="no"
  else
    afb_bigdft_custom="yes"
    afb_bigdft_fcflags_custom="yes"
  fi
  AC_ARG_VAR([LDFLAGS_BIGDFT],
    [Link flags of bigdft])
  AC_SUBST(LDFLAGS_BIGDFT)
  if test -z "${LDFLAGS_BIGDFT}"; then
    LDFLAGS_BIGDFT="${LDFLAGS}"
    afb_bigdft_ldflags_custom="no"
  else
    afb_bigdft_custom="yes"
    afb_bigdft_ldflags_custom="yes"
  fi
  AC_ARG_VAR([LIBS_BIGDFT],
    [Additional linker libraries of bigdft])
  AC_SUBST(LIBS_BIGDFT)
  if test -z "${LIBS_BIGDFT}"; then
    LIBS_BIGDFT="${LIBS}"
    afb_bigdft_libs_custom="no"
  else
    afb_bigdft_custom="yes"
    afb_bigdft_libs_custom="yes"
  fi
  AC_ARG_VAR([ARFLAGS_BIGDFT],
    [Library archiver flags of bigdft])
  AC_SUBST(ARFLAGS_BIGDFT)
  if test -z "${ARFLAGS_BIGDFT}"; then
    ARFLAGS_BIGDFT="${ARFLAGS}"
    afb_bigdft_arflags_custom="no"
  else
    afb_bigdft_custom="yes"
    afb_bigdft_arflags_custom="yes"
  fi

  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the BIGDFT fallback])
  AC_MSG_RESULT([${enable_bigdft}])
  if test "${enable_bigdft}" = "yes"; then

    dnl Check for dependencies
    if test "${afb_linalg_ok}" = "no"; then
      AC_MSG_ERROR([BIGDFT depends on broken LINALG
        Solution: disable BIGDFT or fix LINALG])
    fi
    if test "${afb_netcdf4_fortran_ok}" = "no"; then
      AC_MSG_ERROR([BIGDFT depends on broken NETCDF4_FORTRAN
        Solution: disable BIGDFT or fix NETCDF4_FORTRAN])
    fi
    if test "${afb_libxc_ok}" = "no"; then
      AC_MSG_ERROR([BIGDFT depends on broken LIBXC
        Solution: disable BIGDFT or fix LIBXC])
    fi
    if test "${afb_yaml_ok}" = "no"; then
      AC_MSG_ERROR([BIGDFT depends on broken YAML
        Solution: disable BIGDFT or fix YAML])
    fi

    dnl Adjust build flags to the actual situation
    dnl Note: nothing to do for bigdft

    dnl Get the package
    for dl_url in LOCAL "http://forge.abinit.org/fallbacks/bigdft-abinit-1.7.1.28.tar.gz"; do
      if test "${tmp_tarball_ok}" = "no"; then
        if test "${dl_url}" != "LOCAL"; then
          rm -f "${afb_bigdft_tarball}"
          AC_MSG_NOTICE([downloading BIGDFT - this may take a while])
          ${afb_downloader} ${afb_dlopts} \
            "${afb_bigdft_tarball}" \
            "${dl_url}"
        fi
        if test -s "${afb_bigdft_tarball}"; then
          AFB_CHECK_MD5SUM([${afb_bigdft_tarball}],[276eecbe464f29c21ac0424f2cd1f7ff])
          case "${afb_md5_ok}" in
            yes)
              tmp_tarball_ok="yes"
            ;;
            unknown)
              tmp_tarball_ok="yes"
              AC_MSG_WARN([could not check integrity of bigdft-abinit-1.7.1.28 tarball])
              ;;
            no)
              AC_MSG_WARN([bigdft-abinit-1.7.1.28 tarball MD5 check failed])
              ;;
          esac
        fi
      fi
    done

    dnl Enable fallback support only if the download was successful
    if test "${tmp_tarball_ok}" = "yes"; then
      afb_bigdft_ok="yes"
      AFB_TRICKS_BIGDFT([${afb_fc_vendor}],[${afb_fc_version}])
    else
      afb_bigdft_ok="no"
      AC_MSG_ERROR([could not download BIGDFT fallback tarball
    Solution: disable support for BIGDFT or download the tarball
    manually to ${abinit_tardir}])
    fi

    dnl Warn user about broken packages
    if test "${afb_bigdft_ok}" != "yes"; then
      AC_MSG_WARN([BIGDFT is broken, which will prevent the build of all
                      its possible dependencies])
    fi

  fi

  dnl Inform Automake
  AM_CONDITIONAL([DO_BUILD_BIGDFT],[test "${enable_bigdft}" = "yes" -a "${afb_bigdft_ok}" = "yes"])
  AM_CONDITIONAL([DO_TEST_BIGDFT],[test "${enable_bigdft}" = "yes" -a "${afb_bigdft_ok}" = "yes"])

  dnl Substitutions
  AC_SUBST(afb_bigdft_ok)
  AC_SUBST(afb_bigdft_tarball)
]) # _AFB_SETUP_BIGDFT



# _AFB_SETUP_LIBPSML()
# --------------------
#
# Sets all variables needed to handle the LIBPSML fallback.
#
AC_DEFUN([_AFB_SETUP_LIBPSML],[
  dnl Initial setup
  afb_libpsml_bins=""
  afb_libpsml_incs=""
  afb_libpsml_libs=""
  afb_libpsml_custom="no"
  afb_libpsml_tricks="unknown"
  afb_libpsml_ok="unknown"
  afb_libpsml_tarball="${abinit_tardir}/libpsml-1.1.7.tar.gz"
  tmp_tarball_ok="no"
  unset with_libpsml_bins

  dnl Define variables needed to build the package
  libpsml_pkg_name="libpsml-1.1.7"
  AC_SUBST(libpsml_pkg_name)
  libpsml_pkg_inst="libpsml/1.1.7"
  AC_SUBST(libpsml_pkg_inst)
  libpsml_pkg_string="PSML library 1.1.7 (upstream release)"
  AC_SUBST(libpsml_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([libpsml],
    AC_HELP_STRING([--disable-libpsml],
      [Disable PSML library 1.1.7 (upstream release) support]))
  AC_SUBST(enable_libpsml)

  dnl Make sure all required options are set
  if test "${enable_libpsml}" = ""; then
    enable_libpsml="yes"
  fi

  dnl Define and set environment variables for the package
  AC_ARG_VAR([CFGFLAGS_LIBPSML],
    [Options to the configure script of libpsml])
  AC_SUBST(CFGFLAGS_LIBPSML)
  if test -z "${CFGFLAGS_LIBPSML}"; then
    CFGFLAGS_LIBPSML="${CFGFLAGS}"
    afb_libpsml_cfgflags_custom="no"
  else
    afb_libpsml_custom="yes"
    afb_libpsml_cfgflags_custom="yes"
  fi
  unset CPPFLAGS_LIBPSML
  unset CFLAGS_LIBPSML
  unset XPPFLAGS_LIBPSML
  unset CXXFLAGS_LIBPSML
  AC_ARG_VAR([FPPFLAGS_LIBPSML],
    [Fortran preprocessor flags of libpsml])
  AC_SUBST(FPPFLAGS_LIBPSML)
  if test -z "${FPPFLAGS_LIBPSML}"; then
    FPPFLAGS_LIBPSML="${FPPFLAGS}"
    afb_libpsml_fppflags_custom="no"
  else
    afb_libpsml_custom="yes"
    afb_libpsml_fppflags_custom="yes"
  fi
  AC_ARG_VAR([FCFLAGS_LIBPSML],
    [Fortran flags of libpsml])
  AC_SUBST(FCFLAGS_LIBPSML)
  if test -z "${FCFLAGS_LIBPSML}"; then
    FCFLAGS_LIBPSML="${FCFLAGS}"
    afb_libpsml_fcflags_custom="no"
  else
    afb_libpsml_custom="yes"
    afb_libpsml_fcflags_custom="yes"
  fi
  AC_ARG_VAR([LDFLAGS_LIBPSML],
    [Link flags of libpsml])
  AC_SUBST(LDFLAGS_LIBPSML)
  if test -z "${LDFLAGS_LIBPSML}"; then
    LDFLAGS_LIBPSML="${LDFLAGS}"
    afb_libpsml_ldflags_custom="no"
  else
    afb_libpsml_custom="yes"
    afb_libpsml_ldflags_custom="yes"
  fi
  AC_ARG_VAR([LIBS_LIBPSML],
    [Additional linker libraries of libpsml])
  AC_SUBST(LIBS_LIBPSML)
  if test -z "${LIBS_LIBPSML}"; then
    LIBS_LIBPSML="${LIBS}"
    afb_libpsml_libs_custom="no"
  else
    afb_libpsml_custom="yes"
    afb_libpsml_libs_custom="yes"
  fi
  AC_ARG_VAR([ARFLAGS_LIBPSML],
    [Library archiver flags of libpsml])
  AC_SUBST(ARFLAGS_LIBPSML)
  if test -z "${ARFLAGS_LIBPSML}"; then
    ARFLAGS_LIBPSML="${ARFLAGS}"
    afb_libpsml_arflags_custom="no"
  else
    afb_libpsml_custom="yes"
    afb_libpsml_arflags_custom="yes"
  fi

  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the LIBPSML fallback])
  AC_MSG_RESULT([${enable_libpsml}])
  if test "${enable_libpsml}" = "yes"; then

    dnl Check for dependencies
    if test "${afb_libxc_ok}" = "no"; then
      AC_MSG_ERROR([LIBPSML depends on broken LIBXC
        Solution: disable LIBPSML or fix LIBXC])
    fi
    if test "${afb_xmlf90_ok}" = "no"; then
      AC_MSG_ERROR([LIBPSML depends on broken XMLF90
        Solution: disable LIBPSML or fix XMLF90])
    fi

    dnl Adjust build flags to the actual situation
    dnl Note: nothing to do for libpsml

    dnl Get the package
    for dl_url in LOCAL "https://launchpad.net/libpsml/trunk/1.1/+download/libpsml-1.1.7.tar.gz"; do
      if test "${tmp_tarball_ok}" = "no"; then
        if test "${dl_url}" != "LOCAL"; then
          rm -f "${afb_libpsml_tarball}"
          AC_MSG_NOTICE([downloading LIBPSML - this may take a while])
          ${afb_downloader} ${afb_dlopts} \
            "${afb_libpsml_tarball}" \
            "${dl_url}"
        fi
        if test -s "${afb_libpsml_tarball}"; then
          AFB_CHECK_MD5SUM([${afb_libpsml_tarball}],[3f3189d71ec1ce83e00e477ebbf6c516])
          case "${afb_md5_ok}" in
            yes)
              tmp_tarball_ok="yes"
            ;;
            unknown)
              tmp_tarball_ok="yes"
              AC_MSG_WARN([could not check integrity of libpsml-1.1.7 tarball])
              ;;
            no)
              AC_MSG_WARN([libpsml-1.1.7 tarball MD5 check failed])
              ;;
          esac
        fi
      fi
    done

    dnl Enable fallback support only if the download was successful
    if test "${tmp_tarball_ok}" = "yes"; then
      afb_libpsml_ok="yes"
      AFB_TRICKS_LIBPSML([${afb_fc_vendor}],[${afb_fc_version}])
    else
      afb_libpsml_ok="no"
      AC_MSG_ERROR([could not download LIBPSML fallback tarball
    Solution: disable support for LIBPSML or download the tarball
    manually to ${abinit_tardir}])
    fi

    dnl Warn user about broken packages
    if test "${afb_libpsml_ok}" != "yes"; then
      AC_MSG_WARN([LIBPSML is broken, which will prevent the build of all
                      its possible dependencies])
    fi

  fi

  dnl Inform Automake
  AM_CONDITIONAL([DO_BUILD_LIBPSML],[test "${enable_libpsml}" = "yes" -a "${afb_libpsml_ok}" = "yes"])
  AM_CONDITIONAL([DO_TEST_LIBPSML],[test "${enable_libpsml}" = "yes" -a "${afb_libpsml_ok}" = "yes"])

  dnl Substitutions
  AC_SUBST(afb_libpsml_ok)
  AC_SUBST(afb_libpsml_tarball)
]) # _AFB_SETUP_LIBPSML



# _AFB_SETUP_LIBXC()
# ------------------
#
# Sets all variables needed to handle the LIBXC fallback.
#
AC_DEFUN([_AFB_SETUP_LIBXC],[
  dnl Initial setup
  afb_libxc_bins=""
  afb_libxc_incs=""
  afb_libxc_libs=""
  afb_libxc_custom="no"
  afb_libxc_tricks="unknown"
  afb_libxc_ok="unknown"
  afb_libxc_tarball="${abinit_tardir}/libxc-4.2.3.tar.gz"
  tmp_tarball_ok="no"
  unset with_libxc_bins

  dnl Define variables needed to build the package
  libxc_pkg_name="libxc-4.2.3"
  AC_SUBST(libxc_pkg_name)
  libxc_pkg_inst="libxc/4.2.3"
  AC_SUBST(libxc_pkg_inst)
  libxc_pkg_string="LibXC library 4.2.3 (upstream release)"
  AC_SUBST(libxc_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([libxc],
    AC_HELP_STRING([--disable-libxc],
      [Disable LibXC library 4.2.3 (upstream release) support]))
  AC_SUBST(enable_libxc)  AC_ARG_WITH([libxc-incs],
    AC_HELP_STRING([--with-libxc-incs],
      [Include flags for an external libxc]))
  AC_SUBST(with_libxc_incs)
  AC_ARG_WITH([libxc-libs],
    AC_HELP_STRING([--with-libxc-libs],
      [Library flags for an external libxc]))
  AC_SUBST(with_libxc_libs)
  if test "${enable_libxc}" = ""; then
    if test "0" = "1" -o \
            "${with_libxc_incs}" != "" -o \
            "${with_libxc_libs}" != ""; then
      enable_libxc="no"
    fi
  fi
  if test "${enable_libxc}" = "yes"; then
    if test "1" = "1" -a \
            "${with_libxc_incs}" = "" -a \
            "${with_libxc_libs}" = ""; then
      AC_MSG_NOTICE([options for libxc are consistent])
    else
      AC_MSG_ERROR([inconsistent options for libxc!
        use --enable-libxc or --with-libxc-*, not both])
    fi
  fi

  dnl Make sure all required options are set
  if test "${enable_libxc}" = ""; then
    enable_libxc="yes"
  fi

  dnl Define and set environment variables for the package
  AC_ARG_VAR([CFGFLAGS_LIBXC],
    [Options to the configure script of libxc])
  AC_SUBST(CFGFLAGS_LIBXC)
  if test -z "${CFGFLAGS_LIBXC}"; then
    CFGFLAGS_LIBXC="${CFGFLAGS}"
    afb_libxc_cfgflags_custom="no"
  else
    afb_libxc_custom="yes"
    afb_libxc_cfgflags_custom="yes"
  fi
  AC_ARG_VAR([CPPFLAGS_LIBXC],
    [C preprocessor flags of libxc])
  AC_SUBST(CPPFLAGS_LIBXC)
  if test -z "${CPPFLAGS_LIBXC}"; then
    CPPFLAGS_LIBXC="${CPPFLAGS}"
    afb_libxc_cppflags_custom="no"
  else
    afb_libxc_custom="yes"
    afb_libxc_cppflags_custom="yes"
  fi
  AC_ARG_VAR([CFLAGS_LIBXC],
    [C flags of libxc])
  AC_SUBST(CFLAGS_LIBXC)
  if test -z "${CFLAGS_LIBXC}"; then
    CFLAGS_LIBXC="${CFLAGS}"
    afb_libxc_cflags_custom="no"
  else
    afb_libxc_custom="yes"
    afb_libxc_cflags_custom="yes"
  fi
  unset XPPFLAGS_LIBXC
  unset CXXFLAGS_LIBXC
  AC_ARG_VAR([FPPFLAGS_LIBXC],
    [Fortran preprocessor flags of libxc])
  AC_SUBST(FPPFLAGS_LIBXC)
  if test -z "${FPPFLAGS_LIBXC}"; then
    FPPFLAGS_LIBXC="${FPPFLAGS}"
    afb_libxc_fppflags_custom="no"
  else
    afb_libxc_custom="yes"
    afb_libxc_fppflags_custom="yes"
  fi
  AC_ARG_VAR([FCFLAGS_LIBXC],
    [Fortran flags of libxc])
  AC_SUBST(FCFLAGS_LIBXC)
  if test -z "${FCFLAGS_LIBXC}"; then
    FCFLAGS_LIBXC="${FCFLAGS}"
    afb_libxc_fcflags_custom="no"
  else
    afb_libxc_custom="yes"
    afb_libxc_fcflags_custom="yes"
  fi
  AC_ARG_VAR([LDFLAGS_LIBXC],
    [Link flags of libxc])
  AC_SUBST(LDFLAGS_LIBXC)
  if test -z "${LDFLAGS_LIBXC}"; then
    LDFLAGS_LIBXC="${LDFLAGS}"
    afb_libxc_ldflags_custom="no"
  else
    afb_libxc_custom="yes"
    afb_libxc_ldflags_custom="yes"
  fi
  AC_ARG_VAR([LIBS_LIBXC],
    [Additional linker libraries of libxc])
  AC_SUBST(LIBS_LIBXC)
  if test -z "${LIBS_LIBXC}"; then
    LIBS_LIBXC="${LIBS}"
    afb_libxc_libs_custom="no"
  else
    afb_libxc_custom="yes"
    afb_libxc_libs_custom="yes"
  fi
  AC_ARG_VAR([ARFLAGS_LIBXC],
    [Library archiver flags of libxc])
  AC_SUBST(ARFLAGS_LIBXC)
  if test -z "${ARFLAGS_LIBXC}"; then
    ARFLAGS_LIBXC="${ARFLAGS}"
    afb_libxc_arflags_custom="no"
  else
    afb_libxc_custom="yes"
    afb_libxc_arflags_custom="yes"
  fi

  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the LIBXC fallback])
  AC_MSG_RESULT([${enable_libxc}])
  if test "${enable_libxc}" = "yes"; then

    dnl Check for dependencies

    dnl Adjust build flags to the actual situation
    dnl Note: nothing to do for libxc

    dnl Get the package
    for dl_url in LOCAL "http://www.tddft.org/programs/octopus/down.php?file=libxc/4.2.3/libxc-4.2.3.tar.gz" "http://forge.abinit.org/fallbacks/libxc-4.2.3.tar.gz"; do
      if test "${tmp_tarball_ok}" = "no"; then
        if test "${dl_url}" != "LOCAL"; then
          rm -f "${afb_libxc_tarball}"
          AC_MSG_NOTICE([downloading LIBXC - this may take a while])
          ${afb_downloader} ${afb_dlopts} \
            "${afb_libxc_tarball}" \
            "${dl_url}"
        fi
        if test -s "${afb_libxc_tarball}"; then
          AFB_CHECK_MD5SUM([${afb_libxc_tarball}],[6176ac7edf234425d973903f82199350])
          case "${afb_md5_ok}" in
            yes)
              tmp_tarball_ok="yes"
            ;;
            unknown)
              tmp_tarball_ok="yes"
              AC_MSG_WARN([could not check integrity of libxc-4.2.3 tarball])
              ;;
            no)
              AC_MSG_WARN([libxc-4.2.3 tarball MD5 check failed])
              ;;
          esac
        fi
      fi
    done

    dnl Enable fallback support only if the download was successful
    if test "${tmp_tarball_ok}" = "yes"; then
      afb_libxc_ok="yes"
      afb_libxc_incs="-I\$(prefix)/libxc/4.2.3/include"
      afb_libxc_libs="-L\$(prefix)/libxc/4.2.3/lib -lxc"
      AFB_TRICKS_LIBXC([${afb_fc_vendor}],[${afb_fc_version}])
    else
      afb_libxc_ok="no"
      AC_MSG_ERROR([could not download LIBXC fallback tarball
    Solution: disable support for LIBXC or download the tarball
    manually to ${abinit_tardir}])
    fi

    dnl Warn user about broken packages
    if test "${afb_libxc_ok}" != "yes"; then
      AC_MSG_WARN([LIBXC is broken, which will prevent the build of all
                      its possible dependencies])
    fi

  else

    dnl Check whether the external package works
    afb_libxc_incs="${with_libxc_incs}"
    afb_libxc_libs="${with_libxc_libs}"
    AFB_CHECK_LIBXC(4,2,2)
    afb_libxc_ok="${afb_libxc_ext_ok}"
  fi

  dnl Inform Automake
  AM_CONDITIONAL([DO_BUILD_LIBXC],[test "${enable_libxc}" = "yes" -a "${afb_libxc_ok}" = "yes"])
  AM_CONDITIONAL([DO_TEST_LIBXC],[test "${enable_libxc}" = "yes" -a "${afb_libxc_ok}" = "yes"])

  dnl Substitutions
  AC_SUBST(afb_libxc_ok)
  AC_SUBST(afb_libxc_tarball)
  AC_SUBST(afb_libxc_incs)
  AC_SUBST(afb_libxc_libs)
]) # _AFB_SETUP_LIBXC



# _AFB_SETUP_LINALG()
# -------------------
#
# Sets all variables needed to handle the LINALG fallback.
#
AC_DEFUN([_AFB_SETUP_LINALG],[
  dnl Initial setup
  afb_linalg_bins=""
  afb_linalg_incs=""
  afb_linalg_libs=""
  afb_linalg_custom="no"
  afb_linalg_tricks="unknown"
  afb_linalg_ok="unknown"
  afb_linalg_tarball="${abinit_tardir}/lapack-abinit_6.10.tar.gz"
  tmp_tarball_ok="no"
  unset with_linalg_bins

  dnl Define variables needed to build the package
  linalg_pkg_name="lapack-abinit_6.10"
  AC_SUBST(linalg_pkg_name)
  linalg_pkg_inst="linalg/lapack-abinit_6.10"
  AC_SUBST(linalg_pkg_inst)
  linalg_pkg_string="Oldish BLAS/LAPACK implementation customized for Abinit"
  AC_SUBST(linalg_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([linalg],
    AC_HELP_STRING([--disable-linalg],
      [Disable Oldish BLAS/LAPACK implementation customized for Abinit support]))
  AC_SUBST(enable_linalg)  AC_ARG_WITH([linalg-incs],
    AC_HELP_STRING([--with-linalg-incs],
      [Include flags for an external linalg]))
  AC_SUBST(with_linalg_incs)
  AC_ARG_WITH([linalg-libs],
    AC_HELP_STRING([--with-linalg-libs],
      [Library flags for an external linalg]))
  AC_SUBST(with_linalg_libs)
  if test "${enable_linalg}" = ""; then
    if test "0" = "1" -o \
            "${with_linalg_incs}" != "" -o \
            "${with_linalg_libs}" != ""; then
      enable_linalg="no"
    fi
  fi
  if test "${enable_linalg}" = "yes"; then
    if test "1" = "1" -a \
            "${with_linalg_incs}" = "" -a \
            "${with_linalg_libs}" = ""; then
      AC_MSG_NOTICE([options for linalg are consistent])
    else
      AC_MSG_ERROR([inconsistent options for linalg!
        use --enable-linalg or --with-linalg-*, not both])
    fi
  fi

  dnl Make sure all required options are set
  if test "${enable_linalg}" = ""; then
    enable_linalg="yes"
  fi

  dnl Define and set environment variables for the package
  AC_ARG_VAR([CFGFLAGS_LINALG],
    [Options to the configure script of linalg])
  AC_SUBST(CFGFLAGS_LINALG)
  if test -z "${CFGFLAGS_LINALG}"; then
    CFGFLAGS_LINALG="${CFGFLAGS}"
    afb_linalg_cfgflags_custom="no"
  else
    afb_linalg_custom="yes"
    afb_linalg_cfgflags_custom="yes"
  fi
  unset CPPFLAGS_LINALG
  unset CFLAGS_LINALG
  unset XPPFLAGS_LINALG
  unset CXXFLAGS_LINALG
  AC_ARG_VAR([FPPFLAGS_LINALG],
    [Fortran preprocessor flags of linalg])
  AC_SUBST(FPPFLAGS_LINALG)
  if test -z "${FPPFLAGS_LINALG}"; then
    FPPFLAGS_LINALG="${FPPFLAGS}"
    afb_linalg_fppflags_custom="no"
  else
    afb_linalg_custom="yes"
    afb_linalg_fppflags_custom="yes"
  fi
  AC_ARG_VAR([FCFLAGS_LINALG],
    [Fortran flags of linalg])
  AC_SUBST(FCFLAGS_LINALG)
  if test -z "${FCFLAGS_LINALG}"; then
    FCFLAGS_LINALG="${FCFLAGS}"
    afb_linalg_fcflags_custom="no"
  else
    afb_linalg_custom="yes"
    afb_linalg_fcflags_custom="yes"
  fi
  AC_ARG_VAR([LDFLAGS_LINALG],
    [Link flags of linalg])
  AC_SUBST(LDFLAGS_LINALG)
  if test -z "${LDFLAGS_LINALG}"; then
    LDFLAGS_LINALG="${LDFLAGS}"
    afb_linalg_ldflags_custom="no"
  else
    afb_linalg_custom="yes"
    afb_linalg_ldflags_custom="yes"
  fi
  AC_ARG_VAR([LIBS_LINALG],
    [Additional linker libraries of linalg])
  AC_SUBST(LIBS_LINALG)
  if test -z "${LIBS_LINALG}"; then
    LIBS_LINALG="${LIBS}"
    afb_linalg_libs_custom="no"
  else
    afb_linalg_custom="yes"
    afb_linalg_libs_custom="yes"
  fi
  AC_ARG_VAR([ARFLAGS_LINALG],
    [Library archiver flags of linalg])
  AC_SUBST(ARFLAGS_LINALG)
  if test -z "${ARFLAGS_LINALG}"; then
    ARFLAGS_LINALG="${ARFLAGS}"
    afb_linalg_arflags_custom="no"
  else
    afb_linalg_custom="yes"
    afb_linalg_arflags_custom="yes"
  fi

  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the LINALG fallback])
  AC_MSG_RESULT([${enable_linalg}])
  if test "${enable_linalg}" = "yes"; then

    dnl Check for dependencies

    dnl Adjust build flags to the actual situation
    dnl Note: nothing to do for linalg

    dnl Get the package
    for dl_url in LOCAL "http://forge.abinit.org/fallbacks/lapack-abinit_6.10.tar.gz" "http://ypouillon.free.fr/abinit/lapack-abinit_6.10.tar.gz"; do
      if test "${tmp_tarball_ok}" = "no"; then
        if test "${dl_url}" != "LOCAL"; then
          rm -f "${afb_linalg_tarball}"
          AC_MSG_NOTICE([downloading LINALG - this may take a while])
          ${afb_downloader} ${afb_dlopts} \
            "${afb_linalg_tarball}" \
            "${dl_url}"
        fi
        if test -s "${afb_linalg_tarball}"; then
          AFB_CHECK_MD5SUM([${afb_linalg_tarball}],[12169d5c702ccc63117f4591cd3f1225])
          case "${afb_md5_ok}" in
            yes)
              tmp_tarball_ok="yes"
            ;;
            unknown)
              tmp_tarball_ok="yes"
              AC_MSG_WARN([could not check integrity of lapack-abinit_6.10 tarball])
              ;;
            no)
              AC_MSG_WARN([lapack-abinit_6.10 tarball MD5 check failed])
              ;;
          esac
        fi
      fi
    done

    dnl Enable fallback support only if the download was successful
    if test "${tmp_tarball_ok}" = "yes"; then
      afb_linalg_ok="yes"
      afb_linalg_incs="-I\$(prefix)/linalg/lapack-abinit_6.10/include"
      afb_linalg_libs="-L\$(prefix)/linalg/lapack-abinit_6.10/lib -llapack -lblas"
      AFB_TRICKS_LINALG([${afb_fc_vendor}],[${afb_fc_version}])
    else
      afb_linalg_ok="no"
      AC_MSG_ERROR([could not download LINALG fallback tarball
    Solution: disable support for LINALG or download the tarball
    manually to ${abinit_tardir}])
    fi

    dnl Warn user about broken packages
    if test "${afb_linalg_ok}" != "yes"; then
      AC_MSG_WARN([LINALG is broken, which will prevent the build of all
                      its possible dependencies])
    fi

  else

    dnl Check whether the external package works
    afb_linalg_incs="${with_linalg_incs}"
    afb_linalg_libs="${with_linalg_libs}"
    AFB_CHECK_LINALG
    afb_linalg_ok="${afb_linalg_ext_ok}"
  fi

  dnl Inform Automake
  AM_CONDITIONAL([DO_BUILD_LINALG],[test "${enable_linalg}" = "yes" -a "${afb_linalg_ok}" = "yes"])
  AM_CONDITIONAL([DO_TEST_LINALG],[test "${enable_linalg}" = "yes" -a "${afb_linalg_ok}" = "yes"])

  dnl Substitutions
  AC_SUBST(afb_linalg_ok)
  AC_SUBST(afb_linalg_tarball)
  AC_SUBST(afb_linalg_incs)
  AC_SUBST(afb_linalg_libs)
]) # _AFB_SETUP_LINALG



# _AFB_SETUP_NETCDF4()
# --------------------
#
# Sets all variables needed to handle the NETCDF4 fallback.
#
AC_DEFUN([_AFB_SETUP_NETCDF4],[
  dnl Initial setup
  afb_netcdf4_bins=""
  afb_netcdf4_incs=""
  afb_netcdf4_libs=""
  afb_netcdf4_custom="no"
  afb_netcdf4_tricks="unknown"
  afb_netcdf4_ok="unknown"
  afb_netcdf4_tarball="${abinit_tardir}/netcdf-4.4.1.1.tar.gz"
  tmp_tarball_ok="no"

  dnl Define variables needed to build the package
  netcdf4_pkg_name="netcdf-4.4.1.1"
  AC_SUBST(netcdf4_pkg_name)
  netcdf4_pkg_inst="netcdf4/4.4.1.1"
  AC_SUBST(netcdf4_pkg_inst)
  netcdf4_pkg_string="NetCDF library 4.4.1.1 (upstream release)"
  AC_SUBST(netcdf4_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([netcdf4],
    AC_HELP_STRING([--disable-netcdf4],
      [Disable NetCDF library 4.4.1.1 (upstream release) support]))
  AC_SUBST(enable_netcdf4)
    AC_ARG_WITH([netcdf4-bins],
    AC_HELP_STRING([--with-netcdf4-bins],
      [Path to external netcdf4 executables]))
  AC_SUBST(with_netcdf4_bins)
  AC_ARG_WITH([netcdf4-incs],
    AC_HELP_STRING([--with-netcdf4-incs],
      [Include flags for an external netcdf4]))
  AC_SUBST(with_netcdf4_incs)
  AC_ARG_WITH([netcdf4-libs],
    AC_HELP_STRING([--with-netcdf4-libs],
      [Library flags for an external netcdf4]))
  AC_SUBST(with_netcdf4_libs)
  if test "${enable_netcdf4}" = ""; then
    if test "0" = "1" -o \
            "${with_netcdf4_bins}" != "" -o \
            "${with_netcdf4_incs}" != "" -o \
            "${with_netcdf4_libs}" != ""; then
      enable_netcdf4="no"
    fi
  fi
  if test "${enable_netcdf4}" = "yes"; then
    if test "1" = "1" -a \
            "${with_netcdf4_bins}" = "" -a \
            "${with_netcdf4_incs}" = "" -a \
            "${with_netcdf4_libs}" = ""; then
      AC_MSG_NOTICE([options for netcdf4 are consistent])
    else
      AC_MSG_ERROR([inconsistent options for netcdf4!
        use --enable-netcdf4 or --with-netcdf4-*, not both])
    fi
  fi

  dnl Make sure all required options are set
  if test "${enable_netcdf4}" = ""; then
    enable_netcdf4="yes"
  fi

  dnl Define and set environment variables for the package
  AC_ARG_VAR([CFGFLAGS_NETCDF4],
    [Options to the configure script of netcdf4])
  AC_SUBST(CFGFLAGS_NETCDF4)
  if test -z "${CFGFLAGS_NETCDF4}"; then
    CFGFLAGS_NETCDF4="${CFGFLAGS}"
    afb_netcdf4_cfgflags_custom="no"
  else
    afb_netcdf4_custom="yes"
    afb_netcdf4_cfgflags_custom="yes"
  fi
  AC_ARG_VAR([CPPFLAGS_NETCDF4],
    [C preprocessor flags of netcdf4])
  AC_SUBST(CPPFLAGS_NETCDF4)
  if test -z "${CPPFLAGS_NETCDF4}"; then
    CPPFLAGS_NETCDF4="${CPPFLAGS}"
    afb_netcdf4_cppflags_custom="no"
  else
    afb_netcdf4_custom="yes"
    afb_netcdf4_cppflags_custom="yes"
  fi
  AC_ARG_VAR([CFLAGS_NETCDF4],
    [C flags of netcdf4])
  AC_SUBST(CFLAGS_NETCDF4)
  if test -z "${CFLAGS_NETCDF4}"; then
    CFLAGS_NETCDF4="${CFLAGS}"
    afb_netcdf4_cflags_custom="no"
  else
    afb_netcdf4_custom="yes"
    afb_netcdf4_cflags_custom="yes"
  fi
  unset XPPFLAGS_NETCDF4
  unset CXXFLAGS_NETCDF4
  unset FPPFLAGS_NETCDF4
  unset FCFLAGS_NETCDF4
  AC_ARG_VAR([LDFLAGS_NETCDF4],
    [Link flags of netcdf4])
  AC_SUBST(LDFLAGS_NETCDF4)
  if test -z "${LDFLAGS_NETCDF4}"; then
    LDFLAGS_NETCDF4="${LDFLAGS}"
    afb_netcdf4_ldflags_custom="no"
  else
    afb_netcdf4_custom="yes"
    afb_netcdf4_ldflags_custom="yes"
  fi
  AC_ARG_VAR([LIBS_NETCDF4],
    [Additional linker libraries of netcdf4])
  AC_SUBST(LIBS_NETCDF4)
  if test -z "${LIBS_NETCDF4}"; then
    LIBS_NETCDF4="${LIBS}"
    afb_netcdf4_libs_custom="no"
  else
    afb_netcdf4_custom="yes"
    afb_netcdf4_libs_custom="yes"
  fi
  AC_ARG_VAR([ARFLAGS_NETCDF4],
    [Library archiver flags of netcdf4])
  AC_SUBST(ARFLAGS_NETCDF4)
  if test -z "${ARFLAGS_NETCDF4}"; then
    ARFLAGS_NETCDF4="${ARFLAGS}"
    afb_netcdf4_arflags_custom="no"
  else
    afb_netcdf4_custom="yes"
    afb_netcdf4_arflags_custom="yes"
  fi

  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the NETCDF4 fallback])
  AC_MSG_RESULT([${enable_netcdf4}])
  if test "${enable_netcdf4}" = "yes"; then

    dnl Check for dependencies

    dnl Adjust build flags to the actual situation
    dnl Note: nothing to do for netcdf4

    dnl Get the package
    for dl_url in LOCAL "ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-4.4.1.1.tar.gz" "http://forge.abinit.org/fallbacks/netcdf-4.4.1.1.tar.gz"; do
      if test "${tmp_tarball_ok}" = "no"; then
        if test "${dl_url}" != "LOCAL"; then
          rm -f "${afb_netcdf4_tarball}"
          AC_MSG_NOTICE([downloading NETCDF4 - this may take a while])
          ${afb_downloader} ${afb_dlopts} \
            "${afb_netcdf4_tarball}" \
            "${dl_url}"
        fi
        if test -s "${afb_netcdf4_tarball}"; then
          AFB_CHECK_MD5SUM([${afb_netcdf4_tarball}],[503a2d6b6035d116ed53b1d80c811bda])
          case "${afb_md5_ok}" in
            yes)
              tmp_tarball_ok="yes"
            ;;
            unknown)
              tmp_tarball_ok="yes"
              AC_MSG_WARN([could not check integrity of netcdf-4.4.1.1 tarball])
              ;;
            no)
              AC_MSG_WARN([netcdf-4.4.1.1 tarball MD5 check failed])
              ;;
          esac
        fi
      fi
    done

    dnl Enable fallback support only if the download was successful
    if test "${tmp_tarball_ok}" = "yes"; then
      afb_netcdf4_ok="yes"
      afb_netcdf4_bins="\$(prefix)/netcdf4/4.4.1.1/bin"
      afb_netcdf4_incs="-I\$(prefix)/netcdf4/4.4.1.1/include"
      afb_netcdf4_libs="-L\$(prefix)/netcdf4/4.4.1.1/lib -lnetcdf"
      AFB_TRICKS_NETCDF4([${afb_fc_vendor}],[${afb_fc_version}])
    else
      afb_netcdf4_ok="no"
      AC_MSG_ERROR([could not download NETCDF4 fallback tarball
    Solution: disable support for NETCDF4 or download the tarball
    manually to ${abinit_tardir}])
    fi

    dnl Warn user about broken packages
    if test "${afb_netcdf4_ok}" != "yes"; then
      AC_MSG_WARN([NETCDF4 is broken, which will prevent the build of all
                      its possible dependencies])
    fi

  else

    dnl Check whether the external package works
    afb_netcdf4_bins="${with_netcdf4_bins}"
    afb_netcdf4_incs="${with_netcdf4_incs}"
    afb_netcdf4_libs="${with_netcdf4_libs}"
    AFB_CHECK_NETCDF4
    afb_netcdf4_ok="${afb_netcdf4_ext_ok}"
  fi

  dnl Inform Automake
  AM_CONDITIONAL([DO_BUILD_NETCDF4],[test "${enable_netcdf4}" = "yes" -a "${afb_netcdf4_ok}" = "yes"])
  AM_CONDITIONAL([DO_TEST_NETCDF4],[test "${enable_netcdf4}" = "yes" -a "${afb_netcdf4_ok}" = "yes"])

  dnl Substitutions
  AC_SUBST(afb_netcdf4_ok)
  AC_SUBST(afb_netcdf4_tarball)
  AC_SUBST(afb_netcdf4_bins)
  AC_SUBST(afb_netcdf4_incs)
  AC_SUBST(afb_netcdf4_libs)
]) # _AFB_SETUP_NETCDF4



# _AFB_SETUP_NETCDF4_FORTRAN()
# ----------------------------
#
# Sets all variables needed to handle the NETCDF4_FORTRAN fallback.
#
AC_DEFUN([_AFB_SETUP_NETCDF4_FORTRAN],[
  dnl Initial setup
  afb_netcdf4_fortran_bins=""
  afb_netcdf4_fortran_incs=""
  afb_netcdf4_fortran_libs=""
  afb_netcdf4_fortran_custom="no"
  afb_netcdf4_fortran_tricks="unknown"
  afb_netcdf4_fortran_ok="unknown"
  afb_netcdf4_fortran_tarball="${abinit_tardir}/netcdf-fortran-4.4.4.tar.gz"
  tmp_tarball_ok="no"
  unset with_netcdf4_fortran_bins

  dnl Define variables needed to build the package
  netcdf4_fortran_pkg_name="netcdf-fortran-4.4.4"
  AC_SUBST(netcdf4_fortran_pkg_name)
  netcdf4_fortran_pkg_inst="netcdf4_fortran/4.4.4"
  AC_SUBST(netcdf4_fortran_pkg_inst)
  netcdf4_fortran_pkg_string="NetCDF Fortran library 4.4.4 (upstream release)"
  AC_SUBST(netcdf4_fortran_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([netcdf4-fortran],
    AC_HELP_STRING([--disable-netcdf4-fortran],
      [Disable NetCDF Fortran library 4.4.4 (upstream release) support]))
  AC_SUBST(enable_netcdf4_fortran)  AC_ARG_WITH([netcdf4-fortran-incs],
    AC_HELP_STRING([--with-netcdf4-fortran-incs],
      [Include flags for an external netcdf4_fortran]))
  AC_SUBST(with_netcdf4_fortran_incs)
  AC_ARG_WITH([netcdf4-fortran-libs],
    AC_HELP_STRING([--with-netcdf4-fortran-libs],
      [Library flags for an external netcdf4_fortran]))
  AC_SUBST(with_netcdf4_fortran_libs)
  if test "${enable_netcdf4_fortran}" = ""; then
    if test "0" = "1" -o \
            "${with_netcdf4_fortran_incs}" != "" -o \
            "${with_netcdf4_fortran_libs}" != ""; then
      enable_netcdf4_fortran="no"
    fi
  fi
  if test "${enable_netcdf4_fortran}" = "yes"; then
    if test "1" = "1" -a \
            "${with_netcdf4_fortran_incs}" = "" -a \
            "${with_netcdf4_fortran_libs}" = ""; then
      AC_MSG_NOTICE([options for netcdf4_fortran are consistent])
    else
      AC_MSG_ERROR([inconsistent options for netcdf4_fortran!
        use --enable-netcdf4_fortran or --with-netcdf4_fortran-*, not both])
    fi
  fi

  dnl Make sure all required options are set
  if test "${enable_netcdf4_fortran}" = ""; then
    enable_netcdf4_fortran="yes"
  fi

  dnl Define and set environment variables for the package
  AC_ARG_VAR([CFGFLAGS_NETCDF4_FORTRAN],
    [Options to the configure script of netcdf4_fortran])
  AC_SUBST(CFGFLAGS_NETCDF4_FORTRAN)
  if test -z "${CFGFLAGS_NETCDF4_FORTRAN}"; then
    CFGFLAGS_NETCDF4_FORTRAN="${CFGFLAGS}"
    afb_netcdf4_fortran_cfgflags_custom="no"
  else
    afb_netcdf4_fortran_custom="yes"
    afb_netcdf4_fortran_cfgflags_custom="yes"
  fi
  AC_ARG_VAR([CPPFLAGS_NETCDF4_FORTRAN],
    [C preprocessor flags of netcdf4_fortran])
  AC_SUBST(CPPFLAGS_NETCDF4_FORTRAN)
  if test -z "${CPPFLAGS_NETCDF4_FORTRAN}"; then
    CPPFLAGS_NETCDF4_FORTRAN="${CPPFLAGS}"
    afb_netcdf4_fortran_cppflags_custom="no"
  else
    afb_netcdf4_fortran_custom="yes"
    afb_netcdf4_fortran_cppflags_custom="yes"
  fi
  AC_ARG_VAR([CFLAGS_NETCDF4_FORTRAN],
    [C flags of netcdf4_fortran])
  AC_SUBST(CFLAGS_NETCDF4_FORTRAN)
  if test -z "${CFLAGS_NETCDF4_FORTRAN}"; then
    CFLAGS_NETCDF4_FORTRAN="${CFLAGS}"
    afb_netcdf4_fortran_cflags_custom="no"
  else
    afb_netcdf4_fortran_custom="yes"
    afb_netcdf4_fortran_cflags_custom="yes"
  fi
  unset XPPFLAGS_NETCDF4_FORTRAN
  unset CXXFLAGS_NETCDF4_FORTRAN
  AC_ARG_VAR([FPPFLAGS_NETCDF4_FORTRAN],
    [Fortran preprocessor flags of netcdf4_fortran])
  AC_SUBST(FPPFLAGS_NETCDF4_FORTRAN)
  if test -z "${FPPFLAGS_NETCDF4_FORTRAN}"; then
    FPPFLAGS_NETCDF4_FORTRAN="${FPPFLAGS}"
    afb_netcdf4_fortran_fppflags_custom="no"
  else
    afb_netcdf4_fortran_custom="yes"
    afb_netcdf4_fortran_fppflags_custom="yes"
  fi
  AC_ARG_VAR([FCFLAGS_NETCDF4_FORTRAN],
    [Fortran flags of netcdf4_fortran])
  AC_SUBST(FCFLAGS_NETCDF4_FORTRAN)
  if test -z "${FCFLAGS_NETCDF4_FORTRAN}"; then
    FCFLAGS_NETCDF4_FORTRAN="${FCFLAGS}"
    afb_netcdf4_fortran_fcflags_custom="no"
  else
    afb_netcdf4_fortran_custom="yes"
    afb_netcdf4_fortran_fcflags_custom="yes"
  fi
  AC_ARG_VAR([LDFLAGS_NETCDF4_FORTRAN],
    [Link flags of netcdf4_fortran])
  AC_SUBST(LDFLAGS_NETCDF4_FORTRAN)
  if test -z "${LDFLAGS_NETCDF4_FORTRAN}"; then
    LDFLAGS_NETCDF4_FORTRAN="${LDFLAGS}"
    afb_netcdf4_fortran_ldflags_custom="no"
  else
    afb_netcdf4_fortran_custom="yes"
    afb_netcdf4_fortran_ldflags_custom="yes"
  fi
  AC_ARG_VAR([LIBS_NETCDF4_FORTRAN],
    [Additional linker libraries of netcdf4_fortran])
  AC_SUBST(LIBS_NETCDF4_FORTRAN)
  if test -z "${LIBS_NETCDF4_FORTRAN}"; then
    LIBS_NETCDF4_FORTRAN="${LIBS}"
    afb_netcdf4_fortran_libs_custom="no"
  else
    afb_netcdf4_fortran_custom="yes"
    afb_netcdf4_fortran_libs_custom="yes"
  fi
  AC_ARG_VAR([ARFLAGS_NETCDF4_FORTRAN],
    [Library archiver flags of netcdf4_fortran])
  AC_SUBST(ARFLAGS_NETCDF4_FORTRAN)
  if test -z "${ARFLAGS_NETCDF4_FORTRAN}"; then
    ARFLAGS_NETCDF4_FORTRAN="${ARFLAGS}"
    afb_netcdf4_fortran_arflags_custom="no"
  else
    afb_netcdf4_fortran_custom="yes"
    afb_netcdf4_fortran_arflags_custom="yes"
  fi

  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the NETCDF4_FORTRAN fallback])
  AC_MSG_RESULT([${enable_netcdf4_fortran}])
  if test "${enable_netcdf4_fortran}" = "yes"; then

    dnl Check for dependencies
    if test "${afb_netcdf4_ok}" = "no"; then
      AC_MSG_ERROR([NETCDF4_FORTRAN depends on broken NETCDF4
        Solution: disable NETCDF4_FORTRAN or fix NETCDF4])
    fi

    dnl Adjust build flags to the actual situation
    dnl Note: nothing to do for netcdf4_fortran

    dnl Get the package
    for dl_url in LOCAL "ftp://ftp.unidata.ucar.edu/pub/netcdf/netcdf-fortran-4.4.4.tar.gz" "http://forge.abinit.org/fallbacks/netcdf-fortran-4.4.4.tar.gz"; do
      if test "${tmp_tarball_ok}" = "no"; then
        if test "${dl_url}" != "LOCAL"; then
          rm -f "${afb_netcdf4_fortran_tarball}"
          AC_MSG_NOTICE([downloading NETCDF4_FORTRAN - this may take a while])
          ${afb_downloader} ${afb_dlopts} \
            "${afb_netcdf4_fortran_tarball}" \
            "${dl_url}"
        fi
        if test -s "${afb_netcdf4_fortran_tarball}"; then
          AFB_CHECK_MD5SUM([${afb_netcdf4_fortran_tarball}],[e855c789cd72e1b8bc1354366bf6ac72])
          case "${afb_md5_ok}" in
            yes)
              tmp_tarball_ok="yes"
            ;;
            unknown)
              tmp_tarball_ok="yes"
              AC_MSG_WARN([could not check integrity of netcdf-fortran-4.4.4 tarball])
              ;;
            no)
              AC_MSG_WARN([netcdf-fortran-4.4.4 tarball MD5 check failed])
              ;;
          esac
        fi
      fi
    done

    dnl Enable fallback support only if the download was successful
    if test "${tmp_tarball_ok}" = "yes"; then
      afb_netcdf4_fortran_ok="yes"
      afb_netcdf4_fortran_incs="-I\$(prefix)/netcdf4_fortran/4.4.4/include"
      afb_netcdf4_fortran_libs="-L\$(prefix)/netcdf4_fortran/4.4.4/lib -lnetcdff"
      AFB_TRICKS_NETCDF4_FORTRAN([${afb_fc_vendor}],[${afb_fc_version}])
    else
      afb_netcdf4_fortran_ok="no"
      AC_MSG_ERROR([could not download NETCDF4_FORTRAN fallback tarball
    Solution: disable support for NETCDF4_FORTRAN or download the tarball
    manually to ${abinit_tardir}])
    fi

    dnl Warn user about broken packages
    if test "${afb_netcdf4_fortran_ok}" != "yes"; then
      AC_MSG_WARN([NETCDF4_FORTRAN is broken, which will prevent the build of all
                      its possible dependencies])
    fi

  else

    dnl Check whether the external package works
    afb_netcdf4_fortran_incs="${with_netcdf4_fortran_incs}"
    afb_netcdf4_fortran_libs="${with_netcdf4_fortran_libs}"
    AFB_CHECK_NETCDF4_FORTRAN
    afb_netcdf4_fortran_ok="${afb_netcdf4_fortran_ext_ok}"
  fi

  dnl Inform Automake
  AM_CONDITIONAL([DO_BUILD_NETCDF4_FORTRAN],[test "${enable_netcdf4_fortran}" = "yes" -a "${afb_netcdf4_fortran_ok}" = "yes"])
  AM_CONDITIONAL([DO_TEST_NETCDF4_FORTRAN],[test "${enable_netcdf4_fortran}" = "yes" -a "${afb_netcdf4_fortran_ok}" = "yes"])

  dnl Substitutions
  AC_SUBST(afb_netcdf4_fortran_ok)
  AC_SUBST(afb_netcdf4_fortran_tarball)
  AC_SUBST(afb_netcdf4_fortran_incs)
  AC_SUBST(afb_netcdf4_fortran_libs)
]) # _AFB_SETUP_NETCDF4_FORTRAN



# _AFB_SETUP_WANNIER90()
# ----------------------
#
# Sets all variables needed to handle the WANNIER90 fallback.
#
AC_DEFUN([_AFB_SETUP_WANNIER90],[
  dnl Initial setup
  afb_wannier90_bins=""
  afb_wannier90_incs=""
  afb_wannier90_libs=""
  afb_wannier90_custom="no"
  afb_wannier90_tricks="unknown"
  afb_wannier90_ok="unknown"
  afb_wannier90_tarball="${abinit_tardir}/wannier90-2.0.1.1.tar.gz"
  tmp_tarball_ok="no"
  unset with_wannier90_incs

  dnl Define variables needed to build the package
  wannier90_pkg_name="wannier90-2.0.1.1"
  AC_SUBST(wannier90_pkg_name)
  wannier90_pkg_inst="wannier90/2.0.1.1"
  AC_SUBST(wannier90_pkg_inst)
  wannier90_pkg_string="Wannier90 program 2.0.1.1 (special edition hacked by YP+MT)"
  AC_SUBST(wannier90_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([wannier90],
    AC_HELP_STRING([--disable-wannier90],
      [Disable Wannier90 program 2.0.1.1 (special edition hacked by YP+MT) support]))
  AC_SUBST(enable_wannier90)

  dnl Make sure all required options are set
  if test "${enable_wannier90}" = ""; then
    enable_wannier90="yes"
  fi

  dnl Define and set environment variables for the package
  AC_ARG_VAR([CFGFLAGS_WANNIER90],
    [Options to the configure script of wannier90])
  AC_SUBST(CFGFLAGS_WANNIER90)
  if test -z "${CFGFLAGS_WANNIER90}"; then
    CFGFLAGS_WANNIER90="${CFGFLAGS}"
    afb_wannier90_cfgflags_custom="no"
  else
    afb_wannier90_custom="yes"
    afb_wannier90_cfgflags_custom="yes"
  fi
  unset CPPFLAGS_WANNIER90
  unset CFLAGS_WANNIER90
  unset XPPFLAGS_WANNIER90
  unset CXXFLAGS_WANNIER90
  AC_ARG_VAR([FPPFLAGS_WANNIER90],
    [Fortran preprocessor flags of wannier90])
  AC_SUBST(FPPFLAGS_WANNIER90)
  if test -z "${FPPFLAGS_WANNIER90}"; then
    FPPFLAGS_WANNIER90="${FPPFLAGS}"
    afb_wannier90_fppflags_custom="no"
  else
    afb_wannier90_custom="yes"
    afb_wannier90_fppflags_custom="yes"
  fi
  AC_ARG_VAR([FCFLAGS_WANNIER90],
    [Fortran flags of wannier90])
  AC_SUBST(FCFLAGS_WANNIER90)
  if test -z "${FCFLAGS_WANNIER90}"; then
    FCFLAGS_WANNIER90="${FCFLAGS}"
    afb_wannier90_fcflags_custom="no"
  else
    afb_wannier90_custom="yes"
    afb_wannier90_fcflags_custom="yes"
  fi
  AC_ARG_VAR([LDFLAGS_WANNIER90],
    [Link flags of wannier90])
  AC_SUBST(LDFLAGS_WANNIER90)
  if test -z "${LDFLAGS_WANNIER90}"; then
    LDFLAGS_WANNIER90="${LDFLAGS}"
    afb_wannier90_ldflags_custom="no"
  else
    afb_wannier90_custom="yes"
    afb_wannier90_ldflags_custom="yes"
  fi
  AC_ARG_VAR([LIBS_WANNIER90],
    [Additional linker libraries of wannier90])
  AC_SUBST(LIBS_WANNIER90)
  if test -z "${LIBS_WANNIER90}"; then
    LIBS_WANNIER90="${LIBS}"
    afb_wannier90_libs_custom="no"
  else
    afb_wannier90_custom="yes"
    afb_wannier90_libs_custom="yes"
  fi
  AC_ARG_VAR([ARFLAGS_WANNIER90],
    [Library archiver flags of wannier90])
  AC_SUBST(ARFLAGS_WANNIER90)
  if test -z "${ARFLAGS_WANNIER90}"; then
    ARFLAGS_WANNIER90="${ARFLAGS}"
    afb_wannier90_arflags_custom="no"
  else
    afb_wannier90_custom="yes"
    afb_wannier90_arflags_custom="yes"
  fi

  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the WANNIER90 fallback])
  AC_MSG_RESULT([${enable_wannier90}])
  if test "${enable_wannier90}" = "yes"; then

    dnl Check for dependencies
    if test "${afb_linalg_ok}" = "no"; then
      AC_MSG_ERROR([WANNIER90 depends on broken LINALG
        Solution: disable WANNIER90 or fix LINALG])
    fi

    dnl Adjust build flags to the actual situation
    LIBS_WANNIER90="${afb_linalg_libs} ${LIBS_WANNIER90}"

    dnl Get the package
    for dl_url in LOCAL "https://launchpad.net/wannier90/2.0/2.0.1.1/+download/wannier90-2.0.1.1.tar.gz" "http://forge.abinit.org/fallbacks/wannier90-2.0.1.1.tar.gz"; do
      if test "${tmp_tarball_ok}" = "no"; then
        if test "${dl_url}" != "LOCAL"; then
          rm -f "${afb_wannier90_tarball}"
          AC_MSG_NOTICE([downloading WANNIER90 - this may take a while])
          ${afb_downloader} ${afb_dlopts} \
            "${afb_wannier90_tarball}" \
            "${dl_url}"
        fi
        if test -s "${afb_wannier90_tarball}"; then
          AFB_CHECK_MD5SUM([${afb_wannier90_tarball}],[a8b3819da1325d9dbdd2579761aa4265])
          case "${afb_md5_ok}" in
            yes)
              tmp_tarball_ok="yes"
            ;;
            unknown)
              tmp_tarball_ok="yes"
              AC_MSG_WARN([could not check integrity of wannier90-2.0.1.1 tarball])
              ;;
            no)
              AC_MSG_WARN([wannier90-2.0.1.1 tarball MD5 check failed])
              ;;
          esac
        fi
      fi
    done

    dnl Enable fallback support only if the download was successful
    if test "${tmp_tarball_ok}" = "yes"; then
      afb_wannier90_ok="yes"
      AFB_TRICKS_WANNIER90([${afb_fc_vendor}],[${afb_fc_version}])
    else
      afb_wannier90_ok="no"
      AC_MSG_ERROR([could not download WANNIER90 fallback tarball
    Solution: disable support for WANNIER90 or download the tarball
    manually to ${abinit_tardir}])
    fi

    dnl Warn user about broken packages
    if test "${afb_wannier90_ok}" != "yes"; then
      AC_MSG_WARN([WANNIER90 is broken, which will prevent the build of all
                      its possible dependencies])
    fi

  fi

  dnl Inform Automake
  AM_CONDITIONAL([DO_BUILD_WANNIER90],[test "${enable_wannier90}" = "yes" -a "${afb_wannier90_ok}" = "yes"])
  AM_CONDITIONAL([DO_TEST_WANNIER90],[test "${enable_wannier90}" = "yes" -a "${afb_wannier90_ok}" = "yes"])

  dnl Substitutions
  AC_SUBST(afb_wannier90_ok)
  AC_SUBST(afb_wannier90_tarball)
]) # _AFB_SETUP_WANNIER90



# _AFB_SETUP_XMLF90()
# -------------------
#
# Sets all variables needed to handle the XMLF90 fallback.
#
AC_DEFUN([_AFB_SETUP_XMLF90],[
  dnl Initial setup
  afb_xmlf90_bins=""
  afb_xmlf90_incs=""
  afb_xmlf90_libs=""
  afb_xmlf90_custom="no"
  afb_xmlf90_tricks="unknown"
  afb_xmlf90_ok="unknown"
  afb_xmlf90_tarball="${abinit_tardir}/xmlf90-1.5.3.1.tar.gz"
  tmp_tarball_ok="no"
  unset with_xmlf90_bins

  dnl Define variables needed to build the package
  xmlf90_pkg_name="xmlf90-1.5.3.1"
  AC_SUBST(xmlf90_pkg_name)
  xmlf90_pkg_inst="xmlf90/1.5.3.1"
  AC_SUBST(xmlf90_pkg_inst)
  xmlf90_pkg_string="XML Fortran library 1.5.3.1 (portability special edition by YP)"
  AC_SUBST(xmlf90_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([xmlf90],
    AC_HELP_STRING([--disable-xmlf90],
      [Disable XML Fortran library 1.5.3.1 (portability special edition by YP) support]))
  AC_SUBST(enable_xmlf90)  AC_ARG_WITH([xmlf90-incs],
    AC_HELP_STRING([--with-xmlf90-incs],
      [Include flags for an external xmlf90]))
  AC_SUBST(with_xmlf90_incs)
  AC_ARG_WITH([xmlf90-libs],
    AC_HELP_STRING([--with-xmlf90-libs],
      [Library flags for an external xmlf90]))
  AC_SUBST(with_xmlf90_libs)
  if test "${enable_xmlf90}" = ""; then
    if test "0" = "1" -o \
            "${with_xmlf90_incs}" != "" -o \
            "${with_xmlf90_libs}" != ""; then
      enable_xmlf90="no"
    fi
  fi
  if test "${enable_xmlf90}" = "yes"; then
    if test "1" = "1" -a \
            "${with_xmlf90_incs}" = "" -a \
            "${with_xmlf90_libs}" = ""; then
      AC_MSG_NOTICE([options for xmlf90 are consistent])
    else
      AC_MSG_ERROR([inconsistent options for xmlf90!
        use --enable-xmlf90 or --with-xmlf90-*, not both])
    fi
  fi

  dnl Make sure all required options are set
  if test "${enable_xmlf90}" = ""; then
    enable_xmlf90="yes"
  fi

  dnl Define and set environment variables for the package
  AC_ARG_VAR([CFGFLAGS_XMLF90],
    [Options to the configure script of xmlf90])
  AC_SUBST(CFGFLAGS_XMLF90)
  if test -z "${CFGFLAGS_XMLF90}"; then
    CFGFLAGS_XMLF90="${CFGFLAGS}"
    afb_xmlf90_cfgflags_custom="no"
  else
    afb_xmlf90_custom="yes"
    afb_xmlf90_cfgflags_custom="yes"
  fi
  unset CPPFLAGS_XMLF90
  unset CFLAGS_XMLF90
  unset XPPFLAGS_XMLF90
  unset CXXFLAGS_XMLF90
  AC_ARG_VAR([FPPFLAGS_XMLF90],
    [Fortran preprocessor flags of xmlf90])
  AC_SUBST(FPPFLAGS_XMLF90)
  if test -z "${FPPFLAGS_XMLF90}"; then
    FPPFLAGS_XMLF90="${FPPFLAGS}"
    afb_xmlf90_fppflags_custom="no"
  else
    afb_xmlf90_custom="yes"
    afb_xmlf90_fppflags_custom="yes"
  fi
  AC_ARG_VAR([FCFLAGS_XMLF90],
    [Fortran flags of xmlf90])
  AC_SUBST(FCFLAGS_XMLF90)
  if test -z "${FCFLAGS_XMLF90}"; then
    FCFLAGS_XMLF90="${FCFLAGS}"
    afb_xmlf90_fcflags_custom="no"
  else
    afb_xmlf90_custom="yes"
    afb_xmlf90_fcflags_custom="yes"
  fi
  AC_ARG_VAR([LDFLAGS_XMLF90],
    [Link flags of xmlf90])
  AC_SUBST(LDFLAGS_XMLF90)
  if test -z "${LDFLAGS_XMLF90}"; then
    LDFLAGS_XMLF90="${LDFLAGS}"
    afb_xmlf90_ldflags_custom="no"
  else
    afb_xmlf90_custom="yes"
    afb_xmlf90_ldflags_custom="yes"
  fi
  AC_ARG_VAR([LIBS_XMLF90],
    [Additional linker libraries of xmlf90])
  AC_SUBST(LIBS_XMLF90)
  if test -z "${LIBS_XMLF90}"; then
    LIBS_XMLF90="${LIBS}"
    afb_xmlf90_libs_custom="no"
  else
    afb_xmlf90_custom="yes"
    afb_xmlf90_libs_custom="yes"
  fi
  AC_ARG_VAR([ARFLAGS_XMLF90],
    [Library archiver flags of xmlf90])
  AC_SUBST(ARFLAGS_XMLF90)
  if test -z "${ARFLAGS_XMLF90}"; then
    ARFLAGS_XMLF90="${ARFLAGS}"
    afb_xmlf90_arflags_custom="no"
  else
    afb_xmlf90_custom="yes"
    afb_xmlf90_arflags_custom="yes"
  fi

  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the XMLF90 fallback])
  AC_MSG_RESULT([${enable_xmlf90}])
  if test "${enable_xmlf90}" = "yes"; then

    dnl Check for dependencies

    dnl Adjust build flags to the actual situation
    dnl Note: nothing to do for xmlf90

    dnl Get the package
    for dl_url in LOCAL "https://poupouille.org/downloads/xmlf90-1.5.3.1.tar.gz"; do
      if test "${tmp_tarball_ok}" = "no"; then
        if test "${dl_url}" != "LOCAL"; then
          rm -f "${afb_xmlf90_tarball}"
          AC_MSG_NOTICE([downloading XMLF90 - this may take a while])
          ${afb_downloader} ${afb_dlopts} \
            "${afb_xmlf90_tarball}" \
            "${dl_url}"
        fi
        if test -s "${afb_xmlf90_tarball}"; then
          AFB_CHECK_MD5SUM([${afb_xmlf90_tarball}],[9e5eea96e167ab224077a54e6350c1b3])
          case "${afb_md5_ok}" in
            yes)
              tmp_tarball_ok="yes"
            ;;
            unknown)
              tmp_tarball_ok="yes"
              AC_MSG_WARN([could not check integrity of xmlf90-1.5.3.1 tarball])
              ;;
            no)
              AC_MSG_WARN([xmlf90-1.5.3.1 tarball MD5 check failed])
              ;;
          esac
        fi
      fi
    done

    dnl Enable fallback support only if the download was successful
    if test "${tmp_tarball_ok}" = "yes"; then
      afb_xmlf90_ok="yes"
      afb_xmlf90_incs="-I\$(prefix)/xmlf90/1.5.3.1/include"
      afb_xmlf90_libs="-L\$(prefix)/xmlf90/1.5.3.1/lib -lxmlf90"
      AFB_TRICKS_XMLF90([${afb_fc_vendor}],[${afb_fc_version}])
    else
      afb_xmlf90_ok="no"
      AC_MSG_ERROR([could not download XMLF90 fallback tarball
    Solution: disable support for XMLF90 or download the tarball
    manually to ${abinit_tardir}])
    fi

    dnl Warn user about broken packages
    if test "${afb_xmlf90_ok}" != "yes"; then
      AC_MSG_WARN([XMLF90 is broken, which will prevent the build of all
                      its possible dependencies])
    fi

  else

    dnl Check whether the external package works
    afb_xmlf90_incs="${with_xmlf90_incs}"
    afb_xmlf90_libs="${with_xmlf90_libs}"
    AFB_CHECK_XMLF90
    afb_xmlf90_ok="${afb_xmlf90_ext_ok}"
  fi

  dnl Inform Automake
  AM_CONDITIONAL([DO_BUILD_XMLF90],[test "${enable_xmlf90}" = "yes" -a "${afb_xmlf90_ok}" = "yes"])
  AM_CONDITIONAL([DO_TEST_XMLF90],[test "${enable_xmlf90}" = "yes" -a "${afb_xmlf90_ok}" = "yes"])

  dnl Substitutions
  AC_SUBST(afb_xmlf90_ok)
  AC_SUBST(afb_xmlf90_tarball)
  AC_SUBST(afb_xmlf90_incs)
  AC_SUBST(afb_xmlf90_libs)
]) # _AFB_SETUP_XMLF90



# _AFB_SETUP_YAML()
# -----------------
#
# Sets all variables needed to handle the YAML fallback.
#
AC_DEFUN([_AFB_SETUP_YAML],[
  dnl Initial setup
  afb_yaml_bins=""
  afb_yaml_incs=""
  afb_yaml_libs=""
  afb_yaml_custom="no"
  afb_yaml_tricks="unknown"
  afb_yaml_ok="unknown"
  afb_yaml_tarball="${abinit_tardir}/yaml-0.1.6.tar.gz"
  tmp_tarball_ok="no"
  unset with_yaml_bins

  dnl Define variables needed to build the package
  yaml_pkg_name="yaml-0.1.6"
  AC_SUBST(yaml_pkg_name)
  yaml_pkg_inst="yaml/0.1.6"
  AC_SUBST(yaml_pkg_inst)
  yaml_pkg_string="YAML Ain't Markup Language Library 0.1.6 (upstream release)"
  AC_SUBST(yaml_pkg_string)

  dnl Define options associated to the package
  AC_ARG_ENABLE([yaml],
    AC_HELP_STRING([--disable-yaml],
      [Disable YAML Ain't Markup Language Library 0.1.6 (upstream release) support]))
  AC_SUBST(enable_yaml)  AC_ARG_WITH([yaml-incs],
    AC_HELP_STRING([--with-yaml-incs],
      [Include flags for an external yaml]))
  AC_SUBST(with_yaml_incs)
  AC_ARG_WITH([yaml-libs],
    AC_HELP_STRING([--with-yaml-libs],
      [Library flags for an external yaml]))
  AC_SUBST(with_yaml_libs)
  if test "${enable_yaml}" = ""; then
    if test "0" = "1" -o \
            "${with_yaml_incs}" != "" -o \
            "${with_yaml_libs}" != ""; then
      enable_yaml="no"
    fi
  fi
  if test "${enable_yaml}" = "yes"; then
    if test "1" = "1" -a \
            "${with_yaml_incs}" = "" -a \
            "${with_yaml_libs}" = ""; then
      AC_MSG_NOTICE([options for yaml are consistent])
    else
      AC_MSG_ERROR([inconsistent options for yaml!
        use --enable-yaml or --with-yaml-*, not both])
    fi
  fi

  dnl Make sure all required options are set
  if test "${enable_yaml}" = ""; then
    enable_yaml="yes"
  fi

  dnl Define and set environment variables for the package
  AC_ARG_VAR([CFGFLAGS_YAML],
    [Options to the configure script of yaml])
  AC_SUBST(CFGFLAGS_YAML)
  if test -z "${CFGFLAGS_YAML}"; then
    CFGFLAGS_YAML="${CFGFLAGS}"
    afb_yaml_cfgflags_custom="no"
  else
    afb_yaml_custom="yes"
    afb_yaml_cfgflags_custom="yes"
  fi
  AC_ARG_VAR([CPPFLAGS_YAML],
    [C preprocessor flags of yaml])
  AC_SUBST(CPPFLAGS_YAML)
  if test -z "${CPPFLAGS_YAML}"; then
    CPPFLAGS_YAML="${CPPFLAGS}"
    afb_yaml_cppflags_custom="no"
  else
    afb_yaml_custom="yes"
    afb_yaml_cppflags_custom="yes"
  fi
  AC_ARG_VAR([CFLAGS_YAML],
    [C flags of yaml])
  AC_SUBST(CFLAGS_YAML)
  if test -z "${CFLAGS_YAML}"; then
    CFLAGS_YAML="${CFLAGS}"
    afb_yaml_cflags_custom="no"
  else
    afb_yaml_custom="yes"
    afb_yaml_cflags_custom="yes"
  fi
  unset XPPFLAGS_YAML
  unset CXXFLAGS_YAML
  unset FPPFLAGS_YAML
  unset FCFLAGS_YAML
  AC_ARG_VAR([LDFLAGS_YAML],
    [Link flags of yaml])
  AC_SUBST(LDFLAGS_YAML)
  if test -z "${LDFLAGS_YAML}"; then
    LDFLAGS_YAML="${LDFLAGS}"
    afb_yaml_ldflags_custom="no"
  else
    afb_yaml_custom="yes"
    afb_yaml_ldflags_custom="yes"
  fi
  AC_ARG_VAR([LIBS_YAML],
    [Additional linker libraries of yaml])
  AC_SUBST(LIBS_YAML)
  if test -z "${LIBS_YAML}"; then
    LIBS_YAML="${LIBS}"
    afb_yaml_libs_custom="no"
  else
    afb_yaml_custom="yes"
    afb_yaml_libs_custom="yes"
  fi
  AC_ARG_VAR([ARFLAGS_YAML],
    [Library archiver flags of yaml])
  AC_SUBST(ARFLAGS_YAML)
  if test -z "${ARFLAGS_YAML}"; then
    ARFLAGS_YAML="${ARFLAGS}"
    afb_yaml_arflags_custom="no"
  else
    afb_yaml_custom="yes"
    afb_yaml_arflags_custom="yes"
  fi

  dnl Check whether to activate fallback
  AC_MSG_CHECKING([whether to enable the YAML fallback])
  AC_MSG_RESULT([${enable_yaml}])
  if test "${enable_yaml}" = "yes"; then

    dnl Check for dependencies

    dnl Adjust build flags to the actual situation
    dnl Note: nothing to do for yaml

    dnl Get the package
    for dl_url in LOCAL "http://pyyaml.org/download/libyaml/yaml-0.1.6.tar.gz" "http://forge.abinit.org/fallbacks/yam-0.1.6.tar.gz"; do
      if test "${tmp_tarball_ok}" = "no"; then
        if test "${dl_url}" != "LOCAL"; then
          rm -f "${afb_yaml_tarball}"
          AC_MSG_NOTICE([downloading YAML - this may take a while])
          ${afb_downloader} ${afb_dlopts} \
            "${afb_yaml_tarball}" \
            "${dl_url}"
        fi
        if test -s "${afb_yaml_tarball}"; then
          AFB_CHECK_MD5SUM([${afb_yaml_tarball}],[5fe00cda18ca5daeb43762b80c38e06e])
          case "${afb_md5_ok}" in
            yes)
              tmp_tarball_ok="yes"
            ;;
            unknown)
              tmp_tarball_ok="yes"
              AC_MSG_WARN([could not check integrity of yaml-0.1.6 tarball])
              ;;
            no)
              AC_MSG_WARN([yaml-0.1.6 tarball MD5 check failed])
              ;;
          esac
        fi
      fi
    done

    dnl Enable fallback support only if the download was successful
    if test "${tmp_tarball_ok}" = "yes"; then
      afb_yaml_ok="yes"
      afb_yaml_incs="-I\$(prefix)/yaml/0.1.6/include"
      afb_yaml_libs="-L\$(prefix)/yaml/0.1.6/lib -lyaml"
      AFB_TRICKS_YAML([${afb_fc_vendor}],[${afb_fc_version}])
    else
      afb_yaml_ok="no"
      AC_MSG_ERROR([could not download YAML fallback tarball
    Solution: disable support for YAML or download the tarball
    manually to ${abinit_tardir}])
    fi

    dnl Warn user about broken packages
    if test "${afb_yaml_ok}" != "yes"; then
      AC_MSG_WARN([YAML is broken, which will prevent the build of all
                      its possible dependencies])
    fi

  else

    dnl Check whether the external package works
    afb_yaml_incs="${with_yaml_incs}"
    afb_yaml_libs="${with_yaml_libs}"
    AFB_CHECK_YAML
    afb_yaml_ok="${afb_yaml_ext_ok}"
  fi

  dnl Inform Automake
  AM_CONDITIONAL([DO_BUILD_YAML],[test "${enable_yaml}" = "yes" -a "${afb_yaml_ok}" = "yes"])
  AM_CONDITIONAL([DO_TEST_YAML],[test "${enable_yaml}" = "yes" -a "${afb_yaml_ok}" = "yes"])

  dnl Substitutions
  AC_SUBST(afb_yaml_ok)
  AC_SUBST(afb_yaml_tarball)
  AC_SUBST(afb_yaml_incs)
  AC_SUBST(afb_yaml_libs)
]) # _AFB_SETUP_YAML




# AFB_SETUP_PACKAGES()
# --------------------
#
# Initializes all fallbacks in the correct order.
#
AC_DEFUN([AFB_SETUP_PACKAGES],[
  _AFB_SETUP_LIBXC
  _AFB_SETUP_LINALG
  _AFB_SETUP_NETCDF4
  _AFB_SETUP_ATOMPAW
  _AFB_SETUP_NETCDF4_FORTRAN
  _AFB_SETUP_WANNIER90
  _AFB_SETUP_XMLF90
  _AFB_SETUP_LIBPSML
  _AFB_SETUP_YAML
  _AFB_SETUP_BIGDFT

  afb_pkg_list="atompaw bigdft libpsml libxc linalg netcdf4 netcdf4_fortran wannier90 xmlf90 yaml"
  AC_SUBST(afb_pkg_list)
]) # AFB_SETUP_PACKAGES
