d024bfae86 (amartin             2016-12-06 10:28:54 +0100    1) !!****m* ABINIT/m_fit_polynomial_coeff
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100    2) !!
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100    3) !! NAME
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100    4) !! m_fit_polynomial_coeff
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100    5) !!
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100    6) !! FUNCTION
e77bd2c466 (amartin             2016-12-08 15:39:00 +0100    7) !!
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100    8) !! COPYRIGHT
2e75f8422e (gonze               2020-01-17 20:17:20 +0100    9) !! Copyright (C) 2010-2020 ABINIT group (AM)
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   10) !! This file is distributed under the terms of the
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   11) !! GNU General Public Licence, see ~abinit/COPYING
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   12) !! or http://www.gnu.org/copyleft/gpl.txt .
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   13) !! For the initials of contributors, see ~abinit/doc/developers/contributors.txt .
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   14) !!
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   15) !! SOURCE
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   16) 
7637b8a3aa (mschmitt            2018-10-10 17:45:44 +0200   17) 
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   18) #if defined HAVE_CONFIG_H
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   19) #include "config.h"
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   20) #endif
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   21) 
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   22) #include "abi_common.h"
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   23) 
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   24) module m_fit_polynomial_coeff
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   25) 
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   26)  use defs_basis
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   27)  use m_errors
67bfcb315c (mschmitt            2018-10-17 15:28:09 +0200   28)  use m_abicore
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   29)  use m_polynomial_coeff
cb0c22a3b7 (amartin             2017-01-24 11:36:51 +0100   30)  use m_atomdata
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   31)  use m_xmpi
6efc172326 (Matthieu Verstraete 2017-07-11 16:59:17 +0200   32)  use m_supercell
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200   33) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200   34)  use m_special_funcs,only : factorial
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200   35)  use m_geometry,       only : xred2xcart
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200   36)  use m_crystal,only : symbols_crystal
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200   37)  use m_strain,only : strain_type,strain_get
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200   38)  use m_effective_potential,only : effective_potential_type, effective_potential_evaluate
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200   39)  use m_effective_potential,only : effective_potential_freeCoeffs,effective_potential_setCoeffs
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200   40)  use m_effective_potential,only : effective_potential_getDisp, effective_potential_writeAnhHead
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200   41)  use m_effective_potential_file, only : effective_potential_file_mapHistToRef
c8502bbac5 (Alexandre Martin    2017-11-10 13:34:10 +0100   42)  use m_io_tools,   only : open_file,get_unit
f0fb453a24 (Alexandre Martin    2017-11-30 13:34:01 +0100   43)  use m_abihist, only : abihist,abihist_free,abihist_init,abihist_copy,write_md_hist,var2hist
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200   44)  use m_random_zbq
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200   45)  use m_fit_data
6114b61218 (Marcus Schmitt      2019-04-09 09:42:02 +0200   46)  use m_geometry, only: metric
6114b61218 (Marcus Schmitt      2019-04-09 09:42:02 +0200   47)  use m_scup_dataset 
6114b61218 (Marcus Schmitt      2019-04-09 09:42:02 +0200   48) #if defined DEV_MS_SCALEUP 
6114b61218 (Marcus Schmitt      2019-04-09 09:42:02 +0200   49)  use scup_global, only : global_set_parent_iter,global_set_print_parameters 
6114b61218 (Marcus Schmitt      2019-04-09 09:42:02 +0200   50) #endif 
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   51) 
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   52)  implicit none
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   53) 
f22be086bd (amartin             2017-05-24 11:23:18 +0200   54)  public :: fit_polynomial_coeff_computeGF
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100   55)  public :: fit_polynomial_coeff_computeMSD
8834c5ce97 (amartin             2017-05-11 14:27:44 +0200   56)  public :: fit_polynomial_coeff_fit
f22be086bd (amartin             2017-05-24 11:23:18 +0200   57)  public :: fit_polynomial_coeff_getFS
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200   58)  public :: fit_polynomial_coeff_getPositive
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100   59)  public :: fit_polynomial_coeff_getCoeffBound
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200   60)  public :: fit_polynomial_coeff_solve
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200   61)  public :: fit_polynomial_coeff_testEffPot
cb0c22a3b7 (amartin             2017-01-24 11:36:51 +0100   62)  public :: fit_polynomial_printSystemFiles
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200   63)  public :: genereList
e77bd2c466 (amartin             2016-12-08 15:39:00 +0100   64) !!***
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   65) 
f6a7fae642 (mschmitt            2018-11-22 17:32:08 +0100   66) CONTAINS  
f6a7fae642 (mschmitt            2018-11-22 17:32:08 +0100   67) !===========================================================================================
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   68) 
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100   69) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200   70) !!****f* m_fit_polynomial_coeff/fit_polynomial_coeff_fit
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200   71) !!
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200   72) !! NAME
736df84b18 (amartin             2017-06-20 12:27:38 +0200   73) !! fit_polynomial_coeff_fit
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200   74) !!
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200   75) !! FUNCTION
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200   76) !! Fit the list of coefficients included in eff_pot,
736df84b18 (amartin             2017-06-20 12:27:38 +0200   77) !! if the coefficients are not set in eff_pot, this routine will genenerate
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200   78) !! a list of coefficients by taking into acount the symmetries of the system
736df84b18 (amartin             2017-06-20 12:27:38 +0200   79) !! and the cutoff
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200   80) !!
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200   81) !! INPUTS
736df84b18 (amartin             2017-06-20 12:27:38 +0200   82) !! eff_pot<type(effective_potential)> = effective potential
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200   83) !! bancoeff(nbancoeff) = list of bannned coeffcients, these coefficients will NOT be
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200   84) !!                       used during the fit process
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200   85) !! fixcoeff(nfixcoeff) = list of fixed coefficient, these coefficients will be
736df84b18 (amartin             2017-06-20 12:27:38 +0200   86) !!                       imposed during the fit process
2eef72addc (amartin             2017-07-05 17:00:09 +0200   87) !! hist<type(abihist)> = The history of the MD (or snapshot of DFT)
a75a1cae5a (Alexandre Martin    2017-10-31 09:43:38 +0100   88) !! generateterm = term to activate the generation of the term set
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100   89) !! power_disps(2) = array with the minimal and maximal power_disp to be computed
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200   90) !! nbancoeff = number of banned coeffcients
736df84b18 (amartin             2017-06-20 12:27:38 +0200   91) !! ncycle_in = number of maximum cycle (maximum coefficient to be fitted)
736df84b18 (amartin             2017-06-20 12:27:38 +0200   92) !! nfixcoeff = Number of coefficients imposed during the fit process
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100   93) !! option = option of the fit process : 1 - selection of the coefficient one by one
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200   94) !!                                      2 - selection of the coefficients with Monte Carlo(testversion)
736df84b18 (amartin             2017-06-20 12:27:38 +0200   95) !! comm = MPI communicator
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200   96) !! cutoff_in = optional,cut off to apply to the range of interation if
736df84b18 (amartin             2017-06-20 12:27:38 +0200   97) !!           the coefficient are genereted in this routine
544ecc1e85 (Alexandre Martin    2018-05-24 17:22:25 +0200   98) !! max_power_strain = maximum order of the strain of the strain phonon coupling
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200   99) !! fit_initializeData = optional, logical !If true, we store all the informations for the fit,
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  100) !!                      it will reduce the computation time but increase a lot the memory...
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  101) !! fit_tolMSDF = optional, tolerance in eV^2/A^2 on the Forces for the fit process
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  102) !! fit_tolMSDS = optional, tolerance in eV^2/A^2 on the Stresses for the fit process
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  103) !! fit_tolMSDE = optional, tolerance in meV^2/A^2 on the Energy for the fit process
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  104) !! fit_tolMSDFS= optional, tolerance in eV^2/A^2 on the Forces+stresses for the fit process
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  105) !! positive = optional, TRUE will return only positive coefficients
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  106) !!                      FALSE, default
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  107) !! verbose  = optional, flag for the verbose mode
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  108) !! anhstr = logical, optional : TRUE, the anharmonic strain are computed
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  109) !!                              FALSE, (default) the anharmonic strain are not computed
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  110) !! only_odd_power = logical, optional : if TRUE generate only odd power
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  111) !! only_even_power= logical, optional : if TRUE generate only even power
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  112) !!
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  113) !! OUTPUT
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  114) !! eff_pot<type(effective_potential)> = effective potential datatype with new fitted coefficients
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  115) !!
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  116) !! PARENTS
6573fbac25 (Trunk               2020-08-13 18:22:36 +0200  117) !!      m_fit_polynomial_coeff,m_mover_effpot,m_multibinit_driver
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  118) !!
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  119) !! CHILDREN
0f2f2fcb23 (gonze               2017-11-19 07:28:23 +0100  120) !!      destroy_supercell,generelist,init_supercell,xred2xcart
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  121) !!
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  122) !! SOURCE
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  123) 
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100  124) subroutine fit_polynomial_coeff_fit(eff_pot,bancoeff,fixcoeff,hist,generateterm,power_disps,&
a75a1cae5a (Alexandre Martin    2017-10-31 09:43:38 +0100  125) &                                   nbancoeff,ncycle_in,nfixcoeff,option,comm,cutoff_in,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  126) &                                   max_power_strain,initialize_data,&
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  127) &                                   fit_tolMSDF,fit_tolMSDS,fit_tolMSDE,fit_tolMSDFS,&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  128) &                                   positive,verbose,anharmstr,spcoupling,&
aba9c677a5 (mschmitt            2020-03-05 11:54:41 +0100  129) &                                   only_odd_power,only_even_power,prt_anh,& 
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100  130) &                                   fit_iatom,prt_files,fit_on,sel_on)
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  131) 
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  132)  implicit none
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  133) 
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  134) !Arguments ------------------------------------
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  135) !scalars
736df84b18 (amartin             2017-06-20 12:27:38 +0200  136)  integer,intent(in) :: ncycle_in,nfixcoeff,comm
a75a1cae5a (Alexandre Martin    2017-10-31 09:43:38 +0100  137)  integer,intent(in) :: generateterm,nbancoeff,option
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  138) !arrays
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200  139)  integer,intent(in) :: fixcoeff(nfixcoeff), bancoeff(nbancoeff)
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100  140)  integer,intent(in) :: power_disps(2)
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  141)  type(effective_potential_type),target,intent(inout) :: eff_pot
736df84b18 (amartin             2017-06-20 12:27:38 +0200  142)  type(abihist),intent(inout) :: hist
aba9c677a5 (mschmitt            2020-03-05 11:54:41 +0100  143)  integer,optional,intent(in) :: max_power_strain,prt_anh,fit_iatom
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  144)  real(dp),optional,intent(in) :: cutoff_in,fit_tolMSDF,fit_tolMSDS,fit_tolMSDE,fit_tolMSDFS
08907fc487 (Alexandre Martin    2017-08-29 09:24:52 +0200  145)  logical,optional,intent(in) :: verbose,positive,anharmstr,spcoupling
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  146)  logical,optional,intent(in) :: only_odd_power,only_even_power
090d1fa864 (mschmitt            2020-01-14 14:16:23 +0100  147)  logical,optional,intent(in) :: initialize_data,prt_files
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100  148)  logical,optional,intent(in) :: fit_on(3), sel_on(3)
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  149) !Local variables-------------------------------
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  150) !scalar
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  151)  integer :: ii,icoeff,my_icoeff,icycle,icycle_tmp,ierr,info,index_min,iproc,isweep,jcoeff
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  152)  integer :: master,max_power_strain_in,my_rank,my_ncoeff,ncoeff_model,ncoeff_tot,natom_sc,ncell,ncycle
aba9c677a5 (mschmitt            2020-03-05 11:54:41 +0100  153)  integer :: ncycle_tot,ncycle_max,nproc,ntime,nsweep,size_mpi,ncoeff_fix
1e5ac2b2c9 (mschmitt            2020-03-10 18:12:56 +0100  154)  integer :: rank_to_send,unit_anh,fit_iatom_in
4a574c05a2 (Alexandre Martin    2018-04-18 11:09:36 +0200  155)  real(dp) :: cutoff,factor,time,tolMSDF,tolMSDS,tolMSDE,tolMSDFS
736df84b18 (amartin             2017-06-20 12:27:38 +0200  156)  real(dp),parameter :: HaBohr_meVAng = 27.21138386 / 0.529177249
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100  157)  logical :: iam_master,need_verbose,need_positive,converge,file_opened
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100  158)  logical :: need_anharmstr,need_spcoupling,ditributed_coefficients,need_prt_anh
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  159)  logical :: need_only_odd_power,need_only_even_power,need_initialize_data
090d1fa864 (mschmitt            2020-01-14 14:16:23 +0100  160)  logical :: need_prt_files
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  161) !arrays
736df84b18 (amartin             2017-06-20 12:27:38 +0200  162)  real(dp) :: mingf(4)
b864a37936 (Matthieu Verstraete 2017-08-22 23:29:41 +0200  163)  integer :: sc_size(3)
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  164)  integer,allocatable  :: buffsize(:),buffdisp(:),buffin(:)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  165)  integer,allocatable  :: list_coeffs(:),list_coeffs_tmp(:),list_coeffs_tmp2(:)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  166)  integer,allocatable  :: my_coeffindexes(:),singular_coeffs(:)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  167)  integer,allocatable  :: my_coefflist(:) ,stat_coeff(:)
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  168)  real(dp),allocatable :: buffGF(:,:),coeff_values(:),energy_coeffs(:,:)
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  169)  real(dp),allocatable :: energy_coeffs_tmp(:,:)
736df84b18 (amartin             2017-06-20 12:27:38 +0200  170)  real(dp),allocatable :: fcart_coeffs(:,:,:,:),gf_values(:,:),gf_mpi(:,:)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  171)  real(dp),allocatable :: fcart_coeffs_tmp(:,:,:,:),strten_coeffs_tmp(:,:,:)
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  172)  real(dp),allocatable :: strten_coeffs(:,:,:)
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  173)  type(polynomial_coeff_type),allocatable :: my_coeffs(:)
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  174)  type(polynomial_coeff_type),target,allocatable :: coeffs_tmp(:)
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  175)  type(polynomial_coeff_type),pointer :: coeffs_in(:)
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  176)  type(fit_data_type) :: fit_data
c8502bbac5 (Alexandre Martin    2017-11-10 13:34:10 +0100  177)  character(len=1000) :: message
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  178)  character(len=fnlen) :: filename
47dec75d8c (Alexandre Martin    2017-09-05 13:28:43 +0200  179)  character(len=3)  :: i_char
47dec75d8c (Alexandre Martin    2017-09-05 13:28:43 +0200  180)  character(len=7)  :: j_char
a2dc5454f3 (mschmitt            2019-11-13 16:01:32 +0100  181)  character(len=5),allocatable :: symbols(:)
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  182) ! *************************************************************************
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  183) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200  184) !MPI variables
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  185)  master = 0
736df84b18 (amartin             2017-06-20 12:27:38 +0200  186)  nproc = xmpi_comm_size(comm); my_rank = xmpi_comm_rank(comm)
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  187)  iam_master = (my_rank == master)
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  188) 
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  189) !Initialisation of optional arguments
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  190)  need_verbose = .TRUE.
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  191)  if(present(verbose)) need_verbose = verbose
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  192)  need_initialize_data = .TRUE.
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  193)  if(present(initialize_data)) need_initialize_data = initialize_data
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  194)  need_positive = .FALSE.
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  195)  if(present(positive)) need_positive = positive
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  196)  need_anharmstr = .FALSE.
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  197)  if(present(anharmstr)) need_anharmstr = anharmstr
08907fc487 (Alexandre Martin    2017-08-29 09:24:52 +0200  198)  need_spcoupling = .TRUE.
08907fc487 (Alexandre Martin    2017-08-29 09:24:52 +0200  199)  if(present(spcoupling)) need_spcoupling = spcoupling
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  200)  need_only_odd_power = .FALSE.
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  201)  if(present(only_odd_power)) need_only_odd_power = only_odd_power
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100  202)  need_prt_anh = .FALSE. 
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100  203)  if(present(prt_anh))then
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100  204)    if(prt_anh == 1) need_prt_anh = .TRUE.
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100  205)  end if
d90dd17c8a (mschmitt            2020-03-05 17:39:44 +0100  206)  need_prt_files = .TRUE.
d90dd17c8a (mschmitt            2020-03-05 17:39:44 +0100  207) 
090d1fa864 (mschmitt            2020-01-14 14:16:23 +0100  208)  if(present(prt_files))need_prt_files=prt_files
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  209)  need_only_even_power = .FALSE.
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  210)  if(present(only_even_power)) need_only_even_power = only_even_power
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  211)  if(need_only_odd_power.and.need_only_even_power)then
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  212)       write(message, '(3a)' )&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  213) &       'need_only_odd_power and need_only_even_power are both true',ch10,&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  214) &       'Action: contact abinit group'
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  215)    MSG_ERROR(message)
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  216)  end if
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  217)  max_power_strain_in = 1
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  218)  if(present(max_power_strain))then
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  219)    max_power_strain_in = max_power_strain
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  220)  end if
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  221)  if(max_power_strain_in <= 0)then
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  222)       write(message, '(3a)' )&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  223) &       'max_power_strain can not be inferior or equal to zero',ch10,&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  224) &       'Action: contact abinit group'
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  225)    MSG_ERROR(message)
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  226)  end if
27e7add905 (mschmitt            2019-11-08 15:56:45 +0100  227)  !Check which atom to fit, if not present do all atoms 
27e7add905 (mschmitt            2019-11-08 15:56:45 +0100  228)  if(present(fit_iatom))then 
27e7add905 (mschmitt            2019-11-08 15:56:45 +0100  229)     fit_iatom_in = fit_iatom 
27e7add905 (mschmitt            2019-11-08 15:56:45 +0100  230)  else 
27e7add905 (mschmitt            2019-11-08 15:56:45 +0100  231)     fit_iatom_in = -1 
27e7add905 (mschmitt            2019-11-08 15:56:45 +0100  232)  endif
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  233) 
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  234) !Set the tolerance for the fit
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  235)  tolMSDF=zero;tolMSDS=zero;tolMSDE=zero;tolMSDFS=zero
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  236)  if(present(fit_tolMSDF)) tolMSDF  = fit_tolMSDF
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  237)  if(present(fit_tolMSDS)) tolMSDS  = fit_tolMSDS
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  238)  if(present(fit_tolMSDE)) tolMSDE  = fit_tolMSDE
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  239)  if(present(fit_tolMSDFS))tolMSDFS = fit_tolMSDFS
0df3dd9378 (Alexandre Martin    2017-12-05 10:48:44 +0100  240) 
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  241)  if(need_verbose) then
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  242)    write(message,'(a,(80a))') ch10,('=',ii=1,80)
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  243)    call wrtout(ab_out,message,'COLL')
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  244)    call wrtout(std_out,message,'COLL')
8caa30626f (Marcus Schmitt      2019-11-25 15:18:59 +0100  245)    write(message,'(2a)') ch10,' Starting Fit process'
8caa30626f (Marcus Schmitt      2019-11-25 15:18:59 +0100  246)    call wrtout(ab_out,message,'COLL')
8caa30626f (Marcus Schmitt      2019-11-25 15:18:59 +0100  247)    call wrtout(std_out,message,'COLL')
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  248)    write(message,'(a,(80a))') ch10,('-',ii=1,80)
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  249)    call wrtout(ab_out,message,'COLL')
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  250)    call wrtout(std_out,message,'COLL')
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  251)  end if
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200  252) 
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  253)  ditributed_coefficients = .true.
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  254)  if(option==2) ditributed_coefficients = .false.
0df3dd9378 (Alexandre Martin    2017-12-05 10:48:44 +0100  255) 
0df3dd9378 (Alexandre Martin    2017-12-05 10:48:44 +0100  256) !if the number of atoms in reference supercell into effpot is not correct,
0df3dd9378 (Alexandre Martin    2017-12-05 10:48:44 +0100  257) !wrt to the number of atom in the hist, we set map the hist and set the good supercell
0df3dd9378 (Alexandre Martin    2017-12-05 10:48:44 +0100  258)  if (size(hist%xred,2) /= eff_pot%supercell%natom) then
0df3dd9378 (Alexandre Martin    2017-12-05 10:48:44 +0100  259)    call effective_potential_file_mapHistToRef(eff_pot,hist,comm,verbose=need_verbose)
0df3dd9378 (Alexandre Martin    2017-12-05 10:48:44 +0100  260)  end if
898720a191 (Alexandre Martin    2017-12-11 13:18:19 +0100  261) 
898720a191 (Alexandre Martin    2017-12-11 13:18:19 +0100  262) !Set the cut off
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  263)  cutoff = zero
898720a191 (Alexandre Martin    2017-12-11 13:18:19 +0100  264)  if(present(cutoff_in))then
898720a191 (Alexandre Martin    2017-12-11 13:18:19 +0100  265)    cutoff = cutoff_in
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  266)  end if
4a574c05a2 (Alexandre Martin    2018-04-18 11:09:36 +0200  267) !If the cutoff is set to zero, we define a default value
898720a191 (Alexandre Martin    2017-12-11 13:18:19 +0100  268)  if(abs(cutoff)<tol16)then
898720a191 (Alexandre Martin    2017-12-11 13:18:19 +0100  269)    do ii=1,3
4a574c05a2 (Alexandre Martin    2018-04-18 11:09:36 +0200  270)      cutoff = cutoff + sqrt(eff_pot%supercell%rprimd(ii,1)**2+&
4a574c05a2 (Alexandre Martin    2018-04-18 11:09:36 +0200  271) &                           eff_pot%supercell%rprimd(ii,2)**2+&
4a574c05a2 (Alexandre Martin    2018-04-18 11:09:36 +0200  272) &                           eff_pot%supercell%rprimd(ii,3)**2)
898720a191 (Alexandre Martin    2017-12-11 13:18:19 +0100  273)    end do
4a574c05a2 (Alexandre Martin    2018-04-18 11:09:36 +0200  274)    cutoff = cutoff / 3.0_dp
898720a191 (Alexandre Martin    2017-12-11 13:18:19 +0100  275)  end if
4a574c05a2 (Alexandre Martin    2018-04-18 11:09:36 +0200  276) !we get the size of the supercell in the hist file
4a574c05a2 (Alexandre Martin    2018-04-18 11:09:36 +0200  277)  do ii=1,3
4a574c05a2 (Alexandre Martin    2018-04-18 11:09:36 +0200  278)    sc_size(ii) = int(anint(sqrt(eff_pot%supercell%rprimd(ii,1)**2+&
4a574c05a2 (Alexandre Martin    2018-04-18 11:09:36 +0200  279) &                               eff_pot%supercell%rprimd(ii,2)**2+&
4a574c05a2 (Alexandre Martin    2018-04-18 11:09:36 +0200  280) &                               eff_pot%supercell%rprimd(ii,3)**2) / &
4a574c05a2 (Alexandre Martin    2018-04-18 11:09:36 +0200  281) &                          sqrt(eff_pot%crystal%rprimd(ii,1)**2+&
4a574c05a2 (Alexandre Martin    2018-04-18 11:09:36 +0200  282) &                               eff_pot%crystal%rprimd(ii,2)**2+&
4a574c05a2 (Alexandre Martin    2018-04-18 11:09:36 +0200  283) &                               eff_pot%crystal%rprimd(ii,3)**2)))
0df3dd9378 (Alexandre Martin    2017-12-05 10:48:44 +0100  284)  end do
0df3dd9378 (Alexandre Martin    2017-12-05 10:48:44 +0100  285) 
4a574c05a2 (Alexandre Martin    2018-04-18 11:09:36 +0200  286) 
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  287) !Get the list of coefficients to fit:
c8502bbac5 (Alexandre Martin    2017-11-10 13:34:10 +0100  288) !get from the eff_pot type (from the input)
c8502bbac5 (Alexandre Martin    2017-11-10 13:34:10 +0100  289) !or
c8502bbac5 (Alexandre Martin    2017-11-10 13:34:10 +0100  290) !regenerate the list
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  291)  my_ncoeff = 0
a75a1cae5a (Alexandre Martin    2017-10-31 09:43:38 +0100  292)  ncoeff_tot = 0
a75a1cae5a (Alexandre Martin    2017-10-31 09:43:38 +0100  293)  ncoeff_model = eff_pot%anharmonics_terms%ncoeff
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  294) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  295) !Reset ncoeff_tot
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  296)  if(ncoeff_model > 0)then
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  297)    if(need_verbose)then
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  298)      write(message, '(4a)' )ch10,' The coefficients present in the effective',&
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  299) &    ' potential will be used for the fit'
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  300)      call wrtout(std_out,message,'COLL')
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  301)      call wrtout(ab_out,message,'COLL')
a75a1cae5a (Alexandre Martin    2017-10-31 09:43:38 +0100  302)    end if
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  303)  end if
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  304) 
a41dd63378 (mschmitt            2019-11-29 12:11:34 +0100  305)  ABI_ALLOCATE(symbols,(eff_pot%crystal%natom))
a41dd63378 (mschmitt            2019-11-29 12:11:34 +0100  306)  call symbols_crystal(eff_pot%crystal%natom,eff_pot%crystal%ntypat,eff_pot%crystal%npsp,&
a41dd63378 (mschmitt            2019-11-29 12:11:34 +0100  307) &                     symbols,eff_pot%crystal%typat,eff_pot%crystal%znucl)
a41dd63378 (mschmitt            2019-11-29 12:11:34 +0100  308) 
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  309)  if(generateterm == 1)then
a41dd63378 (mschmitt            2019-11-29 12:11:34 +0100  310) ! we need to regenerate them
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  311)    if(need_verbose)then
8caa30626f (Marcus Schmitt      2019-11-25 15:18:59 +0100  312)      if(fit_iatom_in > 0)then 
8caa30626f (Marcus Schmitt      2019-11-25 15:18:59 +0100  313)        write(message, '(2a,I3,4a)' )ch10,' The coefficients for the fit around atom', fit_iatom_in,': ',& 
8caa30626f (Marcus Schmitt      2019-11-25 15:18:59 +0100  314) &                                   trim(symbols(fit_iatom)),', will be generated',ch10
8caa30626f (Marcus Schmitt      2019-11-25 15:18:59 +0100  315)        call wrtout(std_out,message,'COLL')
8caa30626f (Marcus Schmitt      2019-11-25 15:18:59 +0100  316)        call wrtout(ab_out,message,'COLL')
8caa30626f (Marcus Schmitt      2019-11-25 15:18:59 +0100  317)      else 
8caa30626f (Marcus Schmitt      2019-11-25 15:18:59 +0100  318)        write(message, '(3a)' )ch10,' The coefficients for the fit will be generated with all cross terms',ch10
8caa30626f (Marcus Schmitt      2019-11-25 15:18:59 +0100  319)        call wrtout(std_out,message,'COLL')
8caa30626f (Marcus Schmitt      2019-11-25 15:18:59 +0100  320)        call wrtout(ab_out,message,'COLL')
8caa30626f (Marcus Schmitt      2019-11-25 15:18:59 +0100  321)      endif
27e7add905 (mschmitt            2019-11-08 15:56:45 +0100  322)      write(message,'(a,F6.3,a)') " Cutoff of ",cutoff," Bohr is imposed"
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  323)      call wrtout(std_out,message,'COLL')
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  324)    end if
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  325) 
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  326)    call polynomial_coeff_getNorder(coeffs_tmp,eff_pot%crystal,cutoff,my_ncoeff,ncoeff_tot,power_disps,&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  327) &                                  max_power_strain_in,0,sc_size,comm,anharmstr=need_anharmstr,&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  328) &                                  spcoupling=need_spcoupling,distributed=.true.,&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  329) &                                  only_odd_power=need_only_odd_power,&
27e7add905 (mschmitt            2019-11-08 15:56:45 +0100  330) &                                  only_even_power=need_only_even_power,& 
27e7add905 (mschmitt            2019-11-08 15:56:45 +0100  331) &                                  fit_iatom=fit_iatom_in)
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  332)  end if
a41dd63378 (mschmitt            2019-11-29 12:11:34 +0100  333) 
a41dd63378 (mschmitt            2019-11-29 12:11:34 +0100  334)  ABI_DEALLOCATE(symbols)
a41dd63378 (mschmitt            2019-11-29 12:11:34 +0100  335) 
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  336) !Copy the initial coefficients from the model on the CPU 0
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  337)  ncoeff_tot = ncoeff_tot + ncoeff_model
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  338)  if(iam_master .and. ncoeff_model > 0) my_ncoeff = my_ncoeff + ncoeff_model
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  339) 
a2dc5454f3 (mschmitt            2019-11-13 16:01:32 +0100  340) !Get number of fixed coeff
a2dc5454f3 (mschmitt            2019-11-13 16:01:32 +0100  341)  ncoeff_fix = 0  
a2dc5454f3 (mschmitt            2019-11-13 16:01:32 +0100  342)  if(nfixcoeff /=0) then 
a2dc5454f3 (mschmitt            2019-11-13 16:01:32 +0100  343)    if(nfixcoeff == -1)then 
a2dc5454f3 (mschmitt            2019-11-13 16:01:32 +0100  344)       ncoeff_fix = ncoeff_model 
a2dc5454f3 (mschmitt            2019-11-13 16:01:32 +0100  345)    else 
a2dc5454f3 (mschmitt            2019-11-13 16:01:32 +0100  346)       ncoeff_fix = nfixcoeff 
a2dc5454f3 (mschmitt            2019-11-13 16:01:32 +0100  347)    endif 
a2dc5454f3 (mschmitt            2019-11-13 16:01:32 +0100  348)  endif 
a2dc5454f3 (mschmitt            2019-11-13 16:01:32 +0100  349) 
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  350) !Get the list with the number of coeff on each CPU
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  351) !In order to be abble to compute the my_coeffindexes array which is for example:
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  352) ! if CPU0 has 200  Coeff and CPU1 has 203 Coeff then
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  353) ! for CPU0:my_coeffindexes=>1-200 and for CPU1:my_coeffindexes=>201-403
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  354) !Also fill the my_coeffs array with the generated coefficients and/or the coefficient from the input xml
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  355)  ABI_ALLOCATE(buffin,(nproc))
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  356)  buffin = 0
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  357)  buffin(my_rank+1) = my_ncoeff
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  358)  call xmpi_sum(buffin,comm,ierr)
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  359)  ABI_ALLOCATE(my_coeffindexes,(my_ncoeff))
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  360)  ABI_ALLOCATE(my_coefflist,(my_ncoeff))
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  361)  ABI_DATATYPE_ALLOCATE(my_coeffs,(my_ncoeff))
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  362)  do icoeff=1,my_ncoeff
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  363) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  364)    jcoeff = icoeff
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  365)    my_coefflist(icoeff) = icoeff
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  366) 
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  367)    if(my_rank==0) then
0c0af99145 (mschmitt            2018-10-22 15:33:40 +0200  368)      my_coeffindexes(icoeff) = icoeff
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  369)    else
0c0af99145 (mschmitt            2018-10-22 15:33:40 +0200  370)      my_coeffindexes(icoeff) = sum(buffin(1:my_rank)) + icoeff
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  371)    end if
a75a1cae5a (Alexandre Martin    2017-10-31 09:43:38 +0100  372) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  373) !  Only copy the input coefficients on the CPU0
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  374)    if(my_rank==0) then
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  375)      if(icoeff <= ncoeff_model)then
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  376)        coeffs_in => eff_pot%anharmonics_terms%coefficients
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  377)      else
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  378)        coeffs_in => coeffs_tmp
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  379)        jcoeff = jcoeff-ncoeff_model
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  380)      end if
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  381)    else
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  382)      coeffs_in => coeffs_tmp
a75a1cae5a (Alexandre Martin    2017-10-31 09:43:38 +0100  383)    end if
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  384)    call polynomial_coeff_init(one,coeffs_in(jcoeff)%nterm,&
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  385) &                             my_coeffs(icoeff),coeffs_in(jcoeff)%terms,&
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  386) &                             coeffs_in(jcoeff)%name,&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  387) &                             check=.true.)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  388)    call polynomial_coeff_free(coeffs_in(jcoeff))
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  389)  end do
c8502bbac5 (Alexandre Martin    2017-11-10 13:34:10 +0100  390) 
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  391) !Deallocation
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  392)  if(allocated(coeffs_tmp)) then
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  393)    ABI_DATATYPE_DEALLOCATE(coeffs_tmp)
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  394)  end if
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  395)  NULLIFY(coeffs_in)
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  396)  ABI_DEALLOCATE(buffin)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  397) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  398)  !wait everybody
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  399)  call xmpi_barrier(comm)
295dda83ff (mschmitt            2018-10-16 10:42:59 +0200  400)   
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  401) !Reset the output (we free the memory)
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  402)  call effective_potential_freeCoeffs(eff_pot)
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200  403) 
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  404) 
7db11d0e1a (amartin             2017-06-30 15:21:56 +0200  405) !Check if ncycle_in is not zero or superior to ncoeff_tot
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200  406)  if(need_verbose.and.(ncycle_in > ncoeff_tot).or.(ncycle_in<0.and.nfixcoeff /= -1)) then
736df84b18 (amartin             2017-06-20 12:27:38 +0200  407)    write(message, '(6a,I0,3a)' )ch10,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200  408) &        ' --- !WARNING',ch10,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200  409) &        '     The number of cycle requested in the input is not correct.',ch10,&
7db11d0e1a (amartin             2017-06-30 15:21:56 +0200  410) &        '     This number will be set to the maximum of coefficients: ',ncoeff_tot,ch10,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200  411) &        ' ---',ch10
736df84b18 (amartin             2017-06-20 12:27:38 +0200  412)      call wrtout(std_out,message,"COLL")
736df84b18 (amartin             2017-06-20 12:27:38 +0200  413)    end if
736df84b18 (amartin             2017-06-20 12:27:38 +0200  414) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200  415) !Use fixcoeff
736df84b18 (amartin             2017-06-20 12:27:38 +0200  416) !ncycle_tot store the curent number of coefficient in the model
736df84b18 (amartin             2017-06-20 12:27:38 +0200  417) !Do not reset this variable...
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200  418)  ncycle_tot = 0
736df84b18 (amartin             2017-06-20 12:27:38 +0200  419)  if (nfixcoeff == -1)then
a75a1cae5a (Alexandre Martin    2017-10-31 09:43:38 +0100  420)    write(message, '(3a)')' nfixcoeff is set to -1, the coefficients present in the model',&
a75a1cae5a (Alexandre Martin    2017-10-31 09:43:38 +0100  421) &                        ' are imposed.',ch10
a75a1cae5a (Alexandre Martin    2017-10-31 09:43:38 +0100  422)    ncycle_tot = ncycle_tot + ncoeff_model
736df84b18 (amartin             2017-06-20 12:27:38 +0200  423)  else
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200  424)    if (nfixcoeff > 0)then
7db11d0e1a (amartin             2017-06-30 15:21:56 +0200  425)      if(maxval(fixcoeff(:)) > ncoeff_tot) then
736df84b18 (amartin             2017-06-20 12:27:38 +0200  426)        write(message, '(4a,I0,6a)' )ch10,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200  427) &        ' --- !WARNING',ch10,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200  428) &        '     The value ',maxval(fixcoeff(:)),' is not in the list.',ch10,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200  429) &        '     Start from scratch...',ch10,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200  430) &        ' ---',ch10
736df84b18 (amartin             2017-06-20 12:27:38 +0200  431)      else
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  432)        ncycle_tot = ncycle_tot + nfixcoeff
736df84b18 (amartin             2017-06-20 12:27:38 +0200  433)        write(message, '(2a)')' Some coefficients are imposed from the input.',ch10
736df84b18 (amartin             2017-06-20 12:27:38 +0200  434)      end if
736df84b18 (amartin             2017-06-20 12:27:38 +0200  435)    else
736df84b18 (amartin             2017-06-20 12:27:38 +0200  436)      write(message, '(4a)')' There is no coefficient imposed from the input.',ch10,&
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  437) &                        ' Start from scratch',ch10
736df84b18 (amartin             2017-06-20 12:27:38 +0200  438)    end if
736df84b18 (amartin             2017-06-20 12:27:38 +0200  439)  end if
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  440) 
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  441)  if(need_verbose) call wrtout(std_out,message,'COLL')
736df84b18 (amartin             2017-06-20 12:27:38 +0200  442) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200  443) !Compute the number of cycle:
736df84b18 (amartin             2017-06-20 12:27:38 +0200  444)  ncycle     = ncycle_in
736df84b18 (amartin             2017-06-20 12:27:38 +0200  445) !Compute the maximum number of cycle
736df84b18 (amartin             2017-06-20 12:27:38 +0200  446)  ncycle_max = ncycle_in + ncycle_tot
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  447) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  448) !Check if the number of request cycle + the initial number of coeff is superior to
a75a1cae5a (Alexandre Martin    2017-10-31 09:43:38 +0100  449)  !the maximum number of coefficient allowed
7db11d0e1a (amartin             2017-06-30 15:21:56 +0200  450)  if(ncycle_max > ncoeff_tot) then
7db11d0e1a (amartin             2017-06-30 15:21:56 +0200  451)    ncycle = ncoeff_tot - ncycle_tot
7db11d0e1a (amartin             2017-06-30 15:21:56 +0200  452)    ncycle_max = ncoeff_tot
736df84b18 (amartin             2017-06-20 12:27:38 +0200  453)    write(message, '(4a,I0,2a,I0,2a,I0,3a)' )ch10,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200  454) &      ' --- !WARNING',ch10,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200  455) &      '     The number of cycle + the number of imposed coefficients: ',ncycle_max,ch10,&
7db11d0e1a (amartin             2017-06-30 15:21:56 +0200  456) &      '     is superior to the maximum number of coefficients in the initial list: ',ncoeff_tot,ch10,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200  457) &      '     The number of cycle is set to ',ncycle,ch10,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200  458) &      ' ---',ch10
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  459)    if(need_verbose) call wrtout(std_out,message,'COLL')
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  460)  else if (option==2)then
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  461) !  Always set to the maximum
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  462)    ncycle_max = ncoeff_tot
736df84b18 (amartin             2017-06-20 12:27:38 +0200  463)  end if
736df84b18 (amartin             2017-06-20 12:27:38 +0200  464) 
8bfff929f5 (Alexandre Martin    2017-08-25 10:03:21 +0200  465) !Initialisation of constants
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  466)  ntime    = hist%mxhist
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  467)  natom_sc = eff_pot%supercell%natom
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  468)  ncell    = eff_pot%supercell%ncells
4a574c05a2 (Alexandre Martin    2018-04-18 11:09:36 +0200  469)  factor   = 1._dp/natom_sc
8bfff929f5 (Alexandre Martin    2017-08-25 10:03:21 +0200  470) 
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  471) !Initialisation of arrays:
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  472)  ABI_ALLOCATE(energy_coeffs_tmp,(ncycle_max,ntime))
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  473)  ABI_ALLOCATE(list_coeffs,(ncycle_max))
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  474)  ABI_ALLOCATE(fcart_coeffs_tmp,(3,natom_sc,ncycle_max,ntime))
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  475)  ABI_ALLOCATE(strten_coeffs_tmp,(6,ntime,ncycle_max))
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200  476)  list_coeffs  = 0
736df84b18 (amartin             2017-06-20 12:27:38 +0200  477) 
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  478) !if ncycle_tot > 0 fill list_coeffs with the fixed coefficients
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200  479)  if(ncycle_tot > 0)then
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  480)    do ii = 1,ncycle_tot
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  481)      if(nfixcoeff == -1)then
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  482)        if(ii <= ncoeff_model)then
a75a1cae5a (Alexandre Martin    2017-10-31 09:43:38 +0100  483)          list_coeffs(ii) = ii
a75a1cae5a (Alexandre Martin    2017-10-31 09:43:38 +0100  484)        end if
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  485)      else
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  486)        list_coeffs(ii) = fixcoeff(ii)
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  487)      end if
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  488)    end do
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  489)  end if
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  490) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  491) !Get the decomposition for each coefficients of the forces and stresses for
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200  492) !each atoms and each step  equations 11 & 12 of  PRB95,094115(2017) [[cite:Escorihuela-Sayalero2017]]
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  493)  if(need_verbose)then
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  494)    write(message, '(a)' ) ' Initialisation of the fit process...'
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  495)    call wrtout(std_out,message,'COLL')
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  496)  end if
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  497) !Before the fit, compute constants with fit_data_compute.
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  498) !Conpute the strain of each configuration.
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  499) !Compute the displacmeent of each configuration.
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  500) !Compute the variation of the displacement due to strain of each configuration.
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  501) !Compute fixed forces and stresse and get the standard deviation.
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200  502) !Compute Sheppard and al Factors  \Omega^{2} see J.Chem Phys 136, 074103 (2012) [[cite:Sheppard2012]].
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  503)  call fit_data_compute(fit_data,eff_pot,hist,comm,verbose=need_verbose)
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  504) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  505) !Get the decomposition for each coefficients of the forces,stresses and energy for
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200  506) !each atoms and each step  (see equations 11 & 12 of  
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200  507) !PRB95,094115(2017)) [[cite:Escorihuela-Sayalero2017]]+ allocation
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  508) !If the user does not turn off this initialization, we store all the informations for the fit,
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  509) !it will reduce the computation time but increase a lot the memory...
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  510)  if(need_initialize_data)then
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  511)    ABI_ALLOCATE(energy_coeffs,(my_ncoeff,ntime))
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  512)    ABI_ALLOCATE(fcart_coeffs,(3,natom_sc,my_ncoeff,ntime))
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  513)    ABI_ALLOCATE(strten_coeffs,(6,ntime,my_ncoeff))
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  514)    call fit_polynomial_coeff_getFS(my_coeffs,fit_data%training_set%du_delta,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  515) &                                 fit_data%training_set%displacement,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  516) &                                 energy_coeffs,fcart_coeffs,natom_sc,eff_pot%crystal%natom,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  517) &                                 my_ncoeff,ntime,sc_size,fit_data%training_set%strain,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  518) &                                 strten_coeffs,fit_data%training_set%ucvol,my_coefflist,my_ncoeff)
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  519)  else
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  520) !  Allocate just 1 dimension ! Save MEMORY !
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  521)    ABI_ALLOCATE(energy_coeffs,(1,ntime))
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  522)    ABI_ALLOCATE(fcart_coeffs,(3,natom_sc,1,ntime))
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  523)    ABI_ALLOCATE(strten_coeffs,(6,ntime,1))   
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  524)  end if
736df84b18 (amartin             2017-06-20 12:27:38 +0200  525) 
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  526) !Allocation of arrays
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  527)  ABI_DATATYPE_ALLOCATE(coeffs_tmp,(ncycle_max))
ef0c924292 (amartin             2017-07-03 10:44:09 +0200  528)  ABI_ALLOCATE(singular_coeffs,(max(1,my_ncoeff)))
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  529)  ABI_ALLOCATE(coeff_values,(ncycle_max))
ef0c924292 (amartin             2017-07-03 10:44:09 +0200  530)  ABI_ALLOCATE(gf_values,(4,max(1,my_ncoeff)))
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  531)  ABI_ALLOCATE(list_coeffs_tmp,(ncycle_max))
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  532)  ABI_ALLOCATE(list_coeffs_tmp2,(ncycle_max))
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  533)  ABI_ALLOCATE(stat_coeff,(ncoeff_tot))
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  534)  coeff_values = zero
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200  535)  singular_coeffs = 0
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200  536)  stat_coeff = 0
736df84b18 (amartin             2017-06-20 12:27:38 +0200  537) !Set mpi buffer
c9b9d0ccd5 (amartin             2017-06-20 15:27:18 +0200  538) !Set the bufsize for mpi allgather
736df84b18 (amartin             2017-06-20 12:27:38 +0200  539)  ABI_ALLOCATE(buffsize,(nproc))
736df84b18 (amartin             2017-06-20 12:27:38 +0200  540)  ABI_ALLOCATE(buffdisp,(nproc))
736df84b18 (amartin             2017-06-20 12:27:38 +0200  541)  ABI_ALLOCATE(buffGF,(5,1))
736df84b18 (amartin             2017-06-20 12:27:38 +0200  542)  ABI_ALLOCATE(gf_mpi,(5,nproc))
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  543)  buffsize(:) = 0
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  544)  buffdisp(1) = 0
736df84b18 (amartin             2017-06-20 12:27:38 +0200  545)  do ii= 1,nproc
736df84b18 (amartin             2017-06-20 12:27:38 +0200  546)    buffsize(ii) =  5
736df84b18 (amartin             2017-06-20 12:27:38 +0200  547)  end do
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  548)  do ii = 2,nproc
736df84b18 (amartin             2017-06-20 12:27:38 +0200  549)    buffdisp(ii) = buffdisp(ii-1) + buffsize(ii-1)
736df84b18 (amartin             2017-06-20 12:27:38 +0200  550)  end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200  551)  size_mpi = 5*nproc
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  552) !If some coeff are imposed by the input, we need to fill the arrays
7db11d0e1a (amartin             2017-06-30 15:21:56 +0200  553) !with this coeffs and broadcast to the others CPUs :
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  554)  if(ncycle_tot>=1)then
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  555)    do icycle = 1,ncycle_tot
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  556)      list_coeffs_tmp(icycle) = icycle
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200  557)      rank_to_send = 0
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  558)      do icoeff=1,my_ncoeff
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  559)        if((my_coeffindexes(icoeff)==list_coeffs(icycle)))then
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  560) 
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  561)          if(need_initialize_data)then
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  562)            my_icoeff = icoeff
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  563)          else
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  564)            my_icoeff = 1
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  565) !          Need to initialized the data for the fit for this coefficient 
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  566)            call fit_polynomial_coeff_getFS(my_coeffs,fit_data%training_set%du_delta,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  567) &                                          fit_data%training_set%displacement,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  568) &                                          energy_coeffs,fcart_coeffs,natom_sc,eff_pot%crystal%natom,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  569) &                                          my_ncoeff,ntime,sc_size,fit_data%training_set%strain,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  570) &                                          strten_coeffs,fit_data%training_set%ucvol,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  571) &                                          my_coefflist(icoeff),1)
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  572)          end if
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  573)          
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  574)          energy_coeffs_tmp(icycle,:)    = energy_coeffs(my_icoeff,:)
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  575)          fcart_coeffs_tmp(:,:,icycle,:) = fcart_coeffs(:,:,my_icoeff,:)
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  576)          strten_coeffs_tmp(:,:,icycle)  = strten_coeffs(:,:,my_icoeff)
7e0bbc3a1a (amartin             2017-06-29 10:47:23 +0200  577)          rank_to_send = my_rank
7e0bbc3a1a (amartin             2017-06-29 10:47:23 +0200  578)          call polynomial_coeff_free(coeffs_tmp(icycle))
7e0bbc3a1a (amartin             2017-06-29 10:47:23 +0200  579)          call polynomial_coeff_init(coeff_values(icycle),my_coeffs(icoeff)%nterm,&
7e0bbc3a1a (amartin             2017-06-29 10:47:23 +0200  580) &                                   coeffs_tmp(icycle),my_coeffs(icoeff)%terms,&
7e0bbc3a1a (amartin             2017-06-29 10:47:23 +0200  581) &                                   my_coeffs(icoeff)%name,&
7e0bbc3a1a (amartin             2017-06-29 10:47:23 +0200  582) &                                   check=.false.)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  583)          exit
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  584)        end if
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  585)      end do
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  586) !    Need to send the rank with the chosen coefficient
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  587)      call xmpi_sum(rank_to_send, comm, ierr)
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  588) !    Boadcast the coefficient
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  589)      call xmpi_bcast(energy_coeffs_tmp(icycle,:), rank_to_send, comm, ierr)
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  590)      call xmpi_bcast(fcart_coeffs_tmp(:,:,icycle,:) , rank_to_send, comm, ierr)
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  591)      call xmpi_bcast(strten_coeffs_tmp(:,:,icycle), rank_to_send, comm, ierr)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  592)      call polynomial_coeff_broadcast(coeffs_tmp(icycle), rank_to_send, comm)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  593)    end do
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  594)  end if
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  595) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  596) !Waiting for all
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  597)  if(nproc > 1)  then
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  598)    if(need_verbose)then
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  599)      write(message, '(a)') ' Initialisation done... waiting for all the CPU'
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  600)      call wrtout(std_out,message,'COLL')
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  601)    end if
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  602)    call xmpi_barrier(comm)
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  603)  end if
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  604) 
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  605) !Compute GF, coeff_values,strten_coeffs and fcart_coeffs are set to zero
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  606) !it means that only the harmonic part wiil be computed
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  607)  coeff_values = zero
a75a1cae5a (Alexandre Martin    2017-10-31 09:43:38 +0100  608) 
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  609)  call fit_polynomial_coeff_computeGF(coeff_values,energy_coeffs,fit_data%energy_diff,fcart_coeffs,&
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  610) &                                    fit_data%fcart_diff,gf_values(:,1),int((/1/)),natom_sc,&
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  611) &                                    0,my_ncoeff,ntime,strten_coeffs,fit_data%strten_diff,&
05ed0801ae (Alexandre Martin    2017-11-20 10:52:11 +0100  612) &                                    fit_data%training_set%sqomega)
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  613) 
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  614) !Print the standard deviation before the fit
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  615)  write(message,'(3a,ES24.16,4a,ES24.16,2a,ES24.16,2a,ES24.16,a)' ) &
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100  616) &                   ' Mean Standard Deviation values at the begining of the fit process (meV**2/atm):',&
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  617) &               ch10,'   Energy          : ',&
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100  618) &               gf_values(4,1)*factor*(Ha_EV*1000)**2  ,ch10,&
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  619) &                    ' Goal function values at the begining of the fit process (eV^2/A^2):',ch10,&
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  620) &                    '   Forces+Stresses : ',&
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  621) &               gf_values(1,1)*(HaBohr_meVAng)**2,ch10,&
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  622) &                    '   Forces          : ',&
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  623) &               gf_values(2,1)*(HaBohr_meVAng)**2,ch10,&
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  624) &                    '   Stresses        : ',&
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  625) &               gf_values(3,1)*(HaBohr_meVAng)**2,ch10
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  626)  if(need_verbose)then
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  627)    call wrtout(ab_out,message,'COLL')
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  628)    call wrtout(std_out,message,'COLL')
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  629)  end if
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  630) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  631)  select case(option)
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  632) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  633)  case(1)
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  634)    !Option 1, we select the coefficients one by one
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200  635)    if(need_verbose.and.ncycle > 0)then
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  636)      write(message,'(a,3x,a,10x,a,14x,a,14x,a,14x,a)') " N","Selecting","MSDE","MSDFS","MSDF","MSDS"
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  637)      call wrtout(ab_out,message,'COLL')
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100  638)      write(message,'(4x,a,6x,a,8x,a,8x,a,8x,a)') "Coefficient","(meV^2/atm)","(eV^2/A^2)","(eV^2/A^2)",&
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  639) &                                            "(eV^2/A^2)"
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  640)      call wrtout(ab_out,message,'COLL')
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  641)    end if
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  642) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  643) !  Start fit process
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  644)    do icycle_tmp = 1,ncycle
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  645)      icycle = ncycle_tot + 1
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  646)      list_coeffs_tmp(icycle) = icycle
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  647)      if(need_verbose)then
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  648)        write(message, '(4a,I0,a)')ch10,'--',ch10,' Try to find the best model with ',&
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  649) &                                 icycle,' coefficient'
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  650)        if(icycle > 1)  write(message, '(2a)') trim(message),'s'
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  651)        if(nproc > 1)  then
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  652)          if(my_ncoeff>=1) then
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  653)            write(message, '(2a,I0,a)')trim(message), ' (only the ',my_ncoeff,&
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  654) &                                                ' first are printed for this CPU)'
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  655)          else
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  656)            write(message, '(2a)')trim(message), ' (no coefficient treated by this CPU)'
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  657)          end if
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  658)        end if
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  659)        call wrtout(std_out,message,'COLL')
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  660)        if(icycle>1 .or. any(list_coeffs(:) > zero))then
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  661)          write(message, '(3a)') ' The coefficient numbers from the previous cycle are:',ch10,' ['
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  662)          do ii=1,icycle-1
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  663)            if(ii<icycle-1)then
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  664)              write(message, '(a,I0,a)') trim(message),list_coeffs(ii),','
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  665)            else
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  666)              write(message, '(a,I0)') trim(message),list_coeffs(ii)
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  667)            end if
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  668)          end do
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  669)          write(message, '(3a)') trim(message),']',ch10
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  670)          call wrtout(std_out,message,'COLL')
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  671)        end if
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  672) 
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  673)        write(message,'(2x,a,12x,a,14x,a,13x,a,14x,a)') " Testing","MSDE","MSDFS","MSDF","MSDS"
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  674)        call wrtout(std_out,message,'COLL')
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100  675)        write(message,'(a,7x,a,8x,a,8x,a,8x,a)') " Coefficient","(meV^2/atm)","(eV^2/A^2)","(eV^2/A^2)",&
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  676) &                                            "(eV^2/A^2)"
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  677)        call wrtout(std_out,message,'COLL')
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  678)      end if!End if verbose
736df84b18 (amartin             2017-06-20 12:27:38 +0200  679) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  680) !    Reset gf_values
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  681)      gf_values(:,:) = zero
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  682)      do icoeff=1,my_ncoeff
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200  683) !    cycle if this coefficient is not allowed
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  684)        if(any(list_coeffs==my_coeffindexes(icoeff)).or.singular_coeffs(icoeff) == 1) cycle
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  685)        if(nbancoeff >= 1)then
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  686)          if(any(bancoeff==my_coeffindexes(icoeff))) cycle
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  687)        end if
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  688)        list_coeffs(icycle) = my_coeffindexes(icoeff)
736df84b18 (amartin             2017-06-20 12:27:38 +0200  689) 
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  690)        if(need_initialize_data)then
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  691)          my_icoeff = icoeff
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  692)        else
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  693) !        Need to initialized the data for the fit for this coefficient
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  694)          my_icoeff = 1        
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  695)          call fit_polynomial_coeff_getFS(my_coeffs,fit_data%training_set%du_delta,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  696) &                                        fit_data%training_set%displacement,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  697) &                                        energy_coeffs,fcart_coeffs,natom_sc,eff_pot%crystal%natom,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  698) &                                        my_ncoeff,ntime,sc_size,fit_data%training_set%strain,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  699) &                                        strten_coeffs,fit_data%training_set%ucvol,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  700) &                                        my_coefflist(icoeff),1)
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  701)        end if
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  702)        
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  703) !      Fill the temporary arrays
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  704)        energy_coeffs_tmp(icycle,:)    = energy_coeffs(my_icoeff,:)
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  705)        fcart_coeffs_tmp(:,:,icycle,:) = fcart_coeffs(:,:,my_icoeff,:)
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  706)        strten_coeffs_tmp(:,:,icycle)  = strten_coeffs(:,:,my_icoeff)
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  707) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  708) !      call the fit process routine
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200  709) !      This routine solves the linear system proposed 
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200  710) !      by C.Escorihuela-Sayalero see PRB95,094115(2017) [[cite:Escorihuela-Sayalero2017]]
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  711)        call fit_polynomial_coeff_solve(coeff_values(1:icycle),fcart_coeffs_tmp,fit_data%fcart_diff,&
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200  712) &                                      energy_coeffs_tmp,fit_data%energy_diff,info,&
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200  713) &                                      list_coeffs_tmp(1:icycle),natom_sc,icycle,ncycle_max,ntime,&
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200  714) &                                      strten_coeffs_tmp,fit_data%strten_diff,&
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100  715) &                                      fit_data%training_set%sqomega,fit_on)
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  716)        if(info==0)then
a2dc5454f3 (mschmitt            2019-11-13 16:01:32 +0100  717)          if (need_positive.and.any(coeff_values(ncoeff_fix+1:icycle) < zero)) then
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  718)            write(message, '(a)') ' Negative value detected...'
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  719)            gf_values(:,icoeff) = zero
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100  720)            coeff_values = zero
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  721)          else
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  722)            call fit_polynomial_coeff_computeGF(coeff_values(1:icycle),energy_coeffs_tmp,&
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  723) &                                            fit_data%energy_diff,fcart_coeffs_tmp,fit_data%fcart_diff,&
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  724) &                                            gf_values(:,icoeff),list_coeffs_tmp(1:icycle),natom_sc,&
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  725) &                                            icycle,ncycle_max,ntime,strten_coeffs_tmp,&
05ed0801ae (Alexandre Martin    2017-11-20 10:52:11 +0100  726) &                                            fit_data%strten_diff,fit_data%training_set%sqomega)
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200  727) 
5186581add (amartin             2017-07-19 11:27:03 +0200  728) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  729)            write (j_char, '(i7)') my_coeffindexes(icoeff)
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  730)            write(message, '(4x,a,3x,4ES18.10)') adjustl(j_char),&
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100  731) &                                   gf_values(4,icoeff)*factor*(1000*Ha_ev)**2 ,&
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  732) &                                   gf_values(1,icoeff)*HaBohr_meVAng**2,&
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  733) &                                   gf_values(2,icoeff)*HaBohr_meVAng**2,&
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  734) &                                   gf_values(3,icoeff)*HaBohr_meVAng**2
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  735)          end if
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  736)        else!In this case the matrix is singular
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  737)          gf_values(:,icoeff) = zero
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  738)          singular_coeffs(icoeff) = 1
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  739)          write(message, '(a)') ' The matrix is singular...'
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200  740)        end if
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  741)        if(need_verbose) call wrtout(std_out,message,'COLL')
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  742)      end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200  743) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  744) !    find the best coeff on each CPU
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  745)      mingf(:)  = 9D99
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200  746)      index_min = 0
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  747)      do icoeff=1,my_ncoeff
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  748)        if(gf_values(1,icoeff) < zero) cycle
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  749)        if(abs(gf_values(1,icoeff)) <tol16) cycle
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100  750)        if(sum(gf_values(2:4,icoeff),MASK=sel_on) < sum(mingf(2:4),MASK=sel_on))then
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  751)          mingf(:) = gf_values(:,icoeff)
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  752)          index_min = my_coeffindexes(icoeff)
7db11d0e1a (amartin             2017-06-30 15:21:56 +0200  753)        end if
7db11d0e1a (amartin             2017-06-30 15:21:56 +0200  754)      end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200  755) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  756) !    MPI GATHER THE BEST COEFF ON EACH CPU
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  757)      if(nproc > 1)then
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  758)        buffGF(1,1) = index_min
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  759)        buffGF(2:5,1) =  mingf(:)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  760) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  761)        call xmpi_allgatherv(buffGF,5,gf_mpi,buffsize,buffdisp, comm, ierr)
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  762) !      find the best coeff
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  763)        mingf(:)    = 9D99
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200  764)        index_min= 0
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  765)        do icoeff=1,nproc
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  766)          if(gf_mpi(2,icoeff) < zero) cycle
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  767)          if(abs(gf_mpi(2,icoeff)) < tol16) cycle
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100  768)          if(sum(gf_mpi(3:5,icoeff),MASK=sel_on) < sum(mingf(2:4),MASK=sel_on))then
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  769)            mingf(:) = gf_mpi(2:5,icoeff)
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  770)            index_min = int(gf_mpi(1,icoeff))
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  771)          end if
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  772)        end do
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  773)      end if
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  774) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  775) !    Check if there is still coefficient
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200  776)      if(index_min==0) then
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  777)        exit
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  778)      else
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  779)        list_coeffs(icycle) = index_min
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  780)      end if
4a70269f5d (amartin             2017-06-28 16:48:47 +0200  781) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  782) !    Check if this coeff is treat by this cpu and fill the
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  783) !    temporary array before broadcast
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200  784)      rank_to_send = 0
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  785)      do icoeff=1,my_ncoeff
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  786) 
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  787) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  788)        if((my_coeffindexes(icoeff)==list_coeffs(icycle)))then
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  789) 
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  790)          if(need_initialize_data)then
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  791)            my_icoeff = icoeff
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  792)          else
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  793) !          Need to initialized the data for the fit for this coefficient
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  794)            my_icoeff = 1           
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  795)            call fit_polynomial_coeff_getFS(my_coeffs,fit_data%training_set%du_delta,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  796) &                                          fit_data%training_set%displacement,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  797) &                                          energy_coeffs,fcart_coeffs,natom_sc,eff_pot%crystal%natom,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  798) &                                          my_ncoeff,ntime,sc_size,fit_data%training_set%strain,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  799) &                                          strten_coeffs,fit_data%training_set%ucvol,&
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  800) &                                          my_coefflist(icoeff),1)
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  801)          end if
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  802) 
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  803)          energy_coeffs_tmp(icycle,:)    = energy_coeffs(my_icoeff,:)
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  804)          fcart_coeffs_tmp(:,:,icycle,:) = fcart_coeffs(:,:,my_icoeff,:)
0c4bcb452c (Alexandre Martin    2018-04-24 13:21:10 +0200  805)          strten_coeffs_tmp(:,:,icycle)  = strten_coeffs(:,:,my_icoeff)
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  806)          call polynomial_coeff_free(coeffs_tmp(icycle))
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  807)          call polynomial_coeff_init(coeff_values(icycle),my_coeffs(icoeff)%nterm,&
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  808) &                                   coeffs_tmp(icycle),my_coeffs(icoeff)%terms,&
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  809) &                                   my_coeffs(icoeff)%name,&
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  810) &                                   check=.false.)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  811) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  812)          rank_to_send = my_rank
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  813)          exit
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  814)        end if
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  815)      end do
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  816) !    Need to send the rank with the chosen coefficient
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  817)      call xmpi_sum(rank_to_send, comm, ierr)
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  818) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  819) !    Boadcast the coefficient
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  820)      call xmpi_bcast(energy_coeffs_tmp(icycle,:), rank_to_send, comm, ierr)
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  821)      call xmpi_bcast(fcart_coeffs_tmp(:,:,icycle,:) , rank_to_send, comm, ierr)
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  822)      call xmpi_bcast(strten_coeffs_tmp(:,:,icycle), rank_to_send, comm, ierr)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  823)      call polynomial_coeff_broadcast(coeffs_tmp(icycle), rank_to_send, comm)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200  824) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  825)      if(need_verbose) then
0c3ada340c (Alexandre Martin    2018-02-22 09:00:05 +0100  826)        write(message, '(a,I0,2a)' )' Selecting the coefficient number ',list_coeffs(icycle),&
0c3ada340c (Alexandre Martin    2018-02-22 09:00:05 +0100  827) &                                   ' ===> ',trim(coeffs_tmp(icycle)%name)
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  828)        call wrtout(std_out,message,'COLL')
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  829) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  830)        write(message, '(2a,I0,a,ES24.16)' )' Standard deviation of the energy for',&
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100  831) &                                        ' the iteration ',icycle_tmp,' (meV^2/atm): ',&
13221eeefa (mschmitt            2020-02-13 10:11:29 +0100  832) &                         mingf(4)* factor * (Ha_eV *1000)**2
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  833)        call wrtout(std_out,message,'COLL')
736df84b18 (amartin             2017-06-20 12:27:38 +0200  834) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  835)        write (i_char, '(i3)') icycle
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  836)        write (j_char, '(i7)') list_coeffs(icycle)
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  837)        write(message, '(a,a,3x,a,3x,4ES18.10)') " ",adjustl(i_char),adjustl(j_char),&
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100  838) &                                    mingf(4)* factor * (Ha_eV *1000)**2,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200  839) &                                    mingf(1)*HaBohr_meVAng**2,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200  840) &                                    mingf(2)*HaBohr_meVAng**2,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200  841) &                                    mingf(3)*HaBohr_meVAng**2
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  842)        call wrtout(ab_out,message,'COLL')
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  843)      end if
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  844) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  845)      ncycle_tot = ncycle_tot + 1
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  846) 
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  847) !    Check the stopping criterion
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  848)      converge = .false.
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  849)      if(tolMSDE  > zero)then
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100  850)        if(abs(tolMSDE) > abs(mingf(4)* (Ha_eV *1000)**2 *factor))then
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  851)          write(message,'(2a,ES18.10,a,ES18.10,a)') ch10," Fit process complete =>",&
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100  852) &                                                mingf(4)* (Ha_eV *1000)**2 * factor ," < ",tolMSDE,&
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  853) &                                              ' for MSDE'
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  854)          converge = .true.
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  855)        end if
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  856)      end if
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  857)      if(tolMSDF  > zero) then
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  858)        if(abs(tolMSDF) > abs(mingf(2)*HaBohr_meVAng**2))then
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  859)          write(message,'(2a,ES18.10,a,ES18.10,a)') ch10," Fit process complete =>",&
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  860) &                                                  mingf(2)*HaBohr_meVAng**2 ," < ",tolMSDF,&
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  861) &                                              ' for MSDF'
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  862)          converge = .true.
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  863)        end if
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  864)      end if
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  865)      if(tolMSDS  > zero) then
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  866)        if(abs(tolMSDS) > abs(mingf(3)*HaBohr_meVAng**2))then
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  867)          write(message,'(2a,ES18.10,a,ES18.10,a)') ch10," Fit process complete =>",&
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  868) &                                                  mingf(3)*HaBohr_meVAng**2 ," < ",tolMSDS,&
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  869) &                                              ' for MSDS'
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  870)          converge = .true.
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  871)        end if
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  872)      end if
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  873)      if(tolMSDFS > zero)then
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  874)        if(abs(tolMSDFS) > abs(mingf(1)*HaBohr_meVAng**2))then
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  875)          write(message,'(2a,ES18.10,a,ES18.10,a)') ch10," Fit process complete =>",&
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  876) &                                                  mingf(1)*HaBohr_meVAng**2 ," < ",tolMSDFS,&
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  877) &                                              ' for MSDFS'
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  878)          converge = .true.
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  879)        end if
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  880)      end if
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  881)      if(converge)then
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  882)        call wrtout(ab_out,message,'COLL')
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  883)        call wrtout(std_out,message,'COLL')
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  884)        exit
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  885)      else
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  886)        if(any((/abs(tolMSDE),abs(tolMSDF),abs(tolMSDS),abs(tolMSDFS)/) > tol20) .and.&
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  887) &         icycle_tmp == ncycle)then
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  888)          write(message,'(2a,I0,a)') ch10," WARNING: ",ncycle,&
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  889) &                                   " cycles was not enougth to converge the fit process"
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  890)          call wrtout(ab_out,message,'COLL')
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  891)          call wrtout(std_out,message,'COLL')
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  892)        end if
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  893)      end if
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  894) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  895)    end do
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  896) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  897)  case(2)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  898) 
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  899) !  Monte Carlo selection
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  900)    nsweep = 10000
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  901) !  If no coefficient imposed in the inputs we reset the goal function
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200  902)    if (ncycle_tot == 0) then
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  903)      gf_values(:,:) = zero
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  904)      mingf(:) = 9D99
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  905)    else
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  906)      mingf = gf_values(:,1)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  907)    end if
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  908)    call cpu_time(time)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  909)    call ZBQLINI(int(time*1000000/(my_rank+1)))
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  910)    if(need_verbose)then
8ad76a807d (Alexandre Martin    2018-02-14 09:31:57 +0100  911)      write(message,'(a,I0,a)') " Start Monte Carlo simulations on ", nproc," CPU"
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  912)      if(nproc>1) write(message,'(2a)') trim(message)," (only print result of the master)"
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  913)      call wrtout(std_out,message,'COLL')
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  914)      call wrtout(ab_out,message,'COLL')
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100  915)      write(message,'(a,2x,a,9x,a,14x,a,13x,a,14x,a)') ch10," Iteration ","MSDE","MSDFS","MSDF","MSdS"
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  916)      call wrtout(std_out,message,'COLL')
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100  917)      write(message,'(a,5x,a,8x,a,8x,a,8x,a)') "              ","(meV^2/atm)","(eV^2/A^2)","(eV^2/A^2)",&
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  918) &                                            "(eV^2/A^2)"
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  919)      call wrtout(std_out,message,'COLL')
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  920) 
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  921)    end if
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200  922) 
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  923)    do ii = 1,1!nyccle
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  924)      do isweep =1,nsweep
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  925)        write (j_char, '(i7)') isweep
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  926) !TEST_AM
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  927)        icycle_tmp = int(ZBQLU01(zero)*(ncycle+1-1))+1
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  928)        icycle_tmp = ncycle
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  929)        do icycle=1,icycle_tmp
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  930)          icoeff = int(ZBQLU01(zero)*(my_ncoeff))+1
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  931) !         icycle = int(ZBQLU01(zero)*(ncycle))+1
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  932)          list_coeffs_tmp2(icycle) = icoeff
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  933)          list_coeffs_tmp(icycle)= icycle
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  934) !        Fill the temporary arrays
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  935)          energy_coeffs_tmp(icycle,:)    = energy_coeffs(icoeff,:)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  936)          fcart_coeffs_tmp(:,:,icycle,:) = fcart_coeffs(:,:,icoeff,:)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  937)          strten_coeffs_tmp(:,:,icycle)  = strten_coeffs(:,:,icoeff)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  938)        end do
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  939) !TEST_AM
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  940) 
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  941) !      call the fit process routine
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200  942) !      This routine solves the linear system proposed by 
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200  943) !      C.Escorihuela-Sayalero see PRB95,094115(2017) [[cite:Escorihuela-Sayalero2017]]
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  944)        call fit_polynomial_coeff_solve(coeff_values(1:icycle_tmp),fcart_coeffs_tmp,fit_data%fcart_diff,&
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200  945) &                                      energy_coeffs_tmp,fit_data%energy_diff,info,&
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200  946) &                                      list_coeffs_tmp(1:icycle_tmp),natom_sc,icycle_tmp,ncycle_max,&
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200  947) &                                      ntime,strten_coeffs_tmp,fit_data%strten_diff,&
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100  948) &                                      fit_data%training_set%sqomega,fit_on)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  949)        if(info==0)then
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  950)          call fit_polynomial_coeff_computeGF(coeff_values(1:icycle_tmp),energy_coeffs_tmp,&
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  951) &                                            fit_data%energy_diff,fcart_coeffs_tmp,fit_data%fcart_diff,&
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  952) &                                            gf_values(:,1),list_coeffs_tmp(1:icycle_tmp),natom_sc,&
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  953) &                                            icycle_tmp,ncycle_max,ntime,strten_coeffs_tmp,&
05ed0801ae (Alexandre Martin    2017-11-20 10:52:11 +0100  954) &                                            fit_data%strten_diff,fit_data%training_set%sqomega)
05ed0801ae (Alexandre Martin    2017-11-20 10:52:11 +0100  955) 
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  956)        else!In this case the matrix is singular
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  957)          gf_values(:,icoeff) = zero
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  958)          singular_coeffs(icoeff) = 1
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  959)        end if
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  960) 
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  961)        if(gf_values(1,1) > zero.and.abs(gf_values(1,1))>tol16.and.&
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  962) &         gf_values(1,1) < mingf(1) ) then
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  963)          mingf = gf_values(:,1)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  964)          list_coeffs(1:icycle_tmp) = list_coeffs_tmp2(1:icycle_tmp)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  965)          ncycle_tot = icycle_tmp
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  966) 
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  967)          write(message, '(4x,a,3x,4ES18.10)') adjustl(j_char),&
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100  968) &                                   gf_values(4,1)* (1000*Ha_ev)**2 *factor,&
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  969) &                                   gf_values(1,1)*HaBohr_meVAng**2,&
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  970) &                                   gf_values(2,1)*HaBohr_meVAng**2,&
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  971) &                                   gf_values(3,1)*HaBohr_meVAng**2
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  972)          if(need_verbose) call wrtout(std_out,message,'COLL')
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  973)        else
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  974)          list_coeffs_tmp2(1:icycle_tmp) = list_coeffs(1:icycle_tmp)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  975)        end if
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  976)      end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200  977) 
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  978)      if(nproc > 1) then
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  979) !TEST_AM
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  980)        do iproc=1,ncycle_tot
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  981)          stat_coeff(list_coeffs(iproc)) =  stat_coeff(list_coeffs(iproc)) + 1
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  982)        end do
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  983) !TEST_AM
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  984) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  985) !    Find the best model on all the CPUs
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  986)        buffGF(1,1) = zero
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200  987)        buffGF(2:5,1) =  mingf(:)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  988)        call xmpi_allgatherv(buffGF,5,gf_mpi,buffsize,buffdisp, comm, ierr)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  989) !      find the best coeff
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200  990)        mingf(:) = 9D99
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200  991)        index_min= 0
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  992)        do iproc=1,nproc
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  993)          if(gf_mpi(2,iproc) < zero) cycle
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  994)          if(abs(gf_mpi(2,iproc)) <tol16) cycle
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  995)          if(gf_mpi(2,iproc) < mingf(1) ) then
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  996)            mingf(:) = gf_mpi(2:5,iproc)
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100  997)            index_min = int(gf_mpi(1,iproc))
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  998)            rank_to_send = iproc-1
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200  999)          end if
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1000)        end do
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1001)        write(message, '(2a,I0)') ch10,' Best model found on the CPU: ', rank_to_send
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1002)        call wrtout(std_out,message,'COLL')
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1003)      end if
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1004)    end do
a19cd1d02d (amartin             2017-07-05 09:27:39 +0200 1005) 
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1006) !TEST_AM
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1007)    call xmpi_sum(stat_coeff, comm, ierr)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1008)    do ii=1,ncoeff_tot
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1009)      write(100,*) ii,stat_coeff(ii)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1010)    end do
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1011)    close(100)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1012) !TEST_AM
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1013) 
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1014) !  Transfert final model
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1015)    if(nproc>1)then
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1016)      call xmpi_bcast(ncycle_tot,rank_to_send,comm,ierr)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1017)      call xmpi_bcast(list_coeffs(1:ncycle_tot),rank_to_send,comm,ierr)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1018)    end if
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1019)    do ii=1,ncycle_tot
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1020)      icoeff = list_coeffs(ii)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1021)      list_coeffs_tmp(ii) = ii
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1022) !    Fill the temporary arrays
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1023)      energy_coeffs_tmp(ii,:)    = energy_coeffs(icoeff,:)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1024)      fcart_coeffs_tmp(:,:,ii,:) = fcart_coeffs(:,:,icoeff,:)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1025)      strten_coeffs_tmp(:,:,ii)  = strten_coeffs(:,:,icoeff)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1026)      call polynomial_coeff_free(coeffs_tmp(ii))
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1027)      call polynomial_coeff_init(one,my_coeffs(icoeff)%nterm,&
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1028) &                               coeffs_tmp(ii),my_coeffs(icoeff)%terms,&
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1029) &                               my_coeffs(icoeff)%name,&
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1030) &                               check=.false.)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1031)    end do
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1032)  end select
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1033) 
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200 1034) !This routine solves the linear system proposed by 
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200 1035) ! C.Escorihuela-Sayalero see PRB95,094115(2017) [[cite:Escorihuela-Sayalero2017]]
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200 1036)  if(ncycle_tot > 0)then
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1037) 
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1038)    call fit_polynomial_coeff_solve(coeff_values(1:ncycle_tot),fcart_coeffs_tmp,fit_data%fcart_diff,&
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200 1039) &                                  energy_coeffs_tmp,fit_data%energy_diff,info,&
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200 1040) &                                  list_coeffs_tmp(1:ncycle_tot),natom_sc,&
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200 1041) &                                  ncycle_tot,ncycle_max,ntime,strten_coeffs_tmp,&
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1042) &                                  fit_data%strten_diff,fit_data%training_set%sqomega,fit_on)
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100 1043) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1044)    if(need_verbose) then
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1045)      write(message, '(3a)') ch10,' Fitted coefficients at the end of the fit process: '
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1046)      call wrtout(ab_out,message,'COLL')
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1047)      call wrtout(std_out,message,'COLL')
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1048)    end if
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1049)    do ii = 1,ncycle_tot
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1050)      if(list_coeffs(ii) ==0) cycle
5a1a1f2024 (amartin             2017-06-30 16:54:01 +0200 1051) !    Set the value of the coefficient
5a1a1f2024 (amartin             2017-06-30 16:54:01 +0200 1052)      coeffs_tmp(ii)%coefficient = coeff_values(ii)
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1053)      if(need_verbose) then
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1054)        write(message, '(a,I0,a,ES19.10,2a)') " ",list_coeffs(ii)," =>",coeff_values(ii),&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1055)          &                                " ",trim(coeffs_tmp(ii)%name)
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1056)        call wrtout(ab_out,message,'COLL')
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1057)        call wrtout(std_out,message,'COLL')
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1058)      end if
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1059)    end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1060) 
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1061)    call fit_polynomial_coeff_computeGF(coeff_values(1:ncycle_tot),energy_coeffs_tmp,&
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1062) &                                      fit_data%energy_diff,fcart_coeffs_tmp,fit_data%fcart_diff,&
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1063) &                                      gf_values(:,1),list_coeffs_tmp(1:ncycle_tot),natom_sc,&
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1064) &                                      ncycle_tot,ncycle_max,ntime,strten_coeffs_tmp,&
05ed0801ae (Alexandre Martin    2017-11-20 10:52:11 +0100 1065) &                                      fit_data%strten_diff,fit_data%training_set%sqomega)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1066) 
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1067)    if(need_verbose) then
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1068) !  Print the standard deviation after the fit
778fd1a00a (Marcus Schmitt      2019-04-12 17:37:33 +0200 1069)      write(message,'(4a,ES24.16,4a,ES24.16,2a,ES24.16,2a,ES24.16,a)' )ch10,&
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100 1070) &                    ' Mean Standard Deviation values at the end of the fit process (meV^2/atm): ',ch10,& 
778fd1a00a (Marcus Schmitt      2019-04-12 17:37:33 +0200 1071) &                    '   Energy          : ',&
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100 1072) &               gf_values(4,1)*(Ha_EV*1000)**2 *factor ,ch10,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1073) &                    ' Goal function values at the end of the fit process (eV^2/A^2):',ch10,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1074) &                    '   Forces+Stresses : ',&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1075) &               gf_values(1,1)*(HaBohr_meVAng)**2,ch10,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1076) &                    '   Forces          : ',&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1077) &               gf_values(2,1)*(HaBohr_meVAng)**2,ch10,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1078) &                    '   Stresses        : ',&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1079) &               gf_values(3,1)*(HaBohr_meVAng)**2,ch10
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1080)      call wrtout(ab_out,message,'COLL')
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1081)      call wrtout(std_out,message,'COLL')
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1082)    end if
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 1083)     
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1084) 
5a1a1f2024 (amartin             2017-06-30 16:54:01 +0200 1085) !  Set the final set of coefficients into the eff_pot type
5a1a1f2024 (amartin             2017-06-30 16:54:01 +0200 1086)    call effective_potential_setCoeffs(coeffs_tmp(1:ncycle_tot),eff_pot,ncycle_tot)
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1087) 
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1088)    ! If Wanted open the anharmonic_terms_file and write header
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1089)    filename = "TRS_fit_diff"
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1090)    ncoeff_model = eff_pot%anharmonics_terms%ncoeff
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1091)    if(need_prt_anh .and. ncoeff_model > 0 )then 
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1092)      call effective_potential_writeAnhHead(ncoeff_model,filename,&
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1093) &                                     eff_pot%anharmonics_terms) 
e665e06730 (mschmitt            2018-10-31 11:55:49 +0100 1094)    else if (need_prt_anh)then
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1095)      write(message, '(6a,I3,3a)' )ch10,&
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1096) &          ' --- !WARNING',ch10,&
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1097) &          '     Printing of anharmonic terms has been asked,but',ch10,&
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1098) &          '     there are',ncoeff_model,'anharmonic terms in the potential',ch10,&
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1099) &          ' ---',ch10
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1100)      call wrtout(ab_out,message,'COLL')
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1101)      call wrtout(std_out,message,'COLL')
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1102)    end if 
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1103) 
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1104) ! Calculate MSD values for final model 
3f45d650a1 (mschmitt            2020-01-15 15:20:43 +0100 1105)    if(need_prt_files)call fit_polynomial_coeff_computeMSD(eff_pot,hist,gf_values(4,1),gf_values(2,1),gf_values(1,1),&
090d1fa864 (mschmitt            2020-01-14 14:16:23 +0100 1106) &                                       natom_sc,ntime,fit_data%training_set%sqomega,comm,&
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 1107) &                                       compute_anharmonic=.TRUE.,print_file=.TRUE.,filename=filename)
f5523e3bfc (Alexandre Martin    2017-12-20 13:47:16 +0100 1108) 
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1109) 
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1110)    INQUIRE(FILE='TRS_fit_diff_anharmonic_terms_energy.dat',OPENED=file_opened,number=unit_anh)
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1111)    if(file_opened) close(unit_anh)
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 1112) 
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1113) !    if(need_verbose) then
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1114) ! !  Print the standard deviation after the fit
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1115) !      write(message,'(4a,ES24.16,4a,ES24.16,2a,ES24.16,2a,ES24.16,a)' )ch10,&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1116) ! &                    ' Mean Standard Deviation values at the end of the fit process (meV/f.u.):',&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1117) ! &               ch10,'   Energy          : ',&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1118) ! &               gf_values(4,1)*Ha_EV*1000/ ncell ,ch10,&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1119) ! &                    ' Goal function values at the end of the fit process (eV^2/A^2):',ch10,&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1120) ! &                    '   Forces+Stresses : ',&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1121) ! &               (gf_values(1,1)+gf_values(2,1))*(HaBohr_meVAng)**2,ch10,&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1122) ! &                    '   Forces          : ',&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1123) ! &               gf_values(2,1)*(HaBohr_meVAng)**2,ch10,&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1124) ! &                    '   Stresses        : ',&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1125) ! &               gf_values(3,1)*(HaBohr_meVAng)**2,ch10
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1126) !      call wrtout(ab_out,message,'COLL')
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1127) !      call wrtout(std_out,message,'COLL')
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1128) !    end if
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1129) 
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1130)  else
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1131)    if(need_verbose) then
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1132)      write(message, '(9a)' )ch10,&
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1133) &          ' --- !WARNING',ch10,&
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1134) &          '     The fit process does not provide possible terms.',ch10,&
fcf90f30c8 (mschmitt            2019-02-12 17:28:56 +0100 1135) &          '     Please make sure that the terms set is correct',ch10,&
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1136) &          ' ---',ch10
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1137)      call wrtout(ab_out,message,'COLL')
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1138)      call wrtout(std_out,message,'COLL')
b8934e06c0 (amartin             2017-07-19 10:54:03 +0200 1139)    end if
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1140)  end if
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1141) !Deallocation of arrays
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1142)  call fit_data_free(fit_data)
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1143) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1144) !Deallocate the temporary coefficient
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1145)  do ii=1,ncycle_max
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1146)    call polynomial_coeff_free(coeffs_tmp(ii))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1147)  end do
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1148)  ABI_DATATYPE_DEALLOCATE(coeffs_tmp)
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1149)  do ii=1,my_ncoeff
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1150)    call polynomial_coeff_free(my_coeffs(ii))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1151)  end do
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1152) 
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1153)  ABI_DATATYPE_DEALLOCATE(my_coeffs)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1154)  ABI_DEALLOCATE(buffsize)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1155)  ABI_DEALLOCATE(buffdisp)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1156)  ABI_DEALLOCATE(buffGF)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1157)  ABI_DEALLOCATE(coeff_values)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1158)  ABI_DEALLOCATE(energy_coeffs)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 1159)  ABI_DEALLOCATE(energy_coeffs_tmp)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1160)  ABI_DEALLOCATE(fcart_coeffs)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 1161)  ABI_DEALLOCATE(fcart_coeffs_tmp)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 1162)  ABI_DEALLOCATE(gf_mpi)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 1163)  ABI_DEALLOCATE(gf_values)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 1164)  ABI_DEALLOCATE(list_coeffs)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 1165)  ABI_DEALLOCATE(list_coeffs_tmp)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1166)  ABI_DEALLOCATE(list_coeffs_tmp2)
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1167)  ABI_DEALLOCATE(my_coeffindexes)
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1168)  ABI_DEALLOCATE(my_coefflist)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1169)  ABI_DEALLOCATE(singular_coeffs)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1170)  ABI_DEALLOCATE(strten_coeffs)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 1171)  ABI_DEALLOCATE(strten_coeffs_tmp)
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 1172)  ABI_DEALLOCATE(stat_coeff)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1173) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1174) end subroutine fit_polynomial_coeff_fit
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1175) !!***
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1176) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1177) !!****f* m_fit_polynomial_coeff/fit_polynomial_coeff_getPositive
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1178) !!
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1179) !! NAME
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1180) !! fit_polynomial_coeff_getPositive
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1181) !!
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1182) !! FUNCTION
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200 1183) !! This routine fit a list of possible model.
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200 1184) !! Return in the isPositive array:
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200 1185) !!   0 if the model ii does not contain possive coefficients
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200 1186) !!   1 if the model ii contain possive coefficients
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1187) !!
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1188) !! INPUTS
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200 1189) !! eff_pot<type(effective_potential)> = effective potential
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200 1190) !! hist<type(abihist)> = The history of the MD (or snapshot of DFT
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200 1191) !! coeff_values(nmodel,ncoeff) = values of the coefficients for each model
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200 1192) !! isPositive(nmodel) = see description below
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200 1193) !! list_coeff(nmodel,ncoeff) = list of the models
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200 1194) !! ncoeff = number of coeff per model
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1195) !! nfixcoeff = will not test the nfixcoeff first coeffcients
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200 1196) !! nmodel = number of model
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200 1197) !! comm = MPI communicator
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200 1198) !! verbose  = optional, flag for the verbose mode
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1199) !!
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1200) !! OUTPUT
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1201) !! eff_pot = effective potential datatype with new fitted coefficients
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1202) !!
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1203) !! PARENTS
6573fbac25 (Trunk               2020-08-13 18:22:36 +0200 1204) !!      m_mover_effpot
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1205) !!
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1206) !! CHILDREN
0f2f2fcb23 (gonze               2017-11-19 07:28:23 +0100 1207) !!      destroy_supercell,generelist,init_supercell,xred2xcart
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1208) !!
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1209) !! SOURCE
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1210) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1211) subroutine fit_polynomial_coeff_getPositive(eff_pot,hist,coeff_values,isPositive,list_coeff,ncoeff,&
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1212) &                                           nfixcoeff,nmodel,comm,verbose)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1213) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1214)  implicit none
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1215) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1216) !Arguments ------------------------------------
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1217) !scalars
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1218)  integer,intent(in) :: ncoeff,nfixcoeff,nmodel,comm
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1219) !arrays
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1220)  integer,intent(in)  :: list_coeff(nmodel,ncoeff)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1221)  integer,intent(out) :: isPositive(nmodel)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1222)  real(dp),intent(out) :: coeff_values(nmodel,ncoeff)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1223)  type(effective_potential_type),intent(inout) :: eff_pot
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1224)  type(abihist),intent(inout) :: hist
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1225)  logical,optional,intent(in) :: verbose
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1226) !Local variables-------------------------------
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1227) !scalar
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1228)  integer :: ierr,ii,info,imodel,my_nmodel,nmodel_alone
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1229)  integer :: master,my_rank,ncoeff_tot,natom_sc,ncell
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1230)  integer :: nproc,ntime
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1231)  logical :: iam_master,need_verbose
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1232) !arrays
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1233)  integer :: sc_size(3)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1234)  integer,allocatable  :: list_coeffs(:),my_modelindexes(:),my_modellist(:)
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1235)  real(dp),allocatable :: energy_coeffs(:,:),fcart_coeffs(:,:,:,:), strten_coeffs(:,:,:)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1236)  type(polynomial_coeff_type),allocatable :: coeffs_in(:)
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1237)  type(fit_data_type) :: fit_data
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1238)  character(len=500) :: message
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1239)  logical :: fit_on(3)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1240) ! *************************************************************************
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1241) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1242) !MPI variables
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1243)  master = 0
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1244)  nproc = xmpi_comm_size(comm); my_rank = xmpi_comm_rank(comm)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1245)  iam_master = (my_rank == master)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1246) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1247) !Initialisation of optional arguments
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1248)  need_verbose = .TRUE.
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1249)  if(present(verbose)) need_verbose = verbose
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1250) 
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1251)  fit_on(1) = .FALSE. 
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1252)  fit_on(2) = .TRUE.
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1253)  fit_on(3) = .TRUE. 
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1254) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1255) !Get the list of coefficients from the eff_pot
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200 1256)  if(eff_pot%anharmonics_terms%ncoeff > 0)then
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1257) !  Copy the initial coefficients array
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1258)    ncoeff_tot = eff_pot%anharmonics_terms%ncoeff
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1259)    ABI_DATATYPE_ALLOCATE(coeffs_in,(ncoeff_tot))
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1260)    do ii=1,ncoeff_tot
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1261)      call polynomial_coeff_init(eff_pot%anharmonics_terms%coefficients(ii)%coefficient,&
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1262) &                               eff_pot%anharmonics_terms%coefficients(ii)%nterm,&
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1263) &                               coeffs_in(ii),&
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1264) &                               eff_pot%anharmonics_terms%coefficients(ii)%terms,&
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1265) &                               eff_pot%anharmonics_terms%coefficients(ii)%name,&
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1266) &                               check=.false.)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1267)    end do
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1268)  end if
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1269) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1270) !Reset the output (we free the memory)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1271)  call effective_potential_freeCoeffs(eff_pot)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1272) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1273) !if the number of atoms in reference supercell into effpot is not corret,
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1274) !wrt to the number of atom in the hist, we set map the hist and set the good
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1275) !supercell
9b14042276 (amartin             2017-09-11 14:11:29 +0200 1276)  if (size(hist%xred,2) /= eff_pot%supercell%natom) then
a7facbc6d0 (Alexandre Martin    2017-09-13 14:42:06 +0200 1277)    call effective_potential_file_mapHistToRef(eff_pot,hist,comm,verbose=need_verbose)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1278)  end if
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1279) 
8bfff929f5 (Alexandre Martin    2017-08-25 10:03:21 +0200 1280) !Initialisation of constants
9b14042276 (amartin             2017-09-11 14:11:29 +0200 1281)  natom_sc   = eff_pot%supercell%natom
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1282)  ncell      = eff_pot%supercell%ncells
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1283)  ntime      = hist%mxhist
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1284)  do ii = 1, 3
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1285)    sc_size(ii) = eff_pot%supercell%rlatt(ii,ii)
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1286)  end do
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1287) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1288) !Initialisation of arrays:
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1289)  ABI_ALLOCATE(list_coeffs,(ncoeff_tot))
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200 1290)  list_coeffs  = 0
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1291)  do ii = 1,ncoeff_tot
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1292)    list_coeffs(ii) = ii
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1293)  end do
f5523e3bfc (Alexandre Martin    2017-12-20 13:47:16 +0100 1294) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1295) !Get the decomposition for each coefficients of the forces and stresses for
efd973c2c0 (mschmitt            2018-10-17 15:23:55 +0200 1296) !each atoms and each step  equations 11 & 12 of  PRB95,094115(2017) [[cite:Escorihuela-Sayalero2017]]
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1297)  if(need_verbose)then
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1298)    write(message, '(a)' ) ' Initialisation of the fit process...'
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1299)    call wrtout(std_out,message,'COLL')
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1300)  end if
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1301) !Before the fit, compute constants with fit_data_compute.
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1302) !Conpute the strain of each configuration.
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1303) !Compute the displacmeent of each configuration.
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1304) !Compute the variation of the displacement due to strain of each configuration.
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1305) !Compute fixed forces and stresse and get the standard deviation.
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1306) !Compute Sheppard and al Factors  \Omega^{2} see J.Chem Phys 136, 074103 (2012) [[cite:Sheppard2012]].
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1307)  call fit_data_compute(fit_data,eff_pot,hist,comm,verbose=need_verbose)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1308) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1309) !Get the decomposition for each coefficients of the forces,stresses and energy for
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1310) !each atoms and each step  (see equations 11 & 12 of  
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1311) ! PRB95,094115(2017)) [[cite:Escorihuela-Sayalero2017]] + allocation
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1312)  ABI_ALLOCATE(energy_coeffs,(ncoeff_tot,ntime))
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1313)  ABI_ALLOCATE(fcart_coeffs,(3,natom_sc,ncoeff_tot,ntime))
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1314)  ABI_ALLOCATE(strten_coeffs,(6,ntime,ncoeff_tot))
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1315) 
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1316)  call fit_polynomial_coeff_getFS(coeffs_in,fit_data%training_set%du_delta,&
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1317) &                                fit_data%training_set%displacement,&
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1318) &                                energy_coeffs,fcart_coeffs,natom_sc,eff_pot%crystal%natom,&
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1319) &                                ncoeff_tot,ntime,sc_size,&
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1320) &                                fit_data%training_set%strain,strten_coeffs,&
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1321) &                                fit_data%training_set%ucvol,list_coeffs,ncoeff_tot)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1322) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1323) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1324) !set MPI, really basic stuff...
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1325)  nmodel_alone = mod(nmodel,nproc)
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100 1326)  my_nmodel = int(aint(real(nmodel,sp)/(nproc)))
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1327) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1328)  if(my_rank >= (nproc-nmodel_alone)) then
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1329)    my_nmodel = my_nmodel  + 1
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1330)  end if
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1331) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1332)  ABI_ALLOCATE(my_modelindexes,(my_nmodel))
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1333)  ABI_ALLOCATE(my_modellist,(my_nmodel))
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1334) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1335) !2:compute the number of model and the list of the corresponding for each CPU.
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1336)  do imodel=1,my_nmodel
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1337)    if(my_rank >= (nproc-nmodel_alone))then
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100 1338)      my_modelindexes(imodel)=(int(aint(real(nmodel,sp)/nproc)))*(my_rank)+&
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1339) &                              (my_rank - (nproc-nmodel_alone)) + imodel
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1340)      my_modellist(imodel) = imodel
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1341)    else
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1342)      my_modelindexes(imodel)=(my_nmodel)*(my_rank)  + imodel
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1343)      my_modellist(imodel) = imodel
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1344)   end if
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1345)  end do
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1346) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1347) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1348) !Start fit process
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200 1349)  isPositive   = 0
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1350)  coeff_values = zero
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1351)  do ii=1,my_nmodel
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1352)    imodel = my_modelindexes(ii)
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1353)    call fit_polynomial_coeff_solve(coeff_values(imodel,1:ncoeff),fcart_coeffs,fit_data%fcart_diff,&
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1354) &                                  energy_coeffs,fit_data%energy_diff,info,&
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1355) &                                  list_coeff(imodel,1:ncoeff),natom_sc,ncoeff,&
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1356) &                                  ncoeff_tot,ntime,strten_coeffs,fit_data%strten_diff,&
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1357) &                                  fit_data%training_set%sqomega,fit_on)
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1358) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1359)    if(info==0)then
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1360) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1361)      if (any(coeff_values(imodel,nfixcoeff+1:ncoeff) < zero))then
c8502bbac5 (Alexandre Martin    2017-11-10 13:34:10 +0100 1362) !       coeff_values(imodel,:) = zero
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200 1363)        isPositive(imodel) = 0
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1364)      else
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100 1365)        isPositive(imodel) = 1
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1366)      end if
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1367)    end if
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1368)  end do
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1369) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1370)  call xmpi_sum(isPositive, comm, ierr)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1371)  call xmpi_sum(coeff_values, comm, ierr)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1372) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1373) !Deallocation of arrays
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1374)  do ii=1,ncoeff_tot
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1375)    call polynomial_coeff_free(coeffs_in(ii))
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1376)  end do
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1377)  call fit_data_free(fit_data)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1378)  ABI_DATATYPE_DEALLOCATE(coeffs_in)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1379)  ABI_DEALLOCATE(energy_coeffs)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1380)  ABI_DEALLOCATE(fcart_coeffs)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1381)  ABI_DEALLOCATE(list_coeffs)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1382)  ABI_DEALLOCATE(my_modelindexes)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1383)  ABI_DEALLOCATE(my_modellist)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1384)  ABI_DEALLOCATE(strten_coeffs)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1385) 
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1386) end subroutine fit_polynomial_coeff_getPositive
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1387) !!***
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1388) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1389) !!****f* m_fit_polynomial_coeff/fit_polynomial_coeff_getCoeffBound
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1390) !!
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1391) !! NAME
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1392) !! fit_polynomial_coeff_getCoeffBound
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1393) !!
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1394) !! FUNCTION
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1395) !! This routine fit a list of possible model.
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1396) !! Return in the isPositive array:
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1397) !!
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1398) !! INPUTS
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1399) !! NEED TO UPDATE
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1400) !! eff_pot<type(effective_potential)> = effective potential
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1401) !! hist<type(abihist)> = The history of the MD (or snapshot of DFT
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1402) !! comm = MPI communicator
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1403) !! verbose  = optional, flag for the verbose mode
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1404) !!
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1405) !! OUTPUT
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1406) !!
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1407) !!
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1408) !! PARENTS
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1409) !!
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1410) !! CHILDREN
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1411) !!      destroy_supercell,generelist,init_supercell,xred2xcart
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1412) !!
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1413) !! SOURCE
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1414) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1415) subroutine fit_polynomial_coeff_getCoeffBound(eff_pot,coeffs_out,hist,ncoeff_bound,comm,verbose)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1416) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1417)  implicit none
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1418) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1419) !Arguments ------------------------------------
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1420)  !scalars
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1421)  integer,intent(in) :: comm
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1422)  integer,intent(out) :: ncoeff_bound
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1423)  logical,optional,intent(in) :: verbose
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1424) !arrays
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1425)  type(abihist),intent(inout) :: hist
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1426)  type(effective_potential_type),target,intent(inout) :: eff_pot
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1427)  type(polynomial_coeff_type),allocatable,intent(out) :: coeffs_out(:)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1428) !Local variables-------------------------------
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1429) !scalar
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1430)  integer :: counter,icoeff,icoeff_bound,idisp,istrain,ii
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1431)  integer :: istart,iterm,ndisp,nstrain,nterm,ncoeff_model,ncoeff_in,ncoeff_max
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1432)  real(dp):: weight
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1433)  logical :: need_verbose
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1434) !arrays
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1435)  integer,allocatable :: atindx(:,:),cells(:,:,:),direction(:)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1436)  integer,allocatable :: power_disps(:),power_strain(:),strain(:)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1437)  type(polynomial_term_type),dimension(:),allocatable :: terms
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1438)  integer,allocatable :: odd_coeff(:),need_bound(:)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1439)  type(polynomial_coeff_type),pointer :: coeffs_in(:)
20bc013b6f (Alexandre Martin    2018-02-06 11:07:31 +0100 1440)  type(polynomial_coeff_type),allocatable :: coeffs_test(:)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1441)  character(len=5),allocatable :: symbols(:)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1442)  character(len=200):: name
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1443)  character(len=500) :: msg
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1444) ! *************************************************************************
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1445) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1446) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1447) !set the inputs varaibles
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1448)  ncoeff_model =  eff_pot%anharmonics_terms%ncoeff
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1449)  coeffs_in => eff_pot%anharmonics_terms%coefficients
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1450) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1451) !Do check
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1452)  if(ncoeff_model == 0)then
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1453)    write(msg,'(a)')'ncoeff_model must be different to 0'
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1454)    MSG_BUG(msg)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1455)  end if
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1456) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1457) !Map the hist in order to be consistent with the supercell into reference_effective_potential
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1458)  call effective_potential_file_mapHistToRef(eff_pot,hist,comm)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1459) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1460) !Initialisation of optional arguments
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1461)  need_verbose = .TRUE.
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1462)  if(present(verbose)) need_verbose = verbose
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1463) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1464)  write(msg, '(a)' ) ' Detection of the unbound coefficients'
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1465)  if(need_verbose)call wrtout(std_out,msg,'COLL')
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1466) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1467) !Allocation
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1468)  ncoeff_max = 2 * ncoeff_model
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1469)  ABI_ALLOCATE(odd_coeff,(ncoeff_max))
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1470)  ABI_ALLOCATE(need_bound,(ncoeff_max))
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1471) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1472)  ABI_ALLOCATE(symbols,(eff_pot%crystal%natom))
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1473)  call symbols_crystal(eff_pot%crystal%natom,eff_pot%crystal%ntypat,eff_pot%crystal%npsp,&
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1474) &                     symbols,eff_pot%crystal%typat,eff_pot%crystal%znucl)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1475) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1476) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1477)  ABI_DATATYPE_ALLOCATE(coeffs_test,(ncoeff_max))
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1478) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1479)  do icoeff=1,ncoeff_model
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1480)    call polynomial_coeff_init(coeffs_in(icoeff)%coefficient,coeffs_in(icoeff)%nterm,&
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1481) &                             coeffs_test(icoeff),coeffs_in(icoeff)%terms,&
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1482) &                             coeffs_in(icoeff)%name,check=.false.)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1483)  end do
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1484) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1485) !array to know which coeff has to be bound
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1486)  need_bound(:) = 1
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1487)  counter = 0
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1488)  ncoeff_in = ncoeff_model
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1489) 
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1490)  do while(.not.all(need_bound == 0).and.counter<1)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1491) !  Get the coefficients with odd coefficient
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1492)    odd_coeff = 0
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1493)    if(counter>0) then
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1494)      need_bound(1:ncoeff_in) = 0
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1495)      icoeff_bound = ncoeff_in
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1496)    else
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1497)      icoeff_bound = 1
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1498)    end if
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1499) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1500)    do icoeff=icoeff_bound,ncoeff_model
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1501)      if(any(mod(coeffs_in(icoeff)%terms(1)%power_disp(:),2)/=0))then
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1502)        odd_coeff(icoeff) = 1
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1503)      end if
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1504)      if(any(mod(coeffs_in(icoeff)%terms(1)%power_strain(:),2)/=0))then
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1505)        odd_coeff(icoeff) = 1
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1506)      end if
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1507)      if(odd_coeff(icoeff) == 0 .and. coeffs_in(icoeff)%coefficient > zero) then
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1508)        need_bound(icoeff) = 0
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1509)      else
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1510)         need_bound(icoeff) = 1
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1511)      end if
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1512)    end do
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1513)    if(need_verbose)then
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1514)      write(msg, '(a)' ) ' The following coefficients need to be bound:'
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1515)      call wrtout(std_out,msg,'COLL')
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1516)      do icoeff=1,ncoeff_model
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1517)        if(need_bound(icoeff) == 1)then
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1518)          write(msg, '(2a)' ) ' =>',trim(coeffs_in(icoeff)%name)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1519)          call wrtout(std_out,msg,'COLL')
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1520)        end if
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1521)      end do
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1522)    end if
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1523) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1524) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1525)    icoeff_bound = ncoeff_in + 1
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1526)    if(counter==0)then
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1527)      istart = 1
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1528)    else
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1529)      istart = ncoeff_in
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1530)    end if
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1531) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1532)    ncoeff_bound = count(need_bound(istart:ncoeff_model)==1)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1533) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1534)    do icoeff=istart,ncoeff_model
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1535)      if(need_bound(icoeff)==1)then
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1536) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1537)        nterm = coeffs_in(icoeff)%nterm
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1538)        ndisp = coeffs_in(icoeff)%terms(1)%ndisp
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1539)        nstrain = coeffs_in(icoeff)%terms(1)%nstrain
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1540) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1541)        ABI_ALLOCATE(terms,(nterm))
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1542)        ABI_ALLOCATE(atindx,(2,ndisp))
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1543)        ABI_ALLOCATE(cells,(3,2,ndisp))
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1544)        ABI_ALLOCATE(direction,(ndisp))
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1545)        ABI_ALLOCATE(power_disps,(ndisp))
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1546)        ABI_ALLOCATE(power_strain,(nstrain))
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1547)        ABI_ALLOCATE(strain,(nstrain))
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1548) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1549)        do iterm=1,coeffs_in(icoeff)%nterm
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1550)          atindx(:,:) = coeffs_in(icoeff)%terms(iterm)%atindx(:,:)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1551)          cells(:,:,:) = coeffs_in(icoeff)%terms(iterm)%cell(:,:,:)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1552)          direction(:) = coeffs_in(icoeff)%terms(iterm)%direction(:)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1553)          power_strain(:) = coeffs_in(icoeff)%terms(iterm)%power_strain(:)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1554)          power_disps(:) = coeffs_in(icoeff)%terms(iterm)%power_disp(:)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1555)          strain(:) =  coeffs_in(icoeff)%terms(iterm)%strain(:)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1556)          weight =  1
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1557)          do idisp=1,ndisp
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1558)            if(mod(power_disps(idisp),2) /= 0) then
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1559)              power_disps(idisp) = power_disps(idisp) + 1
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1560)            else
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1561)              power_disps(idisp) = power_disps(idisp) + 2
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1562)            end if
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1563)          end do
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1564)          do istrain=1,nstrain
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1565)            if(mod(power_strain(istrain),2) /= 0)then
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1566)              power_strain(istrain) = power_strain(istrain) + 1
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1567)            else
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1568)              if(power_strain(istrain) < 4 ) power_strain(istrain) = power_strain(istrain) + 2
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1569)            end if
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1570)          end do
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1571) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1572)          call polynomial_term_init(atindx,cells,direction,ndisp,nstrain,terms(iterm),&
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1573) &                                  power_disps,power_strain,strain,weight,check=.true.)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1574)        end do
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1575) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1576)        name = ""
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1577)        call polynomial_coeff_init(one,nterm,coeffs_test(icoeff_bound),terms,name,check=.true.)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1578)        call polynomial_coeff_getName(name,coeffs_test(icoeff_bound),symbols,recompute=.TRUE.)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1579)        call polynomial_coeff_SetName(name,coeffs_test(icoeff_bound))
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1580) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1581) !      Deallocate the terms
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1582)        do iterm=1,nterm
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1583)          call polynomial_term_free(terms(iterm))
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1584)        end do
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1585)        ABI_DEALLOCATE(terms)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1586)        ABI_DEALLOCATE(atindx)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1587)        ABI_DEALLOCATE(cells)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1588)        ABI_DEALLOCATE(direction)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1589)        ABI_DEALLOCATE(power_disps)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1590)        ABI_DEALLOCATE(power_strain)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1591)        ABI_DEALLOCATE(strain)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1592) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1593)        icoeff_bound = icoeff_bound  + 1
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1594) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1595)      end if
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1596)    end do
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1597) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1598) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1599)    if(counter==0)ncoeff_model = ncoeff_model + ncoeff_bound
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1600) !   call effective_potential_setCoeffs(coeffs_test,eff_pot,ncoeff_model)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1601)    call fit_polynomial_coeff_fit(eff_pot,(/0/),(/0/),hist,0,(/0,0/),1,0,&
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1602) &             -1,1,comm,verbose=.true.,positive=.false.)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1603) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1604)    coeffs_in => eff_pot%anharmonics_terms%coefficients
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1605) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1606)    counter = counter + 1
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1607)  end do
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1608) 
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1609)  ABI_ALLOCATE(coeffs_out,(ncoeff_bound))
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1610)  do ii=1,ncoeff_bound
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1611)    icoeff_bound = ncoeff_in + ii
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1612)    call polynomial_coeff_init(one,coeffs_test(icoeff_bound)%nterm,coeffs_out(ii),&
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1613) &                    coeffs_test(icoeff_bound)%terms,coeffs_test(icoeff_bound)%name,check=.true.)
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1614)  end do
3687959693 (Alexandre Martin    2018-02-06 10:40:11 +0100 1615) !Deallocation
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1616)  do ii=ncoeff_model,ncoeff_max
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1617)    call polynomial_coeff_free(coeffs_test(ii))
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1618)  end do
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1619) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1620) !Deallocation
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1621)  do icoeff=1,ncoeff_max
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1622)    call polynomial_coeff_free(coeffs_test(icoeff))
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1623)  end do
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1624)  ABI_DATATYPE_DEALLOCATE(coeffs_test)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1625)  ABI_DEALLOCATE(odd_coeff)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1626)  ABI_DEALLOCATE(need_bound)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1627)  ABI_DEALLOCATE(symbols)
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1628) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1629) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1630) end subroutine fit_polynomial_coeff_getCoeffBound
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1631) !!***
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1632) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1633) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1634) !!****f* m_fit_polynomial_coeff/fit_polynomial_coeff_solve
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1635) !!
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1636) !! NAME
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1637) !! fit_polynomial_coeff_solve
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1638) !!
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1639) !! FUNCTION
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1640) !! Build and the solve the system to get the values of the coefficients
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1641) !! This routine solves the linear system proposed by 
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1642) !! C.Escorihuela-Sayalero see PRB95,094115(2017) [[cite:Escorihuela-Sayalero2017]]
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1643) !!
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1644) !! INPUTS
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1645) !! fcart_coeffs(3,natom_sc,ncoeff_max,ntime) = List of the values of the contribution to the
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1646) !!                                             cartesian forces for all coefficients
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1647) !!                                             for each direction and each time
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1648) !! fcart_diff(3,natom,ntime) = Difference of cartesian forces between DFT calculation and
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1649) !!                             fixed part of the model (more often harmonic part)
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1650) !! energy_coeffs(ncoeff,ntime)   = value of the energy for each  coefficient (Ha)
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1651) !! energy_diff(ntime) = Difference of energ ybetween DFT calculation and fixed part
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1652) !!                             of the model (more often harmonic part)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1653) !! list_coeffs(ncoeff_fit) = List with the index of the coefficients used for this model
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1654) !! natom = Number of atoms
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1655) !! ncoeff_fit = Number of coeff for the fit (dimension of the system)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1656) !! ncoeff_max = Maximum number of coeff in the list
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1657) !! ntime = Number of time (number of snapshot, number of md step...)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1658) !! strten_coeffs(6,ntime,ncoeff_max) = List of the values of the contribution to the stress tensor
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1659) !!                                      of  the coefficients for each direction,time
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1660) !! strten_diff(6,natom) = Difference of stress tensor between DFT calculation and
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1661) !!                        fixed part of the model (more often harmonic part)
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1662) !! sqomega(ntime) =  Sheppard and al Factors \Omega^{2} see J.Chem Phys 136, 074103 (2012) [[cite:Sheppard2012]]
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1663) !!
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1664) !! OUTPUT
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1665) !! coefficients(ncoeff_fit) = Values of the coefficients
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1666) !! info_out = 0:  successful exit
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1667) !!          < 0:  if INFO = -i, the i-th argument had an illegal value
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1668) !!          > 0:  if INFO = i, U(i,i) computed in DOUBLE PRECISION is
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1669) !!                exactly zero.  The factorization has been completed,
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1670) !!                but the factor U is exactly singular, so the solution
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1671) !!                could not be computed.  = 0:  successful exit
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1672) !!          information from the subroutine dsgesv in LAPACK
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1673) !!
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1674) !! PARENTS
6573fbac25 (Trunk               2020-08-13 18:22:36 +0200 1675) !!      m_fit_polynomial_coeff,m_opt_effpot
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1676) !!
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1677) !! CHILDREN
0f2f2fcb23 (gonze               2017-11-19 07:28:23 +0100 1678) !!      destroy_supercell,generelist,init_supercell,xred2xcart
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1679) !!
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1680) !! SOURCE
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1681) 
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1682) subroutine fit_polynomial_coeff_solve(coefficients,fcart_coeffs,fcart_diff,energy_coeffs,energy_diff,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1683) &                                     info_out,list_coeffs,natom,ncoeff_fit,ncoeff_max,ntime,&
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1684) &                                     strten_coeffs,strten_diff,sqomega,fit_on)
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200 1685) 
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200 1686)  implicit none
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200 1687) 
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200 1688) !Arguments ------------------------------------
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200 1689) !scalars
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1690)  integer,intent(in)  :: natom,ncoeff_fit,ncoeff_max,ntime
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1691)  integer,intent(out) :: info_out
7637b8a3aa (mschmitt            2018-10-10 17:45:44 +0200 1692) !arrays
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1693)  real(dp),intent(in) :: energy_coeffs(ncoeff_max,ntime)
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1694)  real(dp),intent(in) :: energy_diff(ntime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1695)  integer,intent(in)  :: list_coeffs(ncoeff_fit)
7db11d0e1a (amartin             2017-06-30 15:21:56 +0200 1696)  real(dp),intent(in) :: fcart_coeffs(3,natom,ncoeff_max,ntime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1697)  real(dp),intent(in) :: fcart_diff(3,natom,ntime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1698)  real(dp),intent(in) :: strten_coeffs(6,ntime,ncoeff_max)
05ed0801ae (Alexandre Martin    2017-11-20 10:52:11 +0100 1699)  real(dp),intent(in) :: strten_diff(6,ntime),sqomega(ntime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1700)  real(dp),intent(out):: coefficients(ncoeff_fit)
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1701)  logical,intent(in)  :: fit_on(3)
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200 1702) !Local variables-------------------------------
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200 1703) !scalar
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1704)  integer :: ia,itime,icoeff,jcoeff,icoeff_tmp,jcoeff_tmp,mu,LDA,LDB,LDX,LDAF,N,NRHS
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1705)  real(dp):: efact,ffact,sfact,ftmpA,stmpA,ftmpB,stmpB,etmpA,etmpB,fmu,fnu,smu,snu,emu,enu
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1706)  integer :: INFO,ITER
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1707)  real(dp):: RCOND
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1708)  real(dp):: fcart_coeffs_tmp(3,natom,ntime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1709)  real(dp),allocatable:: AF(:,:),BERR(:),FERR(:),WORK(:),C(:),R(:)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1710)  integer,allocatable :: IPIV(:),IWORK(:),SWORK(:)
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200 1711) !arrays
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1712)  real(dp),allocatable :: A(:,:),B(:,:)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1713)  character(len=1) :: FACT,EQUED,TRANS
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1714) ! character(len=500) :: message
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200 1715) ! *************************************************************************
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200 1716) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1717) !0-Set variables for the
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1718)  N    = ncoeff_fit; NRHS = 1; LDA  = ncoeff_fit; LDB  = ncoeff_fit; LDX  = ncoeff_fit
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200 1719)  LDAF = ncoeff_fit;  RCOND = zero; INFO  = 0; TRANS='N'; EQUED='N'; FACT='N'
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200 1720) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1721) !Set the factors
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1722)  ffact = one/(3*natom*ntime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1723)  sfact = one/(6*ntime)
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1724)  efact = one/(ntime)
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 1725) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1726) !0-Allocation
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1727)  ABI_ALLOCATE(A,(LDA,N))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1728)  ABI_ALLOCATE(B,(LDB,NRHS))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1729)  ABI_ALLOCATE(AF,(LDAF,N))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1730)  ABI_ALLOCATE(IPIV,(N))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1731)  ABI_ALLOCATE(R,(N))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1732)  ABI_ALLOCATE(C,(N))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1733)  ABI_ALLOCATE(FERR,(NRHS))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1734)  ABI_ALLOCATE(BERR,(NRHS))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1735)  ABI_ALLOCATE(WORK,(4*N))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1736)  ABI_ALLOCATE(IWORK,(N))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1737)  ABI_ALLOCATE(SWORK,(N*(N+NRHS)))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1738)  A=zero; B=zero;
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1739)  AF = zero; IPIV = 1;
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1740)  R = one; C = one;
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1741)  FERR = zero; BERR = zero
c92782be8e (Alexandre Martin    2017-10-03 11:42:00 +0200 1742)  IWORK = 0; WORK = 0
d90dd17c8a (mschmitt            2020-03-05 17:39:44 +0100 1743)  
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1744) !1-Get forces and stresses from the model and fill A
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1745) !  Fill alsor B with the forces and stresses from
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1746) !  the DFT snapshot and the model
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1747) !  See equation 17 of PRB95 094115 (2017) [[cite:Escorihuela-Sayalero2017]]
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1748)  do icoeff=1,ncoeff_fit
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1749)    icoeff_tmp = list_coeffs(icoeff)
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1750)    fcart_coeffs_tmp(:,:,:) = fcart_coeffs(:,:,icoeff_tmp,:)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1751)    ftmpA= zero; ftmpB = zero
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1752)    stmpA= zero; stmpB = zero
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1753)    etmpA= zero; etmpB = zero
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1754) !  loop over the configuration
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1755)    do itime=1,ntime
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1756) !    Fill energy
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1757)      emu = energy_coeffs(icoeff_tmp,itime)
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1758)      do jcoeff=1,ncoeff_fit
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1759)        jcoeff_tmp = list_coeffs(jcoeff)
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1760)        enu = energy_coeffs(jcoeff_tmp,itime)
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1761)        if(fit_on(3))then
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1762)          etmpA =  emu*enu
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1763)          A(icoeff,jcoeff) = A(icoeff,jcoeff) + efact*etmpA
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1764)        endif
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1765)      end do
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1766)      if(fit_on(3))then 
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1767)         etmpB = etmpB + energy_diff(itime)*emu !/ (sqomega(itime)**3)
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1768)      else 
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1769)         etmpB = zero ! REMOVE THIS LINE TO TAKE INTO ACOUNT THE ENERGY     
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1770)      endif
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1771) !    Fill forces
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1772)      do ia=1,natom
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1773)        do mu=1,3
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1774)          fmu = fcart_coeffs_tmp(mu,ia,itime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1775)          do jcoeff=1,ncoeff_fit
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1776)            jcoeff_tmp = list_coeffs(jcoeff)
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1777)            fnu = fcart_coeffs(mu,ia,jcoeff_tmp,itime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1778)            ftmpA =  fmu*fnu
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1779)            if(fit_on(1))A(icoeff,jcoeff) = A(icoeff,jcoeff) + ffact*ftmpA
c34d5d2b6c (amartin             2017-03-28 08:52:14 +0200 1780)          end do
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1781)          if(fit_on(1))then 
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1782)            ftmpB = ftmpB + fcart_diff(mu,ia,itime)*fmu
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1783)          else 
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1784)            ftmpB = zero 
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1785)          endif
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1786)        end do !End loop dir
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1787)      end do !End loop natom
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1788) !    Fill stresses
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1789)      do mu=1,6
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1790)        smu = strten_coeffs(mu,itime,icoeff_tmp)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1791)        do jcoeff=1,ncoeff_fit
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1792)          jcoeff_tmp = list_coeffs(jcoeff)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1793)          snu = strten_coeffs(mu,itime,jcoeff_tmp)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1794)          stmpA =  sqomega(itime)*smu*snu
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1795)          if(fit_on(2))A(icoeff,jcoeff) = A(icoeff,jcoeff) + sfact*stmpA
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1796)        end do
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1797)         if(fit_on(2))then
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1798)           stmpB = stmpB + sqomega(itime)*strten_diff(mu,itime)*smu
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1799)         else 
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1800)           stmpB = zero 
2f61fdad4b (mschmitt            2020-02-21 15:22:27 +0100 1801)         endif
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1802)      end do !End loop stress dir
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1803)    end do ! End loop time
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1804)    B(icoeff,1) = B(icoeff,1) + ffact*ftmpB + sfact*stmpB + efact*etmpB
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1805)  end do ! End loop icoeff
cb0c22a3b7 (amartin             2017-01-24 11:36:51 +0100 1806) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1807) !2-Solve Ax=B
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1808) !OLD VERSION..
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1809) ! call dgesvx(FACT,TRANS,N,NRHS,A,LDA,AF,LDAF,IPIV,EQUED,R,C,B,LDB,coefficients,LDX,&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1810) !             RCOND,FERR,BERR,WORK,IWORK,INFO)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1811) !U is nonsingular
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1812) ! if (INFO==N+1) then
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1813) !   coefficients = zero
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1814) ! end if
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100 1815)  call DSGESV(N,NRHS,A,LDA,IPIV,B,LDB,coefficients,LDX,WORK,SWORK,ITER,INFO)
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1816) 
47dec75d8c (Alexandre Martin    2017-09-05 13:28:43 +0200 1817) !other routine
47dec75d8c (Alexandre Martin    2017-09-05 13:28:43 +0200 1818) ! call dgesv(N,NRHS,A,LDA,IPIV,B,LDB,INFO)
47dec75d8c (Alexandre Martin    2017-09-05 13:28:43 +0200 1819) ! coefficients = B(:,NRHS)
47dec75d8c (Alexandre Martin    2017-09-05 13:28:43 +0200 1820)  !U is nonsingular
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1821)  if (INFO==N+2) then
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1822)    coefficients = zero
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1823)  end if
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 1824) 
3a9fec56d8 (Alexandre Martin    2017-12-13 09:49:56 +0100 1825)  if(any(abs(coefficients)>1.0E10))then
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1826)    INFO = 1
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1827)    coefficients = zero
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 1828)  end if
a19cd1d02d (amartin             2017-07-05 09:27:39 +0200 1829) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1830)  info_out = INFO
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 1831) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1832)  ABI_DEALLOCATE(AF)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1833)  ABI_DEALLOCATE(IPIV)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1834)  ABI_DEALLOCATE(R)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1835)  ABI_DEALLOCATE(C)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1836)  ABI_DEALLOCATE(FERR)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1837)  ABI_DEALLOCATE(BERR)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1838)  ABI_DEALLOCATE(WORK)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1839)  ABI_DEALLOCATE(IWORK)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1840)  ABI_DEALLOCATE(SWORK)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1841)  ABI_DEALLOCATE(A)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1842)  ABI_DEALLOCATE(B)
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 1843) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1844) end subroutine fit_polynomial_coeff_solve
7ef1580893 (amartin             2017-01-24 13:06:11 +0100 1845) !!***
cb0c22a3b7 (amartin             2017-01-24 11:36:51 +0100 1846) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1847) !!****f* m_fit_polynomial_coeff/fit_polynomial_coeff_computeGF
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1848) !!
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1849) !! NAME
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1850) !! fit_polynomial_coeff_computeGF
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1851) !!
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1852) !! FUNCTION
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1853) !! Compute the values of the goal function (Mean squared error) for
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100 1854) !!   gf_value(1) = stresses+forces (Ha/Bohr)**2
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100 1855) !!   gf_value(2) = forces (Ha/Bohr)**2  
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100 1856) !!   gf_value(3) = stresses (Ha/Bohr)**2
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100 1857) !!   gf_value(4) = energy (Ha)**2
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1858) !!
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1859) !! INPUTS
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1860) !! coefficients(ncoeff)          = type(polynomial_coeff_type)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1861) !! energy_coeffs(ncoeff,ntime)   = value of the energy for each  coefficient (Ha)
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1862) !! energy_diff(ntime) = Difference of energ ybetween DFT calculation and fixed part
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1863) !!                             of the model (more often harmonic part)
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1864) !!                             fixed part of the model (more often harmonic part)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1865) !! fcart_coeffs(ncoeff,3,natom,ntime) = value of the forces for each coefficient
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1866) !!                                      (-1 factor is taking into acount) (Ha/Bohr)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1867) !! fcart_diff(3,natom,ntime) = Difference of cartesian forces between DFT calculation and
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1868) !!                             fixed part of the model (more often harmonic part)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1869) !! list_coeffs(ncoeff_fit) = List with the indexes of the coefficients used for this model
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1870) !! natom = Number of atoms
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1871) !! ncoeff_fit = Number of coefficients fitted
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1872) !! ncoeff_max = Maximum number of coeff in the list
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1873) !! ntime = Number of time in the history
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1874) !! strten_coeffs(ncoeff,3,natom,ntime)= value of the stresses for each coefficient
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1875) !!                                      (1/ucvol factor is taking into acount) (Ha/Bohr^3)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1876) !! strten_diff(6,natom) = Difference of stress tensor between DFT calculation and
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1877) !!                        fixed part of the model (more often harmonic part)
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1878) !! sqomega =  Sheppard and al Factors \Omega^{2} see J.Chem Phys 136, 074103 (2012) [[cite:Sheppard2012]]
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1879) !!
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1880) !! OUTPUT
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1881) !! gf_value(4) = Goal function
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1882) !!
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1883) !! PARENTS
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1884) !!      m_fit_polynomial_coeff
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1885) !!
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1886) !! CHILDREN
0f2f2fcb23 (gonze               2017-11-19 07:28:23 +0100 1887) !!      destroy_supercell,generelist,init_supercell,xred2xcart
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1888) !!
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1889) !! SOURCE
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1890) 
7db11d0e1a (amartin             2017-06-30 15:21:56 +0200 1891) subroutine fit_polynomial_coeff_computeGF(coefficients,energy_coeffs,energy_diff,&
2eef72addc (amartin             2017-07-05 17:00:09 +0200 1892) &                                         fcart_coeffs,fcart_diff,gf_value,list_coeffs,&
c9b9d0ccd5 (amartin             2017-06-20 15:27:18 +0200 1893) &                                         natom,ncoeff_fit,ncoeff_max,ntime,strten_coeffs,&
05ed0801ae (Alexandre Martin    2017-11-20 10:52:11 +0100 1894) &                                         strten_diff,sqomega)
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1895) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1896)  implicit none
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1897) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1898) !Arguments ------------------------------------
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1899) !scalars
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1900)  integer,intent(in)  :: natom,ncoeff_fit,ncoeff_max,ntime
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1901) !arrays
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1902)  integer,intent(in)  :: list_coeffs(ncoeff_fit)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1903)  real(dp),intent(in) :: energy_coeffs(ncoeff_max,ntime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1904)  real(dp),intent(in) :: energy_diff(ntime)
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1905)  real(dp),intent(in) :: fcart_coeffs(3,natom,ncoeff_max,ntime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1906)  real(dp),intent(in) :: fcart_diff(3,natom,ntime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1907)  real(dp),intent(in) :: strten_coeffs(6,ntime,ncoeff_max)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1908)  real(dp),intent(in) :: strten_diff(6,ntime),sqomega(ntime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1909)  real(dp),intent(in) :: coefficients(ncoeff_fit)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1910)  real(dp),intent(out) :: gf_value(4)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1911) !Local variables-------------------------------
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1912) !scalar
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1913)  integer :: ia,icoeff,icoeff_tmp,itime,mu
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1914)  real(dp):: etmp,emu,fmu,ftmp,smu,stmp
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1915)  real(dp) :: ffact,sfact,efact
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1916) !arrays
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1917) ! *************************************************************************
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1918) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1919) !1-Compute the value of the goal function
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1920) ! see equation 9 of PRB 95 094115(2017) [[cite:Escorihuela-Sayalero2017]]
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1921)  gf_value = zero
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1922)  etmp     = zero
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1923)  ftmp     = zero
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1924)  stmp     = zero
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1925) 
2eef72addc (amartin             2017-07-05 17:00:09 +0200 1926) !Compute factors
2eef72addc (amartin             2017-07-05 17:00:09 +0200 1927)  ffact = one/(3*natom*ntime)
2eef72addc (amartin             2017-07-05 17:00:09 +0200 1928)  sfact = one/(6*ntime)
4d0027b5ae (mschmitt            2018-10-17 15:26:53 +0200 1929)  efact = one/(ntime)
7637b8a3aa (mschmitt            2018-10-10 17:45:44 +0200 1930) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1931) ! loop over the configuration
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1932)  do itime=1,ntime
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1933) ! Fill energy
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1934)    emu = zero
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1935)    do icoeff=1,ncoeff_fit
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1936)      icoeff_tmp = list_coeffs(icoeff)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1937)      emu = emu + coefficients(icoeff)*energy_coeffs(icoeff_tmp,itime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1938)    end do
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1939) !   uncomment the next line to be consistent with the definition of the goal function   
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100 1940)    etmp = etmp + (energy_diff(itime)-emu)**2
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100 1941) !   uncomment the next get a measure in Ha instead of Ha^2   
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100 1942) !   etmp = etmp + abs(energy_diff(itime)-emu)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1943) !  Fill forces
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1944)    do ia=1,natom
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1945)      do mu=1,3
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1946)        fmu  = zero
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1947)        do icoeff=1,ncoeff_fit
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1948)          icoeff_tmp = list_coeffs(icoeff)
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 1949)          fmu =  fmu + coefficients(icoeff)*fcart_coeffs(mu,ia,icoeff_tmp,itime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1950)        end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1951)        ftmp = ftmp + (fcart_diff(mu,ia,itime)-fmu)**2
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1952)      end do !End loop dir
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1953)    end do !End loop natom
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1954)    do mu=1,6
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1955)      smu = zero
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1956)      do icoeff=1,ncoeff_fit
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1957)        icoeff_tmp = list_coeffs(icoeff)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1958)        smu = smu + coefficients(icoeff)*strten_coeffs(mu,itime,icoeff_tmp)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1959)      end do
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1960)      stmp = stmp + sqomega(itime)*(strten_diff(mu,itime)-smu)**2
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1961)    end do !End loop stress dir
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1962)  end do ! End loop time
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1963) 
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1964)  gf_value(1)   =  ffact*ftmp + sfact*stmp !+ efact*etmp !Stresses + Forces
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1965)  gf_value(2)   =  ffact*ftmp ! only Forces
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1966)  gf_value(3)   =  sfact*stmp ! only Stresses
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1967)  gf_value(4)   =  efact*etmp !abs(Energy)
f87e1a76a5 (Alexandre Martin    2017-09-12 14:39:39 +0200 1968) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1969) end subroutine fit_polynomial_coeff_computeGF
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1970) !!***
bde3aa0a16 (amartin             2017-03-28 16:55:51 +0200 1971) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1972) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1973) !!****f* m_fit_polynomial_coeff/fit_polynomial_coeff_getFS
6c16042278 (amartin             2017-04-07 15:24:00 +0200 1974) !!
6c16042278 (amartin             2017-04-07 15:24:00 +0200 1975) !! NAME
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1976) !! fit_polynomial_coeff_getFS
6c16042278 (amartin             2017-04-07 15:24:00 +0200 1977) !!
6c16042278 (amartin             2017-04-07 15:24:00 +0200 1978) !! FUNCTION
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 1979) !! Compute all the matrix elements of eq.11 and 12 in PRB95,094115 (2017) [[cite:Escorihuela-Sayalero2017]]
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1980) !!
6c16042278 (amartin             2017-04-07 15:24:00 +0200 1981) !! INPUTS
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1982) !! coefficients(ncoeff)          = type(polynomial_coeff_type)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1983) !! du_delta(6,3,natom_sc,ntime)  = Variation to displacements wrt to the strain (Bohr)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1984) !! displacement(3,natom_sc,ntime)= Atomic displacement wrt to the reference (Bohr)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1985) !! natom_sc = Number of atoms in the supercell
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1986) !! natom_uc = Number of atoms in the unit cell
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 1987) !! ncoeff = Number of coefficients
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1988) !! ntime = Number of time in the history
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1989) !! sc_size(3) = Size of the supercell
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1990) !! strain(6,ntime) = Strain
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1991) !! ucvol(ntime) = Volume of the supercell for each time (Bohr^3)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1992) !! cells(ncell) = Indexes of the cell treat by this CPU
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1993) !! ncell = Number of cell treat by this CPU
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1994) !! index_cells(ncell,3) = Indexes of the cells (1 1 1, 0 0 0 for instance) treat by this CPU
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1995) !! comm  = MPI communicator
6c16042278 (amartin             2017-04-07 15:24:00 +0200 1996) !!
6c16042278 (amartin             2017-04-07 15:24:00 +0200 1997) !! OUTPUT
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1998) !! fcart_out(ncoeff,3,natom,ntime) = value of the forces for each coefficient
736df84b18 (amartin             2017-06-20 12:27:38 +0200 1999) !!                                   (-1 factor is taking into acount) (Ha/Bohr)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2000) !! strten_out(ncoeff,3,natom,ntime)= value of the stresses for each coefficient
f128e7d104 (Alexandre Martin    2017-09-20 12:59:08 +0200 2001) !!                                   (-1/ucvol factor is taking into acount) (Ha/Bohr^3)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2002) !! energy_out(ncoeff,ntime)        = value of the energy for each  coefficient (Ha)
6c16042278 (amartin             2017-04-07 15:24:00 +0200 2003) !!
6c16042278 (amartin             2017-04-07 15:24:00 +0200 2004) !! PARENTS
6573fbac25 (Trunk               2020-08-13 18:22:36 +0200 2005) !!      m_fit_polynomial_coeff,m_opt_effpot
6c16042278 (amartin             2017-04-07 15:24:00 +0200 2006) !!
6c16042278 (amartin             2017-04-07 15:24:00 +0200 2007) !! CHILDREN
0f2f2fcb23 (gonze               2017-11-19 07:28:23 +0100 2008) !!      destroy_supercell,generelist,init_supercell,xred2xcart
6c16042278 (amartin             2017-04-07 15:24:00 +0200 2009) !!
6c16042278 (amartin             2017-04-07 15:24:00 +0200 2010) !! SOURCE
6c16042278 (amartin             2017-04-07 15:24:00 +0200 2011) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2012) subroutine fit_polynomial_coeff_getFS(coefficients,du_delta,displacement,energy_out,fcart_out,&
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2013) &                                     natom_sc,natom_uc,ncoeff_max,ntime,sc_size,strain,strten_out,&
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2014) &                                     ucvol,coeffs,ncoeff)
6c16042278 (amartin             2017-04-07 15:24:00 +0200 2015) 
6c16042278 (amartin             2017-04-07 15:24:00 +0200 2016)  implicit none
6c16042278 (amartin             2017-04-07 15:24:00 +0200 2017) 
6c16042278 (amartin             2017-04-07 15:24:00 +0200 2018) !Arguments ------------------------------------
6c16042278 (amartin             2017-04-07 15:24:00 +0200 2019) !scalars
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2020)  integer,intent(in) :: natom_sc,natom_uc,ncoeff_max,ntime
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2021)  integer,intent(in) :: ncoeff
6c16042278 (amartin             2017-04-07 15:24:00 +0200 2022) !arrays
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2023)  integer,intent(in) :: sc_size(3)
abe51a3e34 (amartin             2017-08-18 12:27:37 +0200 2024)  integer,intent(in) :: coeffs(ncoeff_max)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2025)  real(dp),intent(in) :: du_delta(6,3,natom_sc,ntime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2026)  real(dp),intent(in) :: displacement(3,natom_sc,ntime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2027)  real(dp),intent(in) :: strain(6,ntime),ucvol(ntime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2028)  real(dp),intent(out):: energy_out(ncoeff,ntime)
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 2029)  real(dp),intent(out) :: fcart_out(3,natom_sc,ncoeff,ntime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2030)  real(dp),intent(out) :: strten_out(6,ntime,ncoeff)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2031)  type(polynomial_coeff_type), intent(in) :: coefficients(ncoeff_max)
6c16042278 (amartin             2017-04-07 15:24:00 +0200 2032) !Local variables-------------------------------
6c16042278 (amartin             2017-04-07 15:24:00 +0200 2033) !scalar
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 2034)  integer :: i1,i2,i3,ia1,ia2,ib1,ib2,ii,icell,icoeff,icoeff_tmp
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2035)  integer :: idir1,idir2,idisp1,idisp2,idisp1_strain,idisp2_strain
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2036)  integer :: iterm,itime,ndisp,ndisp_tot,nstrain,power_disp,power_strain
a19cd1d02d (amartin             2017-07-05 09:27:39 +0200 2037)  real(dp):: disp1,disp2,tmp1,tmp2,tmp3,weight
6c16042278 (amartin             2017-04-07 15:24:00 +0200 2038) !arrays
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2039)  integer :: cell_atoma1(3),cell_atoma2(3)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2040)  integer :: cell_atomb1(3),cell_atomb2(3)
8834c5ce97 (amartin             2017-05-11 14:27:44 +0200 2041) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2042) ! *************************************************************************
8834c5ce97 (amartin             2017-05-11 14:27:44 +0200 2043) 
8834c5ce97 (amartin             2017-05-11 14:27:44 +0200 2044) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2045) !1-Get forces and stresses from the model
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 2046) !  Initialisation of variables
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2047)  fcart_out(:,:,:,:) = zero
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2048)  strten_out(:,:,:)  = zero
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2049)  energy_out(:,:)    = zero
8834c5ce97 (amartin             2017-05-11 14:27:44 +0200 2050) 
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100 2051)  icell = 0; ib1=0; ia1=0
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2052)  do i1=1,sc_size(1)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2053)    do i2=1,sc_size(2)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2054)      do i3=1,sc_size(3)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2055)        ii = icell*natom_uc
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2056)        icell = icell + 1
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2057) !      Loop over configurations
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2058)        do itime=1,ntime
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2059) !       Loop over coefficients
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2060)          do icoeff_tmp=1,ncoeff
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2061)            icoeff = coeffs(icoeff_tmp)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2062) !          Loop over terms of this coefficient
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2063)            do iterm=1,coefficients(icoeff)%nterm
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2064)              ndisp = coefficients(icoeff)%terms(iterm)%ndisp
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2065)              nstrain = coefficients(icoeff)%terms(iterm)%nstrain
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2066)              ndisp_tot = ndisp + nstrain
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2067) !            Set the weight of this term
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2068)              weight =coefficients(icoeff)%terms(iterm)%weight
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2069)              tmp1 = one
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2070) !            Loop over displacement and strain
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2071)              do idisp1=1,ndisp_tot
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2072) 
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2073) !              Set to one the acculation of forces and strain
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2074)                tmp2 = one
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2075)                tmp3 = one
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2076) !              Strain case idir => -6, -5, -4, -3, -2 or -1
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2077)                if (idisp1 > ndisp)then
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2078)                  idisp1_strain = idisp1 - ndisp
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2079)                  power_strain = coefficients(icoeff)%terms(iterm)%power_strain(idisp1_strain)
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2080) !                Get the direction of the displacement or strain
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 2081)                  idir1 = coefficients(icoeff)%terms(iterm)%strain(idisp1_strain)
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2082)                  if(abs(strain(idir1,itime)) > tol10)then
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2083) !                  Accumulate energy fo each displacement (\sum ((A_x-O_x)^Y(A_y-O_c)^Z))
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2084)                    tmp1 = tmp1 * (strain(idir1,itime))**power_strain
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100 2085)                    if(power_strain > 1) then
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2086) !                    Accumulate stress for each strain (\sum (Y(eta_2)^Y-1(eta_2)^Z+...))
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2087)                      tmp3 = tmp3 *  power_strain*(strain(idir1,itime))**(power_strain-1)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2088)                    end if
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2089)                  else
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2090)                    tmp1 = zero
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100 2091)                    if(power_strain > 1) then
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2092)                      tmp3 = zero
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2093)                    end if
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2094)                  end if
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2095)                else
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100 2096) !                Set the power_disp of the displacement:
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2097)                  power_disp = coefficients(icoeff)%terms(iterm)%power_disp(idisp1)
be5f4e3c44 (Alexandre Martin    2017-11-27 14:52:52 +0100 2098) !                Get the direction of the displacement or strain
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2099)                  idir1 = coefficients(icoeff)%terms(iterm)%direction(idisp1)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2100) !                Displacement case idir = 1, 2  or 3
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2101) !                indexes of the cell of the atom a
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2102)                  cell_atoma1 = coefficients(icoeff)%terms(iterm)%cell(:,1,idisp1)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2103)                  if(cell_atoma1(1)/=0.or.cell_atoma1(2)/=0.or.cell_atoma1(3)/=0) then
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2104) !                  if the cell is not 0 0 0 we apply PBC:
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2105)                    cell_atoma1(1) =  i1 + cell_atoma1(1)
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2106)                    cell_atoma1(2) =  i2 + cell_atoma1(2)
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2107)                    cell_atoma1(3) =  i3 + cell_atoma1(3)
2eef72addc (amartin             2017-07-05 17:00:09 +0200 2108)                    call getPBCIndexes_supercell(cell_atoma1(1:3),sc_size(1:3))
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2109) !                  index of the first atom (position in the supercell if the cell is not 0 0 0)
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2110)                    ia1 = (cell_atoma1(1)-1)*sc_size(2)*sc_size(3)*natom_uc+&
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2111) &                        (cell_atoma1(2)-1)*sc_size(3)*natom_uc+&
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2112) &                        (cell_atoma1(3)-1)*natom_uc+&
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2113) &                        coefficients(icoeff)%terms(iterm)%atindx(1,idisp1)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2114)                  else
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2115) !                  index of the first atom (position in the supercell if the cell is 0 0 0)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2116)                    ia1 = ii + coefficients(icoeff)%terms(iterm)%atindx(1,idisp1)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2117)                  end if
f22be086bd (amartin             2017-05-24 11:23:18 +0200 2118) 
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2119) !                indexes of the cell of the atom b  (with PBC) same as ia1
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2120)                  cell_atomb1 = coefficients(icoeff)%terms(iterm)%cell(:,2,idisp1)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2121)                  if(cell_atomb1(1)/=0.or.cell_atomb1(2)/=0.or.cell_atomb1(3)/=0) then
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2122)                    cell_atomb1(1) =  i1 + cell_atomb1(1)
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2123)                    cell_atomb1(2) =  i2 + cell_atomb1(2)
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2124)                    cell_atomb1(3) =  i3 + cell_atomb1(3)
2eef72addc (amartin             2017-07-05 17:00:09 +0200 2125)                    call getPBCIndexes_supercell(cell_atomb1(1:3),sc_size(1:3))
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2126) 
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2127) !                  index of the second atom in the (position in the supercell  if the cell is not 0 0 0)
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2128)                    ib1 = (cell_atomb1(1)-1)*sc_size(2)*sc_size(3)*natom_uc+&
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2129) &                        (cell_atomb1(2)-1)*sc_size(3)*natom_uc+&
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2130) &                        (cell_atomb1(3)-1)*natom_uc+&
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2131) &                        coefficients(icoeff)%terms(iterm)%atindx(2,idisp1)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2132)                  else
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2133) !                  index of the first atom (position in the supercell if the cell is 0 0 0)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2134)                    ib1 = ii + coefficients(icoeff)%terms(iterm)%atindx(2,idisp1)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2135)                  end if
951c59654f (amartin             2017-06-06 12:24:01 +0200 2136) 
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2137) !                Get the displacement for the both atoms
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2138)                  disp1 = displacement(idir1,ia1,itime)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2139)                  disp2 = displacement(idir1,ib1,itime)
951c59654f (amartin             2017-06-06 12:24:01 +0200 2140) 
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2141)                  if(abs(disp1) > tol10 .or. abs(disp2)> tol10)then
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2142) !                  Accumulate energy fo each displacement (\sum ((A_x-O_x)^Y(A_y-O_c)^Z))
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2143)                    tmp1 = tmp1 * (disp1-disp2)**power_disp
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2144)                    if(power_disp > 1) then
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2145) !                    Accumulate forces for each displacement (\sum (Y(A_x-O_x)^Y-1(A_y-O_c)^Z+...))
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2146)                      tmp2 = tmp2 * power_disp*(disp1-disp2)**(power_disp-1)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2147)                    end if
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2148)                  else
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2149)                    tmp1 = zero
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2150)                    if(power_disp > 1) then
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2151)                      tmp2 = zero
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2152)                    end if
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2153)                  end if
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2154)                end if
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 2155) 
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2156)                do idisp2=1,ndisp_tot
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2157)                  if(idisp2 /= idisp1) then
7db11d0e1a (amartin             2017-06-30 15:21:56 +0200 2158) 
7db11d0e1a (amartin             2017-06-30 15:21:56 +0200 2159) !                  Strain case
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2160)                    if (idisp2 > ndisp)then
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2161)                      idisp2_strain = idisp2 - ndisp
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2162)                      idir2 = coefficients(icoeff)%terms(iterm)%strain(idisp2_strain)
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2163) !                    Set the power_strain of the strain:
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2164)                      power_strain = coefficients(icoeff)%terms(iterm)%power_strain(idisp2_strain)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2165) !                    Accumulate energy forces
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2166)                      tmp2 = tmp2 * (strain(idir2,itime))**power_strain
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2167) !                    Accumulate stress for each strain (\sum (Y(eta_2)^Y-1(eta_2)^Z+...))
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2168)                      tmp3 = tmp3 * (strain(idir2,itime))**power_strain
7db11d0e1a (amartin             2017-06-30 15:21:56 +0200 2169) !                  Atomic displacement case
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2170)                    else
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2171) !                    Set the power_disp of the displacement:
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2172)                      power_disp = coefficients(icoeff)%terms(iterm)%power_disp(idisp2)
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2173) !                    Set the direction of the displacement:
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2174)                      idir2 = coefficients(icoeff)%terms(iterm)%direction(idisp2)
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2175) 
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2176)                      cell_atoma2=coefficients(icoeff)%terms(iterm)%cell(:,1,idisp2)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2177)                      if(cell_atoma2(1)/=0.or.cell_atoma2(2)/=0.or.cell_atoma2(3)/=0) then
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2178)                        cell_atoma2(1) =  i1 + cell_atoma2(1)
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2179)                        cell_atoma2(2) =  i2 + cell_atoma2(2)
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2180)                        cell_atoma2(3) =  i3 + cell_atoma2(3)
2eef72addc (amartin             2017-07-05 17:00:09 +0200 2181)                        call getPBCIndexes_supercell(cell_atoma2(1:3),sc_size(1:3))
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2182) !                      index of the first atom (position in the supercell and direction)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2183) !                      if the cell of the atom a is not 0 0 0 (may happen)
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2184)                        ia2 = (cell_atoma2(1)-1)*sc_size(2)*sc_size(3)*natom_uc+&
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2185) &                            (cell_atoma2(2)-1)*sc_size(3)*natom_uc+&
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2186) &                            (cell_atoma2(3)-1)*natom_uc+&
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2187) &                        coefficients(icoeff)%terms(iterm)%atindx(1,idisp2)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2188)                      else
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2189) !                      index of the first atom (position in the supercell and direction)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2190)                        ia2 = ii + coefficients(icoeff)%terms(iterm)%atindx(1,idisp2)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2191)                      end if
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2192) 
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2193)                      cell_atomb2 = coefficients(icoeff)%terms(iterm)%cell(:,2,idisp2)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 2194) 
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2195)                      if(cell_atomb2(1)/=0.or.cell_atomb2(2)/=0.or.cell_atomb2(3)/=0) then
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2196) !                      indexes of the cell2 (with PBC)
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2197)                        cell_atomb2(1) =  i1 + cell_atomb2(1)
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2198)                        cell_atomb2(2) =  i2 + cell_atomb2(2)
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2199)                        cell_atomb2(3) =  i3 + cell_atomb2(3)
2eef72addc (amartin             2017-07-05 17:00:09 +0200 2200)                        call getPBCIndexes_supercell(cell_atomb2(1:3),sc_size(1:3))
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2201) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 2202) !                      index of the second atom in the (position in the supercell)
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2203)                        ib2 = (cell_atomb2(1)-1)*sc_size(2)*sc_size(3)*natom_uc+&
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2204) &                            (cell_atomb2(2)-1)*sc_size(3)*natom_uc+&
d2ec17614f (Alexandre Martin    2017-09-07 14:57:08 +0200 2205) &                            (cell_atomb2(3)-1)*natom_uc+&
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2206) &                            coefficients(icoeff)%terms(iterm)%atindx(2,idisp2)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2207)                      else
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2208)                        ib2 = ii + coefficients(icoeff)%terms(iterm)%atindx(2,idisp2)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2209)                      end if
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2210) 
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2211)                      disp1 = displacement(idir2,ia2,itime)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2212)                      disp2 = displacement(idir2,ib2,itime)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 2213) 
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2214)                      tmp2 = tmp2 * (disp1-disp2)**power_disp
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2215)                      tmp3 = tmp3 * (disp1-disp2)**power_disp
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2216) 
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2217)                    end if
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2218)                  end if
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2219)                end do
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 2220) 
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2221)                if(idisp1 > ndisp)then
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2222) !                Accumule stress tensor
761becee32 (Alexandre Martin    2017-11-15 16:26:07 +0100 2223)                  strten_out(idir1,itime,icoeff_tmp) = strten_out(idir1,itime,icoeff_tmp) + &
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2224) &                                                      weight * tmp3 / ucvol(itime)
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2225)                else
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2226) !                Accumule  forces
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 2227)                  fcart_out(idir1,ia1,icoeff_tmp,itime)=fcart_out(idir1,ia1,icoeff_tmp,itime)+weight*tmp2
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 2228)                  fcart_out(idir1,ib1,icoeff_tmp,itime)=fcart_out(idir1,ib1,icoeff_tmp,itime)-weight*tmp2
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2229)                end if
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2230)              end do
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2231) 
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2232) !            accumule energy
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2233)              energy_out(icoeff_tmp,itime) = energy_out(icoeff_tmp,itime) +  weight * tmp1
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2234) 
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2235)            end do!End do iterm
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2236)          end do!End do coeff
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2237)        end do!End time
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2238)      end do!End do i3
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2239)    end do!End do i2
304b0ded8e (amartin             2017-06-22 10:48:33 +0200 2240)  end do!End do i1
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2241) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2242) !ADD variation of the atomic displacement due to the strain
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2243)  do icoeff=1,ncoeff
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2244)    do itime=1,ntime
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2245)      do ia1=1,natom_sc
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2246)        do idir1=1,3
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2247)          do idir2=1,6
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2248)            strten_out(idir2,itime,icoeff) = strten_out(idir2,itime,icoeff) + &
4a70269f5d (amartin             2017-06-28 16:48:47 +0200 2249) &                     du_delta(idir2,idir1,ia1,itime)*fcart_out(idir1,ia1,icoeff,itime)/ucvol(itime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2250)          end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2251)        end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2252)      end do
f22be086bd (amartin             2017-05-24 11:23:18 +0200 2253)    end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2254)  end do
8c509e24b9 (amartin             2017-06-02 09:38:14 +0200 2255) 
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100 2256) ! multiply by -1
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2257)  fcart_out(:,:,:,:) = -1 * fcart_out(:,:,:,:)
f22be086bd (amartin             2017-05-24 11:23:18 +0200 2258) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2259) end subroutine fit_polynomial_coeff_getFS
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2260) !!***
8c509e24b9 (amartin             2017-06-02 09:38:14 +0200 2261) 
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2262) 
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100 2263) !!****f* m_fit_polynomial_coeff/fit_polynomial_coeff_computeMSD
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2264) !!
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2265) !! NAME
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100 2266) !! fit_polynomial_coeff_computeMSD
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2267) !!
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2268) !! FUNCTION
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2269) !! Compute the Mean square error of the energy, forces and stresses
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2270) !!
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2271) !! INPUTS
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2272) !! eff_pot<type(effective_potential)> = effective potential
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2273) !! hist<type(abihist)> = The history of the MD
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2274) !! natom = number of atom
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2275) !! ntime = number of time in the hist
f1e6dcf5ea (mschmitt            2018-10-17 15:12:27 +0200 2276) !! sqomega =  Sheppard and al Factors \Omega^{2} see J.Chem Phys 136, 074103 (2012) [[cite:Sheppard2012]]
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 2277) !! compute_anharmonic = TRUE if the anharmonic part of the effective potential
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2278) !!                           has to be taking into acount
c8502bbac5 (Alexandre Martin    2017-11-10 13:34:10 +0100 2279) !! print_file = if True, a ASCII file with the difference in energy will be print
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2280) !!
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2281) !! OUTPUT
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 2282) !! mse  =  Mean square error of the energy   (Hatree)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2283) !! msef =  Mean square error of the forces   (Hatree/Bohr)**2
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2284) !! mses =  Mean square error of the stresses (Hatree/Bohr)**2
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2285) !!
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2286) !! PARENTS
6573fbac25 (Trunk               2020-08-13 18:22:36 +0200 2287) !!      m_fit_polynomial_coeff,m_opt_effpot
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2288) !!
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2289) !! CHILDREN
0f2f2fcb23 (gonze               2017-11-19 07:28:23 +0100 2290) !!      destroy_supercell,generelist,init_supercell,xred2xcart
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2291) !!
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2292) !! SOURCE
8c509e24b9 (amartin             2017-06-02 09:38:14 +0200 2293) 
090d1fa864 (mschmitt            2020-01-14 14:16:23 +0100 2294) subroutine fit_polynomial_coeff_computeMSD(eff_pot,hist,mse,msef,mses,natom,ntime,sqomega,comm,&
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2295) &                                          compute_anharmonic,print_file,filename,scup_dtset,prt_ph)
8834c5ce97 (amartin             2017-05-11 14:27:44 +0200 2296) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2297)  implicit none
068baf9bee (amartin             2017-06-02 11:56:05 +0200 2298) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2299) !Arguments ------------------------------------
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2300) !scalars
090d1fa864 (mschmitt            2020-01-14 14:16:23 +0100 2301)  integer, intent(in) :: natom,ntime,comm
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2302)  real(dp),intent(out):: mse,msef,mses
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2303)  logical,optional,intent(in) :: compute_anharmonic,print_file,prt_ph
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2304) !arrays
090d1fa864 (mschmitt            2020-01-14 14:16:23 +0100 2305)  real(dp),intent(in) :: sqomega(ntime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2306)  type(effective_potential_type),intent(in) :: eff_pot
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2307)  type(abihist),intent(in) :: hist
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2308) !Strings/Characters
6114b61218 (Marcus Schmitt      2019-04-09 09:42:02 +0200 2309)  character(len=fnlen),optional,intent(in) :: filename
6114b61218 (Marcus Schmitt      2019-04-09 09:42:02 +0200 2310)  type(scup_dtset_type),optional,intent(inout) :: scup_dtset
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2311) !Local variables-------------------------------
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2312) !scalar
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2313) integer :: ii,ia,mu,unit_energy,unit_stress,itime,master,nproc,my_rank,i
db80a85d7a (mschmitt            2019-11-28 17:45:38 +0100 2314) !Uncommend for dipdip test
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2315)  integer :: ifirst
0ab9b3b5fd (mschmitt            2019-06-03 12:11:05 +0200 2316)  real(dp):: energy,energy_harm
090d1fa864 (mschmitt            2020-01-14 14:16:23 +0100 2317)  logical :: need_anharmonic = .TRUE.,need_print=.FALSE.,need_elec_eval,iam_master
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2318)  logical :: need_prt_ph 
f5523e3bfc (Alexandre Martin    2017-12-20 13:47:16 +0100 2319)  !arrays
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2320)  real(dp):: fcart(3,natom),fred(3,natom),strten(6),rprimd(3,3),xred(3,natom)
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2321) !Strings/Characters 
79161a3750 (mschmitt            2018-11-23 17:54:36 +0100 2322)  character(len=fnlen) :: file_energy, file_stress, file_anh, name_file
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2323)  character(len=500) :: msg
db80a85d7a (mschmitt            2019-11-28 17:45:38 +0100 2324) !Uncommend for dipdip test
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2325)  type(abihist) :: hist_out
ed32f42c17 (mschmitt            2020-02-19 13:32:39 +0100 2326)  character(len=200) :: filename_hist
f0fb453a24 (Alexandre Martin    2017-11-30 13:34:01 +0100 2327) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2328) ! *************************************************************************
db80a85d7a (mschmitt            2019-11-28 17:45:38 +0100 2329)  !MS Hide SCALE-UP variables 
db80a85d7a (mschmitt            2019-11-28 17:45:38 +0100 2330)  ABI_UNUSED(itime)
951c59654f (amartin             2017-06-06 12:24:01 +0200 2331) 
090d1fa864 (mschmitt            2020-01-14 14:16:23 +0100 2332)  !MPI 
090d1fa864 (mschmitt            2020-01-14 14:16:23 +0100 2333)  master = 0
090d1fa864 (mschmitt            2020-01-14 14:16:23 +0100 2334)  nproc = xmpi_comm_size(comm); my_rank = xmpi_comm_rank(comm)
090d1fa864 (mschmitt            2020-01-14 14:16:23 +0100 2335)  iam_master = (my_rank == master)
090d1fa864 (mschmitt            2020-01-14 14:16:23 +0100 2336) 
f5523e3bfc (Alexandre Martin    2017-12-20 13:47:16 +0100 2337)  !Do some checks
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2338)  if(ntime /= hist%mxhist)then
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2339)    write(msg,'(a)')'ntime is not correct'
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2340)    MSG_BUG(msg)
068baf9bee (amartin             2017-06-02 11:56:05 +0200 2341)  end if
068baf9bee (amartin             2017-06-02 11:56:05 +0200 2342) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2343)  if(natom /= size(hist%xred,2)) then
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2344)    write(msg,'(a)')'natom is not correct'
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2345)    MSG_BUG(msg)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2346)  end if
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2347) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2348)  if(present(compute_anharmonic))then
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2349)    need_anharmonic = compute_anharmonic
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2350)  end if
f22be086bd (amartin             2017-05-24 11:23:18 +0200 2351) 
79161a3750 (mschmitt            2018-11-23 17:54:36 +0100 2352)  name_file=''
79161a3750 (mschmitt            2018-11-23 17:54:36 +0100 2353)  if(present(filename))name_file = filename
79161a3750 (mschmitt            2018-11-23 17:54:36 +0100 2354)  
49077758b5 (mschmitt            2018-11-26 19:03:14 +0100 2355)  need_print=.FALSE. 
49077758b5 (mschmitt            2018-11-26 19:03:14 +0100 2356)  if(present(print_file))need_print=print_file
88cb2c97b1 (Marcus Schmitt      2019-04-11 19:13:51 +0200 2357)  
88cb2c97b1 (Marcus Schmitt      2019-04-11 19:13:51 +0200 2358)  need_elec_eval = .FALSE. 
88cb2c97b1 (Marcus Schmitt      2019-04-11 19:13:51 +0200 2359)  if(present(scup_dtset))need_elec_eval=scup_dtset%scup_elec_model
49077758b5 (mschmitt            2018-11-26 19:03:14 +0100 2360) 
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2361)  need_prt_ph=.FALSE. 
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2362)  if(present(prt_ph))need_prt_ph=prt_ph
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2363) 
49077758b5 (mschmitt            2018-11-26 19:03:14 +0100 2364) 
49077758b5 (mschmitt            2018-11-26 19:03:14 +0100 2365)  if(need_print .and. present(filename))then
356ced2a3d (mschmitt            2019-01-18 14:36:40 +0100 2366)    !MS hist out uncommented for PHONOPY test
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2367)    call abihist_init(hist_out,natom,ntime,.false.,.false.)
79161a3750 (mschmitt            2018-11-23 17:54:36 +0100 2368)    file_energy=trim(name_file)//'_energy.dat'
f5523e3bfc (Alexandre Martin    2017-12-20 13:47:16 +0100 2369)    unit_energy = get_unit()
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2370)    if (open_file(file_energy,msg,unit=unit_energy,form="formatted",&
c1a0d95826 (Alexandre Martin    2017-12-14 15:02:06 +0100 2371) &     status="unknown",action="write") /= 0) then
f0fb453a24 (Alexandre Martin    2017-11-30 13:34:01 +0100 2372)      MSG_ERROR(msg)
f0fb453a24 (Alexandre Martin    2017-11-30 13:34:01 +0100 2373)    end if
f5523e3bfc (Alexandre Martin    2017-12-20 13:47:16 +0100 2374)    unit_stress = get_unit()
79161a3750 (mschmitt            2018-11-23 17:54:36 +0100 2375)    file_stress=trim(name_file)//'_stress.dat'
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2376)    if (open_file(file_stress,msg,unit=unit_stress,form="formatted",&
c1a0d95826 (Alexandre Martin    2017-12-14 15:02:06 +0100 2377) &     status="unknown",action="write") /= 0) then
c8502bbac5 (Alexandre Martin    2017-11-10 13:34:10 +0100 2378)      MSG_ERROR(msg)
c8502bbac5 (Alexandre Martin    2017-11-10 13:34:10 +0100 2379)    end if
49077758b5 (mschmitt            2018-11-26 19:03:14 +0100 2380)  else if(need_print .and. .not. present(filename))then 
49077758b5 (mschmitt            2018-11-26 19:03:14 +0100 2381)    write(msg,'(3a)')' You asked for printing of the MSD-values',ch10,& 
49077758b5 (mschmitt            2018-11-26 19:03:14 +0100 2382) &        ' without specifying a filename'
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2383)    MSG_ERROR(msg) 
c8502bbac5 (Alexandre Martin    2017-11-10 13:34:10 +0100 2384)  end if
79161a3750 (mschmitt            2018-11-23 17:54:36 +0100 2385)  
79161a3750 (mschmitt            2018-11-23 17:54:36 +0100 2386)  file_anh=trim(name_file)//'_anharmonic_terms_energy.dat'
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 2387) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2388)  mse  = zero
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2389)  msef = zero
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2390)  mses = zero
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2391)  do ii=1,ntime ! Loop over configurations
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2392)    xred(:,:)   = hist%xred(:,:,ii)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2393)    rprimd(:,:) = hist%rprimd(:,:,ii)
bcba0507d7 (mschmitt            2019-12-02 12:42:27 +0100 2394)    itime = ii
6114b61218 (Marcus Schmitt      2019-04-09 09:42:02 +0200 2395) #if defined DEV_MS_SCALEUP 
6114b61218 (Marcus Schmitt      2019-04-09 09:42:02 +0200 2396)    !Pass print options to scale-up
88cb2c97b1 (Marcus Schmitt      2019-04-11 19:13:51 +0200 2397)    itime = ii 
88cb2c97b1 (Marcus Schmitt      2019-04-11 19:13:51 +0200 2398)    if(need_elec_eval)then
88cb2c97b1 (Marcus Schmitt      2019-04-11 19:13:51 +0200 2399)         call global_set_parent_iter(itime)
88cb2c97b1 (Marcus Schmitt      2019-04-11 19:13:51 +0200 2400)         ! Set all print options to false. 
88cb2c97b1 (Marcus Schmitt      2019-04-11 19:13:51 +0200 2401)         call global_set_print_parameters(geom=.FALSE.,eigvals=.FALSE.,eltic=.FALSE.,&
88cb2c97b1 (Marcus Schmitt      2019-04-11 19:13:51 +0200 2402) &                orbocc=.FALSE.,bands=.FALSE.)
8d38083236 (mschmitt            2019-04-15 10:20:13 +0200 2403)         if(ii == 1 .or. modulo(ii,scup_dtset%scup_printniter) == 0)then 
88cb2c97b1 (Marcus Schmitt      2019-04-11 19:13:51 +0200 2404)            call global_set_print_parameters(scup_dtset%scup_printgeom,scup_dtset%scup_printeigv,scup_dtset%scup_printeltic,& 
88cb2c97b1 (Marcus Schmitt      2019-04-11 19:13:51 +0200 2405) &                   scup_dtset%scup_printorbocc,scup_dtset%scup_printbands)
88cb2c97b1 (Marcus Schmitt      2019-04-11 19:13:51 +0200 2406)         end if 
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 2407)    end if 
6114b61218 (Marcus Schmitt      2019-04-09 09:42:02 +0200 2408) #endif
0ab9b3b5fd (mschmitt            2019-06-03 12:11:05 +0200 2409)    call effective_potential_evaluate(eff_pot,energy_harm,fcart,fred,strten,natom,rprimd,&
143fff16bf (Marcus Schmitt      2019-04-02 13:25:08 +0200 2410) &                                    xred=xred,compute_anharmonic=.False.,verbose=.false.,&
88cb2c97b1 (Marcus Schmitt      2019-04-11 19:13:51 +0200 2411) &                                    elec_eval=need_elec_eval)
c8502bbac5 (Alexandre Martin    2017-11-10 13:34:10 +0100 2412) 
0ab9b3b5fd (mschmitt            2019-06-03 12:11:05 +0200 2413)    call effective_potential_evaluate(eff_pot,energy,fcart,fred,strten,natom,rprimd,&
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 2414) &                                    xred=xred,compute_anharmonic=need_anharmonic,verbose=.false.,&
88cb2c97b1 (Marcus Schmitt      2019-04-11 19:13:51 +0200 2415) &                                    filename=file_anh,elec_eval=need_elec_eval)
8834c5ce97 (amartin             2017-05-11 14:27:44 +0200 2416) 
090d1fa864 (mschmitt            2020-01-14 14:16:23 +0100 2417)    if(need_print .and. iam_master)then
0ab9b3b5fd (mschmitt            2019-06-03 12:11:05 +0200 2418)      WRITE(unit_energy ,'(I10,7(F23.14))') ii,hist%etot(ii),energy_harm,energy,&
0ab9b3b5fd (mschmitt            2019-06-03 12:11:05 +0200 2419) &                                       abs(hist%etot(ii) - energy_harm),abs(hist%etot(ii) - energy)
f0fb453a24 (Alexandre Martin    2017-11-30 13:34:01 +0100 2420)      WRITE(unit_stress,'(I10,12(F23.14))') ii,hist%strten(:,ii),strten(:)
c8502bbac5 (Alexandre Martin    2017-11-10 13:34:10 +0100 2421)    end if
356ced2a3d (mschmitt            2019-01-18 14:36:40 +0100 2422)     
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2423)     !MS Uncommented for abihist test
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2424)    if(need_prt_ph)then 
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2425)     if(ii == 1)then 
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2426)       write(msg,'(a,(80a))') ch10,('-',i=1,80)
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2427)       call wrtout(ab_out,msg,'COLL')
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2428)       call wrtout(std_out,msg,'COLL')
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2429)       write(msg,'(3a)') ch10,'test_prt_ph == 1, write evulation of Model on the TEST-set into ph_test.nc',ch10
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2430)       call wrtout(ab_out,msg,'COLL')
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2431)       call wrtout(std_out,msg,'COLL')
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2432)     endif
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2433)     ifirst=merge(0,1,(ii>1))
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2434)     filename_hist = trim("ph_test.nc")
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2435)     hist_out%fcart(:,:,hist_out%ihist) = fcart(:,:)
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2436)     hist_out%strten(:,hist_out%ihist)  = strten(:)
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2437)     hist_out%etot(hist_out%ihist)      = energy
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2438)     hist_out%entropy(hist_out%ihist)   = hist%entropy(ii)
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2439)     hist_out%time(hist_out%ihist)      = real(ii,kind=dp)
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2440) !    call vel2hist(ab_mover%amass,hist,vel,vel_cell)
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2441)     call var2hist(hist%acell(:,ii),hist_out,natom,hist%rprimd(:,:,ii),hist%xred(:,:,ii),.false.)
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2442)     call write_md_hist(hist_out,filename_hist,ifirst,ii,natom,1,eff_pot%crystal%ntypat,&
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2443) &                    eff_pot%supercell%typat,eff_pot%crystal%amu,eff_pot%crystal%znucl,&
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2444) &                    real(100,dp),(/real(100,dp),real(100,dp)/))
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2445)    endif!(need_prt_ph)
f0fb453a24 (Alexandre Martin    2017-11-30 13:34:01 +0100 2446) 
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100 2447)    mse  = mse  + ((hist%etot(ii) - energy))**2 !+abs(hist$etot(ii) - energy)
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2448)    do ia=1,natom ! Loop over atoms
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2449)      do mu=1,3   ! Loop over cartesian directions
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2450)        msef = msef + (hist%fcart(mu,ia,ii)  - fcart(mu,ia))**2
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2451)      end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2452)    end do
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2453)    do mu=1,6 ! Loop over stresses
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2454)      mses = mses + sqomega(ii)*(hist%strten(mu,ii) - strten(mu))**2
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2455)    end do
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2456)  end do ! End loop itime 
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2457)    if(need_prt_ph)then      
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2458)     write(msg,'(a,(80a))') ch10,('-',i=1,80)
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2459)     call wrtout(ab_out,msg,'COLL')
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2460)     call wrtout(std_out,msg,'COLL')
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2461)    endif
8c509e24b9 (amartin             2017-06-02 09:38:14 +0200 2462) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 2463)  mse  = mse  /  ntime
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2464)  msef = msef / (3*natom*ntime)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2465)  mses = mses / (6*ntime)
8c509e24b9 (amartin             2017-06-02 09:38:14 +0200 2466) 
c8502bbac5 (Alexandre Martin    2017-11-10 13:34:10 +0100 2467)  if(need_print)then
f5523e3bfc (Alexandre Martin    2017-12-20 13:47:16 +0100 2468)    close(unit_energy)
f0fb453a24 (Alexandre Martin    2017-11-30 13:34:01 +0100 2469)    close(unit_stress)
c8502bbac5 (Alexandre Martin    2017-11-10 13:34:10 +0100 2470)  end if
f0fb453a24 (Alexandre Martin    2017-11-30 13:34:01 +0100 2471) 
356ced2a3d (mschmitt            2019-01-18 14:36:40 +0100 2472)  !MS uncommented for PHONOPY TEST
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2473)  call abihist_free(hist_out)
f0fb453a24 (Alexandre Martin    2017-11-30 13:34:01 +0100 2474) 
42a929b2dd (Alexandre Martin    2017-12-01 16:57:18 +0100 2475) end subroutine fit_polynomial_coeff_computeMSD
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2476) !!***
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2477) 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2478) !MARCUS_EXPERIMENTAL_SECTION 
fbb176f7d4 (mschmitt            2019-04-12 18:56:38 +0200 2479) !!****f* m_fit_polynomiaL_coeff/testEffPot
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2480) !! NAME
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2481) !!  testEffPot
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2482) !!
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2483) !! FUNCTION
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2484) !!  Calculate the energy, forces for displacements provided 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2485) !!  in an test-set (input:hist) within a given effective potential 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2486) !!  (input: eff_pot)
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2487) !!  If the test set is from DFT and contains DFT energies and forces 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2488) !!  calculate the Goal Function values and the MSD of the Energy with 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2489) !!  respect to the DFT energies 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2490) !!
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2491) !! INPUTS
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2492) !! eff_pot = effective_potential datatype
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2493) !! hist = abihist datatype
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2494) !!
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2495) !! OUTPUT
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2496) !!
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2497) !! SOURCE
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2498) 
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2499) subroutine fit_polynomial_coeff_testEffPot(eff_pot,hist,master,comm,print_anharmonic,scup_dtset,prt_ph)
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2500) 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2501)        
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2502)   implicit none
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2503) 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2504) !Arguments ------------------------------------
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2505) !scalars
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2506)   integer,intent(in) :: master,comm
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2507)   integer,optional,intent(in) :: prt_ph
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2508) !logicals
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2509)   logical,optional,intent(in) :: print_anharmonic
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2510) !array
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2511)   type(effective_potential_type),intent(inout) :: eff_pot
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2512)   type(abihist),intent(in) :: hist
6114b61218 (Marcus Schmitt      2019-04-09 09:42:02 +0200 2513)   type(scup_dtset_type),optional,intent(inout) :: scup_dtset
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2514) !Local variables-------------------------------
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2515) !reals 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2516)   real(dp) :: factor,mse,msef,mses
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2517)   real(dp),allocatable :: sqomega(:),ucvol(:)
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2518)   real(dp),parameter :: HaBohr_meVAng = 27.21138386 / 0.529177249
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2519) !scalar
db80a85d7a (mschmitt            2019-11-28 17:45:38 +0100 2520)   integer :: itime,unit_anh
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2521)   integer :: natom,ntime,ncoeff,my_rank
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2522) !logicals 
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2523)   logical :: iam_master, need_print_anharmonic,file_opened,need_prt_ph
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2524) !strings/characters
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2525)  character(len=fnlen) :: filename 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2526)  character(len=1000) :: message
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2527) !arrays
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2528)  real(dp) :: gmet(3,3),gprimd(3,3),rmet(3,3)
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2529) ! *************************************************************************
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2530)   
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2531)   !MPI variables
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2532)   my_rank=xmpi_comm_rank(comm)
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2533)   iam_master = (my_rank == master)
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2534) 
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2535)   !Initialisation of optional arguments
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2536)   need_print_anharmonic = .FALSE. 
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2537)   if(present(print_anharmonic)) need_print_anharmonic = print_anharmonic
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2538) 
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2539)   need_prt_ph = .FALSE. 
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2540)   if(present(prt_ph))then
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2541)      if(prt_ph==1) need_prt_ph=.TRUE.
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2542)   endif
143fff16bf (Marcus Schmitt      2019-04-02 13:25:08 +0200 2543) 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2544)   !Setting/Allocating other Variables 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2545)   natom = size(hist%xred,2)   
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2546)   factor   = 1._dp/natom
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2547)   ntime = hist%mxhist 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2548)   ABI_ALLOCATE(sqomega,(ntime))
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2549)   ABI_ALLOCATE(ucvol,(ntime))
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2550)   sqomega = zero 
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 2551)   filename = 'TES_fit_diff'
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2552)   ncoeff = eff_pot%anharmonics_terms%ncoeff
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2553)    
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2554)   do itime=1,ntime 
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2555) !  Compute \Omega^{2} and ucvol for each time
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2556)    call metric(gmet,gprimd,-1,rmet,hist%rprimd(:,:,itime),ucvol(itime))
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2557) !  Formula: sqomega(itime) = (((ucvol(itime)**(-2.))* ((natom)**(0.5)))**(-1.0/3.0))**2
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2558) !   Compact form:
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2559)    sqomega(itime) = ((ucvol(itime)**(4.0/3.0)) / ((natom)**(1/3.0)))
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2560)   end do 
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2561) 
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2562)        
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2563)   if(need_print_anharmonic) call effective_potential_writeAnhHead(ncoeff,&
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2564) &                            filename,eff_pot%anharmonics_terms)                  
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2565) 
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2566)   call fit_polynomial_coeff_computeMSD(eff_pot,hist,mse,msef,mses,natom,ntime,&
090d1fa864 (mschmitt            2020-01-14 14:16:23 +0100 2567) &                                      sqomega,comm,&
5f16759392 (mschmitt            2020-02-20 12:47:43 +0100 2568) &                 compute_anharmonic=.TRUE.,print_file=.TRUE.,filename=filename,scup_dtset=scup_dtset,prt_ph=need_prt_ph)
f03ad6be65 (mschmitt            2018-10-25 17:42:13 +0200 2569) 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2570) 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2571) !  Print the standard deviation after the fit
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2572)      write(message,'(6a,ES24.16,6a,ES24.16,2a,ES24.16,2a,ES24.16,a)' )ch10,&
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2573) &                    ' Mean Standard Deviation values of the effective-potential',ch10,&
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100 2574) &                    ' with respect to the test-set (meV^2/atm):',&
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2575) &               ch10,'   Energy          : ',&
0c87a86585 (mschmitt            2020-01-27 10:12:33 +0100 2576) &               mse* (Ha_EV*1000)**2 *factor ,ch10,&
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2577) &                    ' Goal function values of the effective.potential',ch10,& 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2578) &                    ' with respect to the test-set (eV^2/A^2):',ch10,&
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2579) &                    '   Forces+Stresses : ',&
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2580) &               (msef+mses)*(HaBohr_meVAng)**2,ch10,&
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2581) &                    '   Forces          : ',&
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2582) &               msef*(HaBohr_meVAng)**2,ch10,&
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2583) &                    '   Stresses        : ',&
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2584) &               mses*(HaBohr_meVAng)**2,ch10
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2585)      call wrtout(ab_out,message,'COLL')
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2586)      call wrtout(std_out,message,'COLL')
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2587) 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2588) 
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2589)   !Deallocating
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2590)   ABI_DEALLOCATE(sqomega)
d993ae65b9 (mschmitt            2018-10-31 10:23:55 +0100 2591)   ABI_DEALLOCATE(ucvol)
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2592) 
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 2593)   INQUIRE(FILE='TES_fit_diff_anharmonic_terms_energy.dat',OPENED=file_opened,number=unit_anh)
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 2594)   if(file_opened) close(unit_anh)
7d01d15b09 (mschmitt            2018-10-29 10:53:09 +0100 2595) 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2596) 
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2597) end subroutine fit_polynomial_coeff_testEffPot
fbb176f7d4 (mschmitt            2019-04-12 18:56:38 +0200 2598) !!***
a761357d3e (mschmitt            2018-10-25 15:41:34 +0200 2599) 
7637b8a3aa (mschmitt            2018-10-10 17:45:44 +0200 2600) !!      m_fit_polynomial_coeff,multibinit
7637b8a3aa (mschmitt            2018-10-10 17:45:44 +0200 2601) !!      generelist,polynomial_coeff_free,polynomial_coeff_getname
7637b8a3aa (mschmitt            2018-10-10 17:45:44 +0200 2602) !!      polynomial_coeff_init,polynomial_term_free,polynomial_term_init,wrtout
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2603) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2604) !!****f* m_fit_polynomial_coeff/fit_polynomial_printSystemFiles
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2605) !!
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2606) !! NAME
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2607) !! fit_polynomial_printSystemFiles
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2608) !!
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2609) !! FUNCTION
2eef72addc (amartin             2017-07-05 17:00:09 +0200 2610) !! Print the files for the fitting script
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2611) !!
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2612) !! INPUTS
2eef72addc (amartin             2017-07-05 17:00:09 +0200 2613) !! eff_pot<type(effective_potential)> = effective potential
2eef72addc (amartin             2017-07-05 17:00:09 +0200 2614) !! hist<type(abihist)> = datatype with the  history of the MD
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2615) !!
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2616) !! OUTPUT
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2617) !!
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2618) !! PARENTS
6573fbac25 (Trunk               2020-08-13 18:22:36 +0200 2619) !!      m_multibinit_driver
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2620) !!
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2621) !! CHILDREN
0f2f2fcb23 (gonze               2017-11-19 07:28:23 +0100 2622) !!      destroy_supercell,generelist,init_supercell,xred2xcart
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2623) !!
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2624) !! SOURCE
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2625) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2626) subroutine fit_polynomial_printSystemFiles(eff_pot,hist)
f22be086bd (amartin             2017-05-24 11:23:18 +0200 2627) 
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2628)  implicit none
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2629) 
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2630) !Arguments ------------------------------------
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2631) !scalars
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2632) !arrays
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2633)  type(effective_potential_type), intent(in) :: eff_pot
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2634)  type(abihist),intent(in) :: hist
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2635) !Local variables-------------------------------
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2636) !scalar
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2637)  integer :: ia,ib,ib1,ii,jj,irpt,kk,ll,mu,nu,nstep,nshift
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2638)  integer :: natom_uc
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2639)  integer :: unit_born=22,unit_epsiloninf=23,unit_md=24
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2640)  integer :: unit_harmonic=25,unit_ref=26,unit_strain=27,unit_sym=28
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2641) !arrays
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2642)  integer,allocatable :: typat_order(:),typat_order_uc(:)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2643)  integer, dimension(3)  :: A,ncell
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2644)  real(dp), allocatable :: xcart(:,:),fcart(:,:)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2645)  character(len=500) :: msg
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2646)  type(supercell_type) :: supercell
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2647) ! *************************************************************************
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2648) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2649) !Create new supercell corresponding to the MD
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2650)  ncell = (/2,2,2/)
9b14042276 (amartin             2017-09-11 14:11:29 +0200 2651)  call init_supercell(eff_pot%crystal%natom, (/ncell(1),0,0,  0,ncell(2),0,  0,0,ncell(3)/),&
9b14042276 (amartin             2017-09-11 14:11:29 +0200 2652) &                    eff_pot%crystal%rprimd,eff_pot%crystal%typat,&
9b14042276 (amartin             2017-09-11 14:11:29 +0200 2653) &                    eff_pot%crystal%xcart,eff_pot%crystal%znucl, supercell)
8c509e24b9 (amartin             2017-06-02 09:38:14 +0200 2654) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2655) !allocation of array
1a8b09feb9 (Matthieu Verstraete 2017-05-21 21:30:02 +0200 2656)  ABI_ALLOCATE(xcart,(3,supercell%natom))
1a8b09feb9 (Matthieu Verstraete 2017-05-21 21:30:02 +0200 2657)  ABI_ALLOCATE(fcart,(3,supercell%natom))
1a8b09feb9 (Matthieu Verstraete 2017-05-21 21:30:02 +0200 2658)  ABI_ALLOCATE(typat_order,(supercell%natom))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2659)  ABI_ALLOCATE(typat_order_uc,(eff_pot%crystal%natom))
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2660) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2661)  A = (/ 2, 3, 1/)
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 2662) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 2663)  nshift = product(ncell)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2664)  natom_uc = eff_pot%crystal%natom
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2665) !Fill the typat_order array:
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2666) !In the fit script the atom must be in the order 11111 222222 33333 ..
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2667) !and the order of the atom can not be change in the fit script,
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2668) !we transform into the format of the script
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2669)  ib = 1
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2670)  ib1= 1
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2671)  do ii=1,eff_pot%crystal%ntypat
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2672)    jj = A(ii)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2673)    do kk=1,natom_uc
1a8b09feb9 (Matthieu Verstraete 2017-05-21 21:30:02 +0200 2674)      if(supercell%typat(kk)==jj)then
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2675)        typat_order_uc(ib1) = kk
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 2676)        ib1 = ib1 + 1
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2677)        do ll=1,nshift
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2678)          ia = (ll-1)*natom_uc + kk
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2679)          typat_order(ib) = ia
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2680)          ib = ib + 1
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2681)        end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2682)      end if
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2683)    end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2684)  end do
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2685) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2686) ! BORN CHARGES FILE
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2687)  if (open_file('system/Born_Charges',msg,unit=unit_born,form="formatted",&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2688) &    status="replace",action="write") /= 0) then
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2689)    MSG_ERROR(msg)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2690)  end if
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2691)  do ii=1,eff_pot%crystal%ntypat
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2692)    jj = A(ii)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2693)    do ia=1,eff_pot%crystal%natom
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2694)      if(eff_pot%crystal%typat(ia)==jj)then
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2695)        write(unit_born,'(i2,a,1F10.5)') ia,"    ",eff_pot%crystal%amu(eff_pot%crystal%typat(ia))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2696)        do mu=1,3
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2697)          WRITE(unit_born,'(a,3(F23.14))') "     ",eff_pot%harmonics_terms%zeff(:,mu,ia)
f22be086bd (amartin             2017-05-24 11:23:18 +0200 2698)        end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2699)      end if
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2700)    end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2701)  end do
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2702) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2703) !DIELECTRIC TENSOR FILE
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2704)  if (open_file('system/Dielectric_Tensor',msg,unit=unit_epsiloninf,form="formatted",&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2705) &    status="replace",action="write") /= 0) then
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2706)    MSG_ERROR(msg)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2707)  end if
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2708)  do mu=1,3
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2709)    WRITE(unit_epsiloninf,'(3(F23.14))') eff_pot%harmonics_terms%epsilon_inf(:,mu)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2710)  end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2711) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2712) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2713) !REFERENCE STRUCTURE FILE
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2714)  if (open_file('system/Reference_structure',msg,unit=unit_ref,form="formatted",&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2715) &    status="replace",action="write") /= 0) then
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2716)    MSG_ERROR(msg)
f22be086bd (amartin             2017-05-24 11:23:18 +0200 2717)  end if
8c509e24b9 (amartin             2017-06-02 09:38:14 +0200 2718) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2719)  write(unit_ref,'("Energy (Hartree)")')
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2720)  write(unit_ref,'("================")')
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2721)  write(unit_ref,'(F23.14)') (hist%etot(1)/nshift)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2722)  write(unit_ref,'("")')
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2723)  write(unit_ref,'("Cell vectors")')
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2724)  write(unit_ref,'("============")')
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2725)  do jj=1,3
6efc172326 (Matthieu Verstraete 2017-07-11 16:59:17 +0200 2726)    write(unit_ref,'(3(F22.14))') (supercell%rprimd(:,jj))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2727)  end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2728) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2729)  write(unit_ref,'("")')
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2730)  write(unit_ref,'("Atomic positions (Bohr radius)")')
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2731)  write(unit_ref,'("==============================")')
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2732) 
1a8b09feb9 (Matthieu Verstraete 2017-05-21 21:30:02 +0200 2733)  do ia=1,supercell%natom
6efc172326 (Matthieu Verstraete 2017-07-11 16:59:17 +0200 2734)    write(unit_ref,'(3(F23.14))') supercell%xcart(:,typat_order(ia))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2735)  end do
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2736) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2737) !Harmonic XML file
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2738)  if (open_file('system/harmonic.xml',msg,unit=unit_harmonic,form="formatted",&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2739) &     status="replace",action="write") /= 0) then
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2740)    MSG_ERROR(msg)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2741)  end if
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2742) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2743) !Write header
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2744)  write(unit_harmonic,'("<?xml version=""1.0"" ?>")')
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2745)  write(unit_harmonic,'("<name>")')
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2746) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2747)  do irpt=1,eff_pot%harmonics_terms%ifcs%nrpt
0d14638dc1 (amartin             2017-09-19 12:35:15 +0200 2748)    if(any(abs(eff_pot%harmonics_terms%ifcs%short_atmfrc(:,:,:,:,irpt))>tol9)) then
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2749)      write(unit_harmonic,'("  <local_force_constant units=""hartree/bohrradius**2"">")')
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2750)      write(unit_harmonic,'("    <data>")')
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2751)      do ia=1,eff_pot%crystal%natom
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2752)        do mu=1,3
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2753)          do ib=1,eff_pot%crystal%natom
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2754)            do  nu=1,3
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2755)              write(unit_harmonic,'(F22.14)', advance="no")&
0d14638dc1 (amartin             2017-09-19 12:35:15 +0200 2756) &                 (eff_pot%harmonics_terms%ifcs%short_atmfrc(mu,typat_order_uc(ia),&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2757) &                                                              nu,typat_order_uc(ib),irpt))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2758)            end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2759)          end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2760)          write(unit_harmonic,'(a)')''
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2761)        end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2762)      end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2763)      write(unit_harmonic,'("    </data>")')
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2764)      write(unit_harmonic,'("    <cell>")')
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2765)      write(unit_harmonic,'(3(I4))') (eff_pot%harmonics_terms%ifcs%cell(:,irpt))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2766)      write(unit_harmonic,'("    </cell>")')
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2767)      write(unit_harmonic,'("  </local_force_constant>")')
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2768)    end if
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2769)  end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2770)  write(unit_harmonic,'("</name>")')
f22be086bd (amartin             2017-05-24 11:23:18 +0200 2771) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2772) !STRAIN FILE
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2773)  if (open_file('system/Strain_Tensor',msg,unit=unit_strain,form="formatted",&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2774) &     status="replace",action="write") /= 0) then
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2775)    MSG_ERROR(msg)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2776)  end if
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2777)  write(unit_strain,'(6(F23.14))') (eff_pot%harmonics_terms%elastic_constants)
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2778) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2779) ! SYM FILE
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2780)  if (open_file('system/symmetry_operations',msg,unit=unit_sym,form="formatted",&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2781) &     status="replace",action="write") /= 0) then
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2782)    MSG_ERROR(msg)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2783)  end if
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2784)  write(unit_sym,'("(x,y,z)  (y,-x,z) (z,x,y) (y,z,x) (x,z,y) (y,x,z) (z,y,x) (x,-y,-z) (z,-x,-y)",&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2785) &                " (y,-z,-x) (x,-z,-y) (y,-x,-z) (z,-y,-x) (-x,y,-z) (-z,x,-y) (-y,z,-x) (-x,z,-y)",&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2786) &                " (-y,x,-z) (-z,y,-x) (-x,-y,z) (-z,-x,y) (-y,-z,x) (-x,-z,y) (-y,-x,z) (-z,-y,x)",&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2787) &                " (-x,-y,-z) (-z,-x,-y) (-y,-z,-x) (-x,-z,-y) (-y,-x,-z) (-z,-y,-x) (-x,y,z)",&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2788) &                " (-z,x,y) (-y,z,x) (-x,z,y) (-y,x,z) (-z,y,x) (x,-y,z) (z,-x,y) (y,-z,x) (x,-z,y)",&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2789) &                " (z,-y,x) (x,y,-z) (z,x,-y) (y,z,-x) (x,z,-y) (y,x,-z) (z,y,-x)")')
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2790) 
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2791) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2792) !MD file
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2793)  nstep = hist%mxhist
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2794)  if (open_file('system/Molecular_dynamic',msg,unit=unit_md,form="formatted",&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2795) &     status="replace",action="write") /= 0) then
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2796)    MSG_ERROR(msg)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2797)  end if
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2798)  do ii=1,nstep
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2799)    write(unit_md,'(I5)') ii-1
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2800)    write(unit_md,'(F22.14)') hist%etot(ii)/nshift
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2801)    do jj=1,3
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2802)      write(unit_md,'(3(F22.14))') (hist%rprimd(:,jj,ii))
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2803)    end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2804) !  Set xcart and fcart for this step
6efc172326 (Matthieu Verstraete 2017-07-11 16:59:17 +0200 2805)    call xred2xcart(supercell%natom,hist%rprimd(:,:,ii),&
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2806) &                  xcart,hist%xred(:,:,ii))
a711ffbf94 (amartin             2017-05-16 16:49:16 +0200 2807) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2808)    fcart(:,:) = hist%fcart(:,:,ii)
8c509e24b9 (amartin             2017-06-02 09:38:14 +0200 2809) 
1a8b09feb9 (Matthieu Verstraete 2017-05-21 21:30:02 +0200 2810)    do ia=1,supercell%natom
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2811)      write(unit_md,'(3(E22.14),3(E22.14))') xcart(:,typat_order(ia)),fcart(:,typat_order(ia))
8c509e24b9 (amartin             2017-06-02 09:38:14 +0200 2812)    end do
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2813)    write(unit_md,'(6(E22.14))') hist%strten(:,ii)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2814)  end do
8c509e24b9 (amartin             2017-06-02 09:38:14 +0200 2815) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2816) !Close files
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2817)  close(unit_ref)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2818)  close(unit_born)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2819)  close(unit_harmonic)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2820)  close(unit_epsiloninf)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2821)  close(unit_md)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2822)  close(unit_strain)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2823)  close(unit_sym)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2824) 
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 2825) !Deallocation array
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2826)  ABI_DEALLOCATE(typat_order)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2827)  ABI_DEALLOCATE(typat_order_uc)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2828)  ABI_DEALLOCATE(xcart)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2829)  ABI_DEALLOCATE(fcart)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2830)  call destroy_supercell(supercell)
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2831) 
736df84b18 (amartin             2017-06-20 12:27:38 +0200 2832) end subroutine fit_polynomial_printSystemFiles
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2833) !!***
19835b92f0 (amartin             2017-02-15 17:42:55 +0100 2834) 
d2266f5521 (Alexandre Martin    2017-12-14 13:32:29 +0100 2835) recursive subroutine genereList(i,m,m_max,n_max,list,list_out,size,compute)
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2836) 
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2837)  implicit none
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2838) 
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2839) !Arguments ---------------------------------------------
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2840) !scalar
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2841)  integer, intent(in) :: m_max,n_max,m,size
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2842)  integer, intent(inout) :: i
d2266f5521 (Alexandre Martin    2017-12-14 13:32:29 +0100 2843)  logical,intent(in) :: compute
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2844) !arrays
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2845)  integer, intent(out) :: list(m_max),list_out(size,m_max)
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2846) !Local variables ---------------------------------------
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2847) !scalar
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2848)  integer n
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2849) !arrays
5b987480c0 (Matteo Giantomassi  2018-03-27 15:51:46 +0200 2850) 
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2851) ! *************************************************************************
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2852)  if (m > m_max) then
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2853)    i = i + 1
d2266f5521 (Alexandre Martin    2017-12-14 13:32:29 +0100 2854)    if(compute)list_out(i,:) = list(:)
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2855)  else
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2856)    do n = 1, n_max
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2857)      if (m == 1)then
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2858)        list(m) = n
d2266f5521 (Alexandre Martin    2017-12-14 13:32:29 +0100 2859)        call genereList (i, m + 1,m_max,n_max,list,list_out,size,compute)
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2860)      else if (n > list(m - 1)) then
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2861)        list(m) = n
d2266f5521 (Alexandre Martin    2017-12-14 13:32:29 +0100 2862)        call genereList (i, m + 1,m_max,n_max,list,list_out,size,compute)
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2863)      end if
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2864)    end do
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2865)  end if
10ec0dca43 (Alexandre Martin    2017-11-28 15:33:54 +0100 2866) 
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2867) end subroutine genereList
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2868) !!***
2f89593f34 (Alexandre Martin    2017-07-20 17:00:51 +0200 2869) 
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100 2870) end module m_fit_polynomial_coeff
11acd4b3f3 (amartin             2016-11-29 15:51:34 +0100 2871) !!***
